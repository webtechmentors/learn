"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[106],{2674:(Pd,f,n)=>{n.r(f),n.d(f,{JsBookModule:()=>Ad});var d={};n.r(d),n.d(d,{js_10_1_1:()=>gn,js_10_1_1_1:()=>rd,js_10_1_2:()=>_n,js_10_1_2_1:()=>cd,js_10_1_3:()=>ud,js_10_1_4:()=>dd,js_10_1_4_1:()=>pd,js_10_2_1:()=>md,js_10_2_10:()=>xn,js_10_2_10_1:()=>wd,js_10_2_11:()=>Sd,js_10_2_11_1:()=>Ld,js_10_2_2:()=>hd,js_10_2_3:()=>gd,js_10_2_4:()=>_d,js_10_2_5:()=>xd,js_10_2_5_1:()=>fd,js_10_2_6:()=>yd,js_10_2_7:()=>bd,js_10_2_8:()=>vd,js_10_2_9:()=>jd,js_10_3_1:()=>fn,js_10_3_1_1:()=>Td,js_10_3_2:()=>yn,js_10_3_2_1:()=>Od,js_10_3_3:()=>bn,js_10_3_3_1:()=>Cd,js_11_2_1:()=>vn,js_11_2_1_1:()=>Ed,js_2_1_1:()=>y,js_2_1_10:()=>j,js_2_1_11:()=>w,js_2_1_11_1:()=>Rn,js_2_1_12:()=>Nn,js_2_1_13:()=>S,js_2_1_13_1:()=>Mn,js_2_1_1_1:()=>On,js_2_1_2:()=>Cn,js_2_1_3:()=>En,js_2_1_4:()=>kn,js_2_1_5:()=>Jn,js_2_1_6:()=>In,js_2_1_7:()=>Dn,js_2_1_8:()=>b,js_2_1_8_1:()=>An,js_2_1_9:()=>v,js_2_1_9_1:()=>Pn,js_2_2_1:()=>Bn,js_2_2_10:()=>$n,js_2_2_11:()=>Gn,js_2_2_2:()=>Hn,js_2_2_3:()=>Un,js_2_2_4:()=>zn,js_2_2_5:()=>qn,js_2_2_6:()=>Fn,js_2_2_7:()=>Wn,js_2_2_8:()=>Yn,js_2_2_9:()=>Vn,js_2_3_1:()=>L,js_2_3_10:()=>A,js_2_3_10_1:()=>al,js_2_3_11:()=>P,js_2_3_11_1:()=>sl,js_2_3_12:()=>R,js_2_3_12_1:()=>il,js_2_3_13:()=>N,js_2_3_13_1:()=>rl,js_2_3_1_1:()=>Xn,js_2_3_2:()=>T,js_2_3_2_1:()=>Kn,js_2_3_3:()=>O,js_2_3_3_1:()=>Qn,js_2_3_4:()=>C,js_2_3_4_1:()=>Zn,js_2_3_5:()=>E,js_2_3_5_1:()=>el,js_2_3_6:()=>k,js_2_3_6_1:()=>tl,js_2_3_7:()=>J,js_2_3_7_1:()=>ol,js_2_3_8:()=>I,js_2_3_8_1:()=>nl,js_2_3_9:()=>D,js_2_3_9_1:()=>ll,js_3_1_1:()=>cl,js_3_1_2:()=>M,js_3_1_2_1:()=>ul,js_3_1_3:()=>dl,js_3_1_4:()=>B,js_3_1_4_1:()=>pl,js_3_1_5:()=>ml,js_3_1_6:()=>H,js_3_1_6_1:()=>hl,js_3_1_7:()=>gl,js_3_1_8:()=>U,js_3_1_8_1:()=>_l,js_3_2_1:()=>xl,js_3_2_2:()=>z,js_3_2_2_1:()=>fl,js_3_2_3:()=>yl,js_3_2_4:()=>q,js_3_2_4_1:()=>bl,js_3_2_5:()=>vl,js_3_2_6:()=>F,js_3_2_6_1:()=>jl,js_3_3_1:()=>wl,js_3_3_10:()=>G,js_3_3_10_1:()=>Il,js_3_3_2:()=>W,js_3_3_2_1:()=>Sl,js_3_3_3:()=>Ll,js_3_3_4:()=>Y,js_3_3_4_1:()=>Tl,js_3_3_5:()=>Ol,js_3_3_6:()=>V,js_3_3_6_1:()=>Cl,js_3_3_7:()=>El,js_3_3_8:()=>$,js_3_3_8_1:()=>kl,js_3_3_9:()=>Jl,js_4_1_1:()=>m,js_4_1_10:()=>le,js_4_1_10_1:()=>Rl,js_4_1_11:()=>ae,js_4_1_11_1:()=>Nl,js_4_1_12:()=>se,js_4_1_12_1:()=>Ml,js_4_1_2:()=>X,js_4_1_3:()=>K,js_4_1_4:()=>Q,js_4_1_5:()=>Z,js_4_1_6:()=>ee,js_4_1_7:()=>te,js_4_1_7_1:()=>Dl,js_4_1_8:()=>oe,js_4_1_8_1:()=>Al,js_4_1_9:()=>ne,js_4_1_9_1:()=>Pl,js_4_2_1:()=>ie,js_4_2_1_1:()=>Bl,js_4_2_2:()=>re,js_4_2_2_1:()=>Hl,js_4_2_3:()=>ce,js_4_2_3_1:()=>Ul,js_4_2_4:()=>ue,js_4_2_4_1:()=>zl,js_4_3_1:()=>de,js_4_3_1_1:()=>ql,js_4_3_2:()=>pe,js_4_3_2_1:()=>Fl,js_4_3_3:()=>me,js_4_3_3_1:()=>Wl,js_4_3_4:()=>he,js_4_3_4_1:()=>Yl,js_4_3_5:()=>ge,js_4_3_5_1:()=>Vl,js_4_3_6:()=>_e,js_4_3_6_1:()=>$l,js_4_4_1:()=>xe,js_4_4_1_1:()=>Gl,js_4_4_2:()=>fe,js_4_4_2_1:()=>Xl,js_4_4_3:()=>ye,js_4_4_3_1:()=>Kl,js_4_5_1:()=>Ql,js_4_5_2:()=>be,js_4_5_2_1:()=>Zl,js_4_5_3:()=>ve,js_4_5_3_1:()=>ea,js_4_5_4:()=>je,js_4_5_4_1:()=>ta,js_4_5_5:()=>we,js_4_5_5_1:()=>oa,js_4_5_6:()=>Se,js_4_5_6_1:()=>na,js_4_5_7:()=>Le,js_4_5_7_1:()=>la,js_4_5_8:()=>Te,js_4_5_8_1:()=>aa,js_4_5_9:()=>Oe,js_4_5_9_1:()=>sa,js_5_1_1:()=>Ce,js_5_1_10:()=>Ne,js_5_1_10_1:()=>ha,js_5_1_11:()=>Me,js_5_1_11_1:()=>ga,js_5_1_12:()=>Be,js_5_1_12_1:()=>_a,js_5_1_13:()=>He,js_5_1_13_1:()=>xa,js_5_1_14:()=>Ue,js_5_1_14_1:()=>fa,js_5_1_15:()=>ze,js_5_1_15_1:()=>ya,js_5_1_16:()=>qe,js_5_1_16_1:()=>ba,js_5_1_17:()=>Fe,js_5_1_17_1:()=>va,js_5_1_18:()=>We,js_5_1_18_1:()=>ja,js_5_1_19:()=>Ye,js_5_1_19_1:()=>wa,js_5_1_2:()=>Ee,js_5_1_20:()=>Ve,js_5_1_20_1:()=>Sa,js_5_1_3:()=>ke,js_5_1_3_1:()=>ia,js_5_1_4:()=>Je,js_5_1_4_1:()=>ra,js_5_1_5:()=>Ie,js_5_1_5_1:()=>ca,js_5_1_6:()=>De,js_5_1_6_1:()=>ua,js_5_1_7:()=>Ae,js_5_1_7_1:()=>da,js_5_1_8:()=>Pe,js_5_1_8_1:()=>pa,js_5_1_9:()=>Re,js_5_1_9_1:()=>ma,js_5_2_1:()=>$e,js_5_2_10:()=>nt,js_5_2_10_1:()=>Aa,js_5_2_11:()=>lt,js_5_2_11_1:()=>Pa,js_5_2_12:()=>at,js_5_2_12_1:()=>Ra,js_5_2_13:()=>st,js_5_2_13_1:()=>Na,js_5_2_14:()=>it,js_5_2_14_1:()=>Ma,js_5_2_15:()=>rt,js_5_2_15_1:()=>Ba,js_5_2_16:()=>ct,js_5_2_16_1:()=>Ha,js_5_2_17:()=>ut,js_5_2_17_1:()=>Ua,js_5_2_18:()=>dt,js_5_2_18_1:()=>za,js_5_2_19:()=>pt,js_5_2_19_1:()=>qa,js_5_2_1_1:()=>La,js_5_2_2:()=>Ge,js_5_2_20:()=>mt,js_5_2_20_1:()=>Fa,js_5_2_21:()=>ht,js_5_2_21_1:()=>Wa,js_5_2_22:()=>gt,js_5_2_22_1:()=>Ya,js_5_2_23:()=>_t,js_5_2_23_1:()=>Va,js_5_2_24:()=>xt,js_5_2_24_1:()=>$a,js_5_2_25:()=>ft,js_5_2_25_1:()=>Ga,js_5_2_26:()=>yt,js_5_2_26_1:()=>Xa,js_5_2_27:()=>bt,js_5_2_27_1:()=>Ka,js_5_2_28:()=>vt,js_5_2_28_1:()=>Qa,js_5_2_29:()=>jt,js_5_2_29_1:()=>Za,js_5_2_2_1:()=>Ta,js_5_2_3:()=>Xe,js_5_2_3_1:()=>Oa,js_5_2_4:()=>Ke,js_5_2_4_1:()=>Ca,js_5_2_5:()=>Qe,js_5_2_5_1:()=>Ea,js_5_2_6:()=>Ze,js_5_2_6_1:()=>ka,js_5_2_7:()=>et,js_5_2_7_1:()=>Ja,js_5_2_8:()=>tt,js_5_2_8_1:()=>Ia,js_5_2_9:()=>ot,js_5_2_9_1:()=>Da,js_5_3_1:()=>wt,js_5_3_10:()=>It,js_5_3_10_1:()=>cs,js_5_3_11:()=>Dt,js_5_3_11_1:()=>us,js_5_3_12:()=>At,js_5_3_12_1:()=>ds,js_5_3_13:()=>Pt,js_5_3_13_1:()=>ps,js_5_3_14:()=>Rt,js_5_3_14_1:()=>ms,js_5_3_15:()=>Nt,js_5_3_15_1:()=>hs,js_5_3_16:()=>Mt,js_5_3_16_1:()=>gs,js_5_3_17:()=>Bt,js_5_3_17_1:()=>_s,js_5_3_18:()=>Ht,js_5_3_18_1:()=>xs,js_5_3_19:()=>Ut,js_5_3_19_1:()=>fs,js_5_3_1_1:()=>es,js_5_3_2:()=>St,js_5_3_20:()=>zt,js_5_3_20_1:()=>ys,js_5_3_21:()=>qt,js_5_3_21_1:()=>bs,js_5_3_22:()=>Ft,js_5_3_22_1:()=>vs,js_5_3_23:()=>Wt,js_5_3_23_1:()=>js,js_5_3_24:()=>Yt,js_5_3_24_1:()=>ws,js_5_3_25:()=>Vt,js_5_3_25_1:()=>Ss,js_5_3_2_1:()=>ts,js_5_3_3:()=>Lt,js_5_3_3_1:()=>os,js_5_3_4:()=>Tt,js_5_3_4_1:()=>ns,js_5_3_5:()=>Ot,js_5_3_5_1:()=>ls,js_5_3_6:()=>Ct,js_5_3_6_1:()=>as,js_5_3_7:()=>Et,js_5_3_7_1:()=>ss,js_5_3_8:()=>kt,js_5_3_8_1:()=>is,js_5_3_9:()=>Jt,js_5_3_9_1:()=>rs,js_5_4_1:()=>s,js_5_4_10:()=>eo,js_5_4_10_1:()=>Js,js_5_4_11:()=>to,js_5_4_11_1:()=>Is,js_5_4_12:()=>oo,js_5_4_12_1:()=>Ds,js_5_4_13:()=>no,js_5_4_13_1:()=>As,js_5_4_14:()=>h,js_5_4_15:()=>g,js_5_4_16:()=>lo,js_5_4_16_1:()=>Ps,js_5_4_17:()=>ao,js_5_4_17_1:()=>Rs,js_5_4_18:()=>_,js_5_4_19:()=>x,js_5_4_2:()=>i,js_5_4_20:()=>so,js_5_4_20_1:()=>Ns,js_5_4_21:()=>io,js_5_4_21_1:()=>Ms,js_5_4_2a:()=>$t,js_5_4_2a_1:()=>Ls,js_5_4_3:()=>Gt,js_5_4_3_1:()=>Ts,js_5_4_4:()=>Xt,js_5_4_4_1:()=>Os,js_5_4_5:()=>Kt,js_5_4_5_1:()=>Cs,js_5_4_6:()=>Qt,js_5_4_6_1:()=>Es,js_5_4_7:()=>r,js_5_4_8:()=>c,js_5_4_9:()=>Zt,js_5_4_9_1:()=>ks,js_5_5_1:()=>Bs,js_5_5_2:()=>Hs,js_5_5_3:()=>Us,js_5_5_4:()=>ro,js_5_5_4_1:()=>zs,js_5_5_5:()=>co,js_5_5_5_1:()=>qs,js_6_1_1:()=>uo,js_6_1_1_1:()=>Fs,js_6_1_2:()=>po,js_6_1_3:()=>mo,js_6_1_4:()=>ho,js_6_1_5:()=>go,js_6_1_5_1:()=>Ws,js_6_2_1:()=>Ys,js_6_2_10:()=>vo,js_6_2_11:()=>ti,js_6_2_12:()=>jo,js_6_2_13:()=>wo,js_6_2_13_1:()=>oi,js_6_2_2:()=>Vs,js_6_2_3:()=>_o,js_6_2_3_1:()=>$s,js_6_2_4:()=>xo,js_6_2_4_1:()=>Gs,js_6_2_5:()=>fo,js_6_2_5_1:()=>Xs,js_6_2_6:()=>yo,js_6_2_6_1:()=>Ks,js_6_2_7:()=>bo,js_6_2_7_1:()=>Qs,js_6_2_8:()=>Zs,js_6_2_9:()=>ei,js_6_3_1:()=>So,js_6_3_10:()=>Do,js_6_3_10_1:()=>pi,js_6_3_11:()=>Ao,js_6_3_11_1:()=>mi,js_6_3_12:()=>Po,js_6_3_12_1:()=>hi,js_6_3_13:()=>Ro,js_6_3_13_1:()=>gi,js_6_3_14:()=>No,js_6_3_14_1:()=>_i,js_6_3_15:()=>Mo,js_6_3_15_1:()=>xi,js_6_3_16:()=>Bo,js_6_3_16_1:()=>fi,js_6_3_1_1:()=>ni,js_6_3_2:()=>Lo,js_6_3_2_1:()=>li,js_6_3_3:()=>To,js_6_3_3_1:()=>ai,js_6_3_4:()=>Oo,js_6_3_4_1:()=>si,js_6_3_5:()=>Co,js_6_3_5_1:()=>ii,js_6_3_6:()=>Eo,js_6_3_6_1:()=>ri,js_6_3_7:()=>ko,js_6_3_7_1:()=>ci,js_6_3_8:()=>Jo,js_6_3_8_1:()=>ui,js_6_3_9:()=>Io,js_6_3_9_1:()=>di,js_7_2_1:()=>Ho,js_7_2_1_1:()=>yc,js_7_2_2:()=>Uo,js_7_2_2_1:()=>bc,js_7_3_1:()=>vc,js_7_3_10:()=>Mc,js_7_3_10_1:()=>Bc,js_7_3_2:()=>jc,js_7_3_2_1:()=>wc,js_7_3_3:()=>Sc,js_7_3_3_1:()=>Lc,js_7_3_4:()=>Tc,js_7_3_4_1:()=>Oc,js_7_3_5:()=>Cc,js_7_3_5_1:()=>Ec,js_7_3_6:()=>kc,js_7_3_6_1:()=>Jc,js_7_3_7:()=>Ic,js_7_3_7_1:()=>Dc,js_7_3_8:()=>Ac,js_7_3_8_1:()=>Pc,js_7_3_9:()=>Rc,js_7_3_9_1:()=>Nc,js_7_4_1:()=>zo,js_7_4_1_1:()=>Hc,js_7_4_2:()=>qo,js_7_4_2_1:()=>Uc,js_7_5_1:()=>zc,js_7_5_1_1:()=>qc,js_8_1_1:()=>Fc,js_8_1_1_1:()=>Wc,js_8_1_2:()=>Fo,js_8_1_2_1:()=>Yc,js_8_1_3:()=>Vc,js_8_1_3_1:()=>$c,js_8_1_4:()=>Gc,js_8_1_4_1:()=>Xc,js_8_1_5:()=>Kc,js_8_1_5_1:()=>Qc,js_8_1_6:()=>Zc,js_8_1_6_1:()=>eu,js_8_1_7:()=>tu,js_8_1_7_1:()=>ou,js_8_1_8:()=>Wo,js_8_1_8_1:()=>nu,js_8_1_9:()=>Yo,js_8_1_9_1:()=>lu,js_8_2_1:()=>Vo,js_8_2_1_1:()=>au,js_8_2_2:()=>$o,js_8_2_2_1:()=>su,js_8_2_3:()=>Go,js_8_2_3_1:()=>iu,js_8_2_4:()=>Xo,js_8_2_4_1:()=>ru,js_8_2_5:()=>Ko,js_8_2_5_1:()=>cu,js_8_2_6:()=>Qo,js_8_2_6_1:()=>uu,js_8_2_7:()=>Zo,js_8_2_7_1:()=>du,js_8_3_1:()=>pu,js_8_3_10:()=>Eu,js_8_3_11:()=>ku,js_8_3_12:()=>Ju,js_8_3_12_1:()=>Iu,js_8_3_13:()=>Du,js_8_3_13_1:()=>Au,js_8_3_14:()=>Pu,js_8_3_15:()=>Ru,js_8_3_15_1:()=>Nu,js_8_3_16:()=>Mu,js_8_3_16_1:()=>Bu,js_8_3_1_1:()=>mu,js_8_3_2:()=>hu,js_8_3_2_1:()=>gu,js_8_3_3:()=>_u,js_8_3_3_1:()=>xu,js_8_3_4:()=>fu,js_8_3_4_1:()=>yu,js_8_3_5:()=>bu,js_8_3_5_1:()=>vu,js_8_3_6:()=>ju,js_8_3_6_1:()=>wu,js_8_3_7:()=>Su,js_8_3_7_1:()=>Lu,js_8_3_8:()=>Tu,js_8_3_8_1:()=>Ou,js_8_3_9:()=>Cu,js_8_4_1:()=>en,js_8_4_1_1:()=>Hu,js_8_4_2:()=>Uu,js_8_4_3:()=>zu,js_8_4_4:()=>qu,js_8_4_5:()=>Fu,js_8_4_6:()=>Wu,js_8_4_7:()=>Yu,js_8_4_8:()=>Vu,js_8_4_9:()=>$u,js_8_5_1:()=>tn,js_8_5_10:()=>dn,js_8_5_10_1:()=>ld,js_8_5_11:()=>pn,js_8_5_11_1:()=>ad,js_8_5_12:()=>mn,js_8_5_12_1:()=>sd,js_8_5_13:()=>hn,js_8_5_13_1:()=>id,js_8_5_1_1:()=>Gu,js_8_5_2:()=>on,js_8_5_2_1:()=>Xu,js_8_5_3:()=>nn,js_8_5_3_1:()=>Ku,js_8_5_4:()=>ln,js_8_5_4_1:()=>Qu,js_8_5_5:()=>an,js_8_5_5_1:()=>Zu,js_8_5_6:()=>sn,js_8_5_6_1:()=>ed,js_8_5_7:()=>rn,js_8_5_7_1:()=>td,js_8_5_8:()=>cn,js_8_5_8_1:()=>od,js_8_5_9:()=>un,js_8_5_9_1:()=>nd,js_9_2_1:()=>yi,js_9_2_10:()=>Ni,js_9_2_10_1:()=>Mi,js_9_2_11:()=>Bi,js_9_2_11_1:()=>Hi,js_9_2_12:()=>Ui,js_9_2_12_1:()=>zi,js_9_2_13:()=>qi,js_9_2_13_1:()=>Fi,js_9_2_14:()=>Wi,js_9_2_14_1:()=>Yi,js_9_2_15:()=>Vi,js_9_2_15_1:()=>$i,js_9_2_16:()=>Gi,js_9_2_16_1:()=>Xi,js_9_2_17:()=>Ki,js_9_2_17_1:()=>Qi,js_9_2_18:()=>Zi,js_9_2_18_1:()=>er,js_9_2_19:()=>tr,js_9_2_19_1:()=>or,js_9_2_1_1:()=>bi,js_9_2_2:()=>vi,js_9_2_20:()=>nr,js_9_2_20_1:()=>lr,js_9_2_21:()=>ar,js_9_2_21_1:()=>sr,js_9_2_22:()=>ir,js_9_2_22_1:()=>rr,js_9_2_23:()=>cr,js_9_2_23_1:()=>ur,js_9_2_24:()=>dr,js_9_2_24_1:()=>pr,js_9_2_25:()=>mr,js_9_2_25_1:()=>hr,js_9_2_26:()=>gr,js_9_2_26_1:()=>_r,js_9_2_27:()=>xr,js_9_2_27_1:()=>fr,js_9_2_2_1:()=>ji,js_9_2_3:()=>wi,js_9_2_3_1:()=>Si,js_9_2_4:()=>Li,js_9_2_4_1:()=>Ti,js_9_2_5:()=>Oi,js_9_2_5_1:()=>Ci,js_9_2_6:()=>Ei,js_9_2_6_1:()=>ki,js_9_2_7:()=>Ji,js_9_2_7_1:()=>Ii,js_9_2_8:()=>Di,js_9_2_8_1:()=>Ai,js_9_2_9:()=>Pi,js_9_2_9_1:()=>Ri,js_9_3_1:()=>yr,js_9_3_10:()=>Nr,js_9_3_10_1:()=>Mr,js_9_3_11:()=>Br,js_9_3_11_1:()=>Hr,js_9_3_12:()=>Ur,js_9_3_12_1:()=>zr,js_9_3_13:()=>qr,js_9_3_13_1:()=>Fr,js_9_3_14:()=>Wr,js_9_3_14_1:()=>Yr,js_9_3_15:()=>Vr,js_9_3_15_1:()=>$r,js_9_3_16:()=>Gr,js_9_3_16_1:()=>Xr,js_9_3_17:()=>Kr,js_9_3_17_1:()=>Qr,js_9_3_18:()=>Zr,js_9_3_18_1:()=>ec,js_9_3_19:()=>tc,js_9_3_19_1:()=>oc,js_9_3_1_1:()=>br,js_9_3_2:()=>vr,js_9_3_20:()=>nc,js_9_3_20_1:()=>lc,js_9_3_21:()=>ac,js_9_3_21_1:()=>sc,js_9_3_22:()=>ic,js_9_3_22_1:()=>rc,js_9_3_23:()=>cc,js_9_3_23_1:()=>uc,js_9_3_24:()=>dc,js_9_3_24_1:()=>pc,js_9_3_25:()=>mc,js_9_3_25_1:()=>hc,js_9_3_26:()=>gc,js_9_3_26_1:()=>_c,js_9_3_2_1:()=>jr,js_9_3_3:()=>wr,js_9_3_3_1:()=>Sr,js_9_3_4:()=>Lr,js_9_3_4_1:()=>Tr,js_9_3_5:()=>Or,js_9_3_5_1:()=>Cr,js_9_3_6:()=>Er,js_9_3_6_1:()=>kr,js_9_3_7:()=>Jr,js_9_3_7_1:()=>Ir,js_9_3_8:()=>Dr,js_9_3_8_1:()=>Ar,js_9_3_9:()=>Pr,js_9_3_9_1:()=>Rr,js_9_4_1:()=>xc,js_9_4_1_1:()=>fc});var wn=n(6895),p=n(9299);const Sn=[{category:"js",chid:1,title:"Introduction to JavaScript",sections:[{secid:1,subtitle:"What is JavaScript?",paragraphs:[{text:"JavaScript is a high-level, interpreted programming language primarily used for creating interactive and dynamic behavior on websites. It is a versatile language that allows developers to build a wide range of applications, from simple web page enhancements to complex web applications and server-side development."},{text:"Here are some key points about JavaScript:"},{text:"<ol><li><strong>Core Features</strong></li></ol>"},{text:"<ul><ul><li><strong>Dynamic Typing</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript is dynamically typed, which means you don't have to specify the data type of a variable when you declare it.</ul></ul>"},{text:"<ul><ul><li><strong>Object-Oriented and Functional</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript supports both object-oriented and functional programming paradigms.</ul></ul>"},{text:"<ul><ul><li><strong>Event-Driven</strong></li></ul></ul>"},{text:"<ul><ul>It can respond to events, such as user interactions like clicks, form input, and page navigation, making websites more interactive.</ul></ul>"},{text:"<ul><ul><li><strong>Client-Side and Server-Side</strong></li></ul></ul>"},{text:"<ul><ul>Although originally designed to run in the browser, JavaScript is now used server-side as well, most notably with Node.js.</ul></ul>"},{text:'<ol start="2"><li><strong>Key Components</strong></li></ol>'},{text:"<ul><ul><li><strong>ECMAScript</strong></li></ul></ul>"},{text:"<ul><ul>The standardized scripting language specification upon which JavaScript is based.</ul></ul>"},{text:"<ul><ul><li><strong>Document Object Model (DOM)</strong></li></ul></ul>"},{text:"<ul><ul>The structure representing a web page, which JavaScript can manipulate.</ul></ul>"},{text:"<ul><ul><li><strong>Asynchronous JavaScript and AJAX</strong></li></ul></ul>"},{text:"<ul><ul>A technique that allows JavaScript to communicate with a server in the background without refreshing the page.</ul></ul>"},{text:'<ol start="3"><li><strong>Areas of Application</strong></li></ol>'},{text:"<ul><ul><li><strong>Web Development</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript is crucial for client-side web scripting. Modern web frameworks like Angular, React, and Vue.js are JavaScript-based.</ul></ul>"},{text:"<ul><ul><li><strong>Server-Side Development</strong></li></ul></ul>"},{text:"<ul><ul>With Node.js, JavaScript can be used to build robust server-side applications.</ul></ul>"},{text:"<ul><ul><li><strong>Mobile App Development</strong></li></ul></ul>"},{text:"<ul><ul>Frameworks like React Native enable JavaScript-based mobile app development.</ul></ul>"},{text:"<ul><ul><li><strong>Internet of Things (IoT)</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript can be used in IoT development, particularly through Node.js.</ul></ul>"},{text:'<ol start="4"><li><strong>Advantages</strong></li></ol>'},{text:"<ul><ul><li><strong>Versatile</strong></li></ul></ul>"},{text:"<ul><ul>Can be used for both front-end and back-end development.</ul></ul>"},{text:"<ul><ul><li><strong>Large Ecosystem</strong></li></ul></ul>"},{text:"<ul><ul>Extensive libraries, frameworks, and community support.</ul></ul>"},{text:"<ul><ul><li><strong>Good Performance</strong></li></ul></ul>"},{text:"<ul><ul>Just-in-time compilation and other optimizations make JavaScript very fast.</ul></ul>"},{text:"<ul><ul><li><strong>Cross-Platform</strong></li></ul></ul>"},{text:"<ul><ul>Runs on any device that has a web browser, and server-side via Node.js.</ul></ul>"},{text:'<ol start="5"><li><strong>Limitations</strong></li></ol>'},{text:"<ul><ul><li><strong>Single-Threaded</strong></li></ul></ul>"},{text:"<ul><ul>Although it can perform asynchronous operations, JavaScript is single-threaded, which can be a limitation for some types of applications.</ul></ul>"},{text:"<ul><ul><li><strong>Client-Side Security</strong></li></ul></ul>"},{text:"<ul><ul>Since JavaScript runs on the client side, it can be exploited for malicious purposes.</ul></ul>"},{text:"Overall, JavaScript is a powerful programming language that enables developers to bring interactivity, functionality, and dynamism to web pages and web applications. Its versatility, widespread adoption, and continuous development make it a popular choice for both beginner and experienced developers in the web development industry."}]},{secid:2,subtitle:"History and Evolution of JavaScript",paragraphs:[{text:"JavaScript has an interesting history and has undergone significant evolution since its creation. Here's an overview of the history and key milestones of JavaScript:"},{text:"<ol><li><strong>Creation of JavaScript</strong></li></ol>"},{text:'<ul>JavaScript was created by Brendan Eich in 1995 while he was working at Netscape Communications. Originally called "Mocha", it was later renamed to "LiveScript" and finally to "JavaScript". The goal was to develop a scripting language for web browsers that could add interactivity and dynamic features to web pages.</ul>'},{text:'<ol start="2"><li><strong>Collaboration with ECMA</strong></li></ol>'},{text:"<ul>In 1996, Netscape submitted JavaScript to Ecma International, a standards organization, for standardization. The standardization process resulted in the creation of the ECMAScript specification, which defines the language syntax, semantics, and standard library. The first standardized version was ECMAScript 1 in 1997.</ul>"},{text:'<ol start="3"><li><strong>Adoption by Multiple Browsers</strong></li></ol>'},{text:"<ul>JavaScript quickly gained popularity due to its ability to enhance web pages. Other browsers, such as Microsoft's Internet Explorer, started implementing JavaScript support, often with their own variations. This led to some compatibility issues between different browser implementations.</ul>"},{text:'<ol start="4"><li><strong>DOM and Dynamic Web Content</strong></li></ol>'},{text:"<ul>In the late 1990s, the Document Object Model (DOM) was introduced. The DOM allowed JavaScript to access and manipulate elements of an HTML document, enabling dynamic updates and interactivity. This advancement played a crucial role in the evolution of JavaScript as a powerful web development language.</ul>"},{text:'<ol start="5"><li><strong>AJAX and Rich Internet Applications</strong></li></ol>'},{text:"<ul>In the early 2000s, JavaScript became a key component in the development of AJAX (Asynchronous JavaScript and XML) techniques. AJAX allowed web applications to retrieve data from servers asynchronously without reloading the entire page. This led to the rise of rich internet applications (RIAs), which provided a more desktop-like user experience within a web browser.</ul>"},{text:'<ol start="6"><li><strong>Frameworks and Libraries</strong></li></ol>'},{text:"<ul>The mid-2000s saw the emergence of JavaScript frameworks and libraries that simplified web development. Libraries like jQuery (2006) provided a concise and convenient API for manipulating the DOM and handling events. Later, powerful frameworks like AngularJS (2009), React (2013), and Vue.js (2014) gained popularity, offering advanced tools for building complex web applications.</ul>"},{text:'<ol start="7"><li><strong>Server-Side JavaScript</strong></li></ol>'},{text:"<ul>In 2009, Ryan Dahl introduced Node.js, a runtime environment that allowed JavaScript to run on the server-side. Node.js enabled developers to use JavaScript for server-side programming, opening up opportunities for full-stack JavaScript development and facilitating the creation of scalable and efficient web applications.</ul>"},{text:'<ol start="8"><li><strong>Evolution of ECMAScript</strong></li></ol>'},{text:"<ul>ECMAScript, the standard for JavaScript, has undergone several significant updates and releases. ECMAScript 3 (1999) introduced many core features still widely used today, while ECMAScript 5 (2009) brought important enhancements. ECMAScript 6 (2015) introduced major language improvements, including classes, arrow functions, and modules. Subsequent versions like ECMAScript 2016, 2017, and 2018 introduced additional features and syntax enhancements.</ul>"},{text:'<ol start="9"><li><strong>Modern JavaScript</strong></li></ol>'},{text:"<ul>JavaScript has continued to evolve with regular updates and new features. Recent developments have focused on improving performance, enhancing developer productivity, and providing better language support for complex applications. Notable features introduced in recent years include async/await for asynchronous programming, spread syntax, optional chaining, and more.</ul>"},{text:"JavaScript has come a long way from its early days as a simple scripting language to its current position as a versatile and powerful programming language for web development. Its evolution, standardization, and the vibrant ecosystem of frameworks and libraries have contributed to its widespread adoption and its position as one of the essential technologies on the web."}]},{secid:3,subtitle:"JavaScript in Web Development",paragraphs:[{text:"JavaScript plays a vital role in web development, enabling developers to create dynamic, interactive, and feature-rich web applications. Here are some key aspects of JavaScript's role in web development:"},{text:"<ol><li><strong>Client-Side Interactivity</strong></li></ol>"},{text:"<ul>JavaScript is primarily used on the client-side, meaning it runs directly in the user's web browser. It allows developers to add interactivity and responsiveness to web pages. JavaScript can handle events, such as button clicks, form submissions, and mouse movements, and respond dynamically by modifying the content, styles, or behavior of the page.</ul>"},{text:'<ol start="2"><li><strong>Manipulating the DOM</strong></li></ol>'},{text:"<ul>The Document Object Model (DOM) is a programming interface that represents the structure and content of an HTML document as a tree of objects. JavaScript provides extensive support for accessing, modifying, and manipulating the DOM elements. Developers can use JavaScript to dynamically update the content, create or remove elements, change styles, and handle user interactions.</ul>"},{text:'<ol start="3"><li><strong>Form Validation</strong></li></ol>'},{text:"<ul>JavaScript enables form validation on the client-side, allowing for immediate feedback to users when they submit forms. Developers can use JavaScript to perform various validations, such as checking for required fields, validating email addresses, enforcing input formats, and displaying error messages without the need for a server roundtrip.</ul>"},{text:'<ol start="4"><li><strong>AJAX and Asynchronous Operations</strong></li></ol>'},{text:"<ul>JavaScript, in combination with AJAX (Asynchronous JavaScript and XML) techniques, allows web applications to retrieve data from servers asynchronously without refreshing the entire page. This enables a smoother user experience, as content can be dynamically loaded and updated in the background, providing real-time updates and reducing server load.</ul>"},{text:'<ol start="5"><li><strong>Rich User Interfaces</strong></li></ol>'},{text:"<ul>JavaScript frameworks and libraries like React, Angular, and Vue.js have gained popularity for building complex user interfaces. These frameworks provide powerful tools for managing state, rendering components, and handling user interactions. They enable developers to create interactive, responsive, and dynamic web applications with reusable components and efficient rendering.</ul>"},{text:'<ol start="6"><li><strong>Browser APIs and Integration</strong></li></ol>'},{text:"<ul>JavaScript provides access to various browser APIs (Application Programming Interfaces) that expose additional functionalities and capabilities to web applications. These APIs include geolocation, local storage, web notifications, audio/video playback, canvas for graphics, and many more. JavaScript allows developers to leverage these APIs to create compelling and interactive experiences directly within the browser.</ul>"},{text:'<ol start="7"><li><strong>Web Application Frameworks</strong></li></ol>'},{text:"<ul>JavaScript is the language of choice for many web application frameworks. These frameworks, such as Express.js, Meteor, and Nest.js, enable developers to build server-side applications, APIs, and full-stack web applications using JavaScript. These frameworks provide structure, routing, database integration, and other essential components for developing scalable and robust web applications.</ul>"},{text:'<ol start="8"><li><strong>Cross-Browser Compatibility</strong></li></ol>'},{text:"<ul>JavaScript is supported by all modern web browsers, making it a reliable choice for developing cross-browser compatible web applications. While there may be some minor differences in browser implementations, JavaScript frameworks and libraries often abstract away these inconsistencies, allowing developers to write code that works across different browsers.</ul>"},{text:'<ol start="9"><li><strong>Continuous Development and Libraries</strong></li></ol>'},{text:"<ul>JavaScript has a vast ecosystem of libraries, frameworks, and tools that continuously evolve and enhance web development capabilities. Developers can leverage these libraries and tools to streamline development processes, enhance functionality, improve performance, and address common challenges.</ul>"},{text:"In summary, JavaScript is a fundamental technology in web development, enabling developers to create dynamic and interactive web applications. Its versatility, extensive browser support, and thriving ecosystem make it a powerful language for building engaging user experiences on the web."}]},{secid:4,subtitle:"Setting Up a JavaScript Development Environment",paragraphs:[{text:"Setting up a JavaScript development environment involves configuring the necessary tools and software to write, test, and run JavaScript code. Here's a general guide on how to set up a JavaScript development environment:"},{text:"<ol><li><strong>Install a Text Editor or Integrated Development Environment (IDE)</strong></li></ol>"},{text:"<ul>Choose a text editor or IDE that suits your preferences and requirements. Popular options include Visual Studio Code, Sublime Text, Atom, and WebStorm. Download and install the editor or IDE of your choice.</ul>"},{text:'<ol start="2"><li><strong>Install Node.js</strong></li></ol>'},{text:"<ul>Node.js allows you to run JavaScript code on the server-side and provides a package manager called npm (Node Package Manager) for managing JavaScript libraries and tools.</ul>"},{text:'<ul>Visit the official Node.js website (<a href="https://nodejs.org">https://nodejs.org</a>) and download the recommended version for your operating system.</ul>'},{text:"<ul>Run the installer and follow the instructions to complete the installation.</ul>"},{text:'<ol start="3"><li><strong>Set up a Package.json file</strong></li></ol>'},{text:"<ul>Open a command prompt or terminal in your project's directory.</ul>"},{text:"<ul>Run the command <code>npm init</code> and follow the prompts to initialize a new package.json file.</ul>"},{text:"<ul>The package.json file keeps track of your project's dependencies and other important configuration details.</ul>"},{text:'<ol start="4"><li><strong>Install JavaScript Libraries and Tools</strong></li></ol>'},{text:"<ul>Use npm to install any required JavaScript libraries or tools. For example, if you need a library like React, run the command npm <code>install react</code>.</ul>"},{text:"<ul>Add the necessary libraries and tools as dependencies in your package.json file.</ul>"},{text:'<ol start="5"><li><strong>Use a Module Bundler (optional)</strong></li></ol>'},{text:"<ul>If you plan to use advanced JavaScript features or want to bundle your code for production, consider using a module bundler like Webpack or Parcel.</ul>"},{text:"<ul>Install the desired module bundler globally or locally as per their respective installation instructions.</ul>"},{text:"<ul>Configure the bundler to handle JavaScript files and any other necessary assets (CSS, images, etc.) in your project.</ul>"},{text:'<ol start="6"><li><strong>Testing and Debugging</strong></li></ol>'},{text:"<ul>Set up a testing framework like Jest, Mocha, or Jasmine to write and run tests for your JavaScript code.</ul>"},{text:"<ul>Use browser developer tools (built into modern browsers) or additional tools like Chrome DevTools or Firefox Developer Tools for debugging JavaScript code.</ul>"},{text:'<ol start="7"><li><strong>Browser Live-Reload (optional)</strong></li></ol>'},{text:"<ul>Consider using a live-reload tool like Browsersync or webpack-dev-server to automatically refresh the browser whenever you make changes to your JavaScript code.</ul>"},{text:'<ol start="8"><li><strong>Version Control</strong></li></ol>'},{text:"<ul>Initialize a version control system like Git in your project directory to track code changes and collaborate with others efficiently.</ul>"},{text:"Once you have set up your JavaScript development environment, you can start creating JavaScript files, importing dependencies, running scripts, and testing your code. Remember to regularly update your dependencies, maintain good coding practices, and stay updated with the latest developments in the JavaScript ecosystem."},{text:"Note: The specific steps for setting up a JavaScript development environment may vary depending on your operating system, text editor or IDE, and specific project requirements. It's always a good idea to consult the official documentation and resources for the tools and libraries you choose to use."}]}]},{category:"js",chid:2,title:"Fundamentals of JavaScript",sections:[{secid:1,subtitle:"Syntax Overview",paragraphs:[{text:"A syntax overview of JavaScript involves understanding the basic rules and structures that define how JavaScript code is written and interpreted. Here's a concise guide to the fundamental aspects of JavaScript syntax:"},{text:"<ol><li><strong>Basic Structure</strong></li></ol>"},{text:"<ul><ul><li><strong>Statements</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript code is executed through statements, each performing a distinct action. For example, a statement can be a function call, a variable declaration, or a loop.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_1",exampleid:"js_2_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Semicolons</strong></li></ul></ul>"},{text:"<ul><ul>They are used to mark the end of a statement, although they are optional due to JavaScript's Automatic Semicolon Insertion (ASI) feature. However, for better readability and to avoid potential pitfalls, it's recommended to use semicolons.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Comments</strong></li></ol>'},{text:"<ul><ul><li><strong>Single-line Comments</strong></li></ul></ul>"},{text:"<ul><ul>Useful for short descriptions. They are ignored by the JavaScript engine.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Multi-line Comments</strong></li></ul></ul>"},{text:"<ul><ul>Ideal for longer descriptions or temporarily disabling blocks of code.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Variables and Constants</strong></li></ol>'},{text:"<ul><ul><li><strong>Variables</strong></li></ul></ul>"},{text:"<ul><ul>Used to store data values. <code>let</code> allows you to declare block-level variables that can be reassigned, while <code>const</code> is for variables whose values are not supposed to change.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Variable Naming Rules</strong></li></ul></ul>"},{text:"<ul><ul>A name must start with a letter, underscore (_), or dollar sign ($). Subsequent characters can also be digits (0-9).</ul></ul>"},{text:'<ol start="4"><li><strong>Data Types</strong></li></ol>'},{text:"<ul><ul><li><strong>Primitive Types</strong></li></ul></ul>"},{text:"<ul><ul>These include numbers, strings, booleans (true or false), undefined (a variable not yet defined), and null (a deliberate non-value).</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Objects and Arrays</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript allows complex data structures like objects for key-value pairs and arrays for ordered collections.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Operators</strong></li></ol>'},{text:"<ul><ul><li><strong>Arithmetic Operators</strong></li></ul></ul>"},{text:"<ul><ul>For performing mathematical calculations. For example <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Assignment Operators</strong></li></ul></ul>"},{text:"<ul><ul>Assign values to variables. For example <code>=</code>, <code>+=</code>, <code>-=</code>, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Comparison Operators</strong></li></ul></ul>"},{text:"<ul><ul>Compare values and return a boolean. For example <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code><</code>, <code>></code>, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Logical Operators</strong></li></ul></ul>"},{text:"<ul><ul>Used in conditional statements, return a boolean. For example <code>&&</code>, <code>||</code>, <code>!</code>.</ul></ul>"},{text:'<ol start="6"><li><strong>Control Structures</strong></li></ol>'},{text:"<ul><ul><li><strong><code>if</code>, <code>else if</code>, and <code>else</code> Statements</strong></li></ul></ul>"},{text:"<ul><ul>Allow conditional execution of code blocks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_8",exampleid:"js_2_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>for</code>, <code>while</code>, and <code>do-while</code> Loops</strong></li></ul></ul>"},{text:"<ul><ul>Enable executing a block of code multiple times.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_9",exampleid:"js_2_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Functions</strong></li></ol>'},{text:"<ul><ul><li><strong>Declaration</strong></li></ul></ul>"},{text:"<ul><ul>A function is defined with the <code>function</code> keyword, followed by a name, and a set of parentheses that can contain parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invocation</strong></li></ul></ul>"},{text:"<ul><ul>Functions are invoked or called to execute the code they contain.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_11",exampleid:"js_2_1_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="8"><li><strong>Events</strong></li></ol>'},{text:"<ul><ul><li>Events in JavaScript allow interaction with the HTML document, such as responding to clicks or key presses.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_12",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="9"><li><strong>Case Sensitivity</strong></li></ol>'},{text:"<ul><ul><li>JavaScript treats uppercase and lowercase letters as distinct characters.</li></ul></ul>"},{text:'<ol start="10"><li><strong>Strict Mode</strong></li></ol>'},{text:'<ul><ul><li>Strict mode can be enabled by adding <code>"use strict";</code> at the beginning of a script or a function. It helps in catching common coding errors and "unsafe" actions (like accessing global objects).</li></ul></ul>'},{text:"",codeConfig:{codeid:"js_2_1_13",exampleid:"js_2_1_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Understanding these fundamental aspects of JavaScript syntax is crucial for writing correct and efficient JavaScript code. As you progress, you'll dive deeper into more complex features and best practices."}]},{secid:2,subtitle:"Variables and Data Types",paragraphs:[{text:"In JavaScript, variables are used to store data values that can be manipulated and accessed throughout your code. JavaScript has several data types that represent different kinds of values. Let's explore variables and data types in JavaScript:"},{text:"<ol><li><strong>Declaring Variables</strong></li></ol>"},{text:"<ul><ul><li>In JavaScript, variables are declared using the <code>var</code>, <code>let</code>, or <code>const</code> keywords.</li></ul></ul>"},{text:"<ul><ul><li>The <code>var</code> keyword is used for declaring variables with function scope or global scope. However, it is recommended to use <code>let</code> or <code>const</code> instead of <code>var</code> for better scoping rules and avoiding potential issues.</li></ul></ul>"},{text:"<ul><ul><li>The <code>let</code> keyword is used for declaring variables with block scope, which means they are only accessible within the block of code where they are defined.</li></ul></ul>"},{text:"<ul><ul><li>The <code>const</code> keyword is used for declaring variables that hold constant values. Once assigned, a <code>const</code> variable cannot be reassigned a new value. It is also block-scoped.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Data Types</strong></li></ol>'},{text:"<ul>JavaScript has several built-in data types, including:</ul>"},{text:"<ul><ul><li><strong>Number</strong></li></ul></ul>"},{text:"<ul><ul>Represents numeric values, both integers and floating-point numbers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>String</strong></li></ul></ul>"},{text:"<ul><ul>Represents sequences of characters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Boolean</strong></li></ul></ul>"},{text:"<ul><ul>Represents logical values true or false.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Null</strong></li></ul></ul>"},{text:"<ul><ul>Represents the intentional absence of any object value.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Undefined</strong></li></ul></ul>"},{text:"<ul><ul>Represents the uninitialized value of a variable.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Symbol</strong> (Introduced in ECMAScript 2015)</li></ul></ul>"},{text:"<ul><ul>Represents unique and immutable values, often used as object property identifiers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Object</strong></li></ul></ul>"},{text:"<ul><ul>Represents a collection of key-value pairs. Objects are more complex data types that can hold properties and methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>BigInt</strong> (Introduced in ECMAScript 2020)</li></ul></ul>"},{text:"<ul><ul>Represents arbitrary-precision integers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Dynamic Typing</strong></li></ol>'},{text:"<ul><ul><li>JavaScript is a dynamically-typed language, meaning variables can hold values of any data type without explicitly specifying the type.</li></ul></ul>"},{text:"<ul><ul><li>You can assign different data types to the same variable during the execution of your program.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Type Coercion</strong></li></ol>'},{text:"<ul><ul><li>JavaScript also performs type coercion, which is the automatic conversion of values between different types in certain situations.</li></ul></ul>"},{text:"<ul><ul><li>For example, JavaScript can convert a number to a string when performing string concatenation.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Checking Data Type</strong></li></ol>'},{text:"<ul><ul><li>You can use the <code>typeof</code> operator to check the data type of a value.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>The <code>instanceof</code> operator checks if an object is an instance of a specific class or constructor function.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Understanding variables and data types is essential for working with JavaScript effectively. By knowing how to declare variables and utilize the various data types, you can store and manipulate different kinds of values in your JavaScript code."}]},{secid:3,subtitle:"Operators and Expressions",paragraphs:[{text:"In JavaScript, operators are symbols that are used to perform operations on operands, which can be variables, values, or expressions. Operators can perform a variety of tasks such as arithmetic operations, logical operations, comparison operations, and more. Expressions, on the other hand, are combinations of operators, operands, and variables that evaluate to a single value."},{text:"<ol><li><strong>Assignment Operators</strong></li></ol>"},{text:"<ul><ul><li>The assignment operator (<code>=</code>) is used to assign a value to a variable.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_1",exampleid:"js_2_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Additional assignment operators include <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, and <code>%=</code>. These operators perform the corresponding operation and assign the result to the variable.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_2",exampleid:"js_2_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Arithmetic Operators</strong></li></ol>'},{text:"<ul>JavaScript supports standard arithmetic operators.</ul>"},{text:"<ul><ul><li>Addition (<code>+</code>), subtraction (<code>-</code>), multiplication (<code>*</code>), and division (<code>/</code>).</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_3",exampleid:"js_2_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Modulo (<code>%</code>), which returns the remainder of a division operation.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_4",exampleid:"js_2_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Increment (<code>++</code>) and decrement (<code>--</code>) operators for increasing or decreasing a value by 1.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_5",exampleid:"js_2_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Comparison Operators</strong></li></ol>'},{text:"<ul>Comparison operators are used to compare values and return a Boolean (true or false) result.</ul>"},{text:"<ul><ul><li>Equal to (<code>==</code> or <code>===</code>), not equal to (<code>!=</code> or <code>!==</code>).</li></ul></ul>"},{text:'<ul><ul><li>The "equal to" operator (<code>==</code>) and the "not equal to" operator (<code>!=</code>) compare the values of two operands, performing type coercion if necessary before making the comparison. Type coercion means that JavaScript will try to convert the operands to the same data type before making the comparison.</li></ul></ul>'},{text:'<ul><ul><li>The "strict equal to" operator (<code>===</code>) and the "strict not equal to" operator (<code>!==</code>) compare both the values and the types of the operands. It does not perform any type coercion, so for the "strict equal to" operator to return true, both the values and the data types must be the same.</li></ul></ul>'},{text:"",codeConfig:{codeid:"js_2_3_6",exampleid:"js_2_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Greater than (<code>></code>), less than (<code><</code>), greater than or equal to (<code>>=</code>), less than or equal to (<code><=</code>).</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_7",exampleid:"js_2_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Logical Operators</strong></li></ol>'},{text:"<ul>Logical operators are used to combine or manipulate Boolean values.</ul>"},{text:"<ul><ul><li>Logical AND (<code>&&</code>), which returns true if both operands are true.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_8",exampleid:"js_2_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Logical OR (<code>||</code>), which returns true if at least one operand is true.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_9",exampleid:"js_2_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Logical NOT (<code>!</code>), which negates a Boolean value.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_10",exampleid:"js_2_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Conditional (Ternary) Operator</strong></li></ol>'},{text:"<ul><ul><li>The conditional operator (<code>condition ? expr1 : expr2</code>) is a shorthand for an <code>if-else</code> statement.</li></ul></ul>"},{text:"<ul><ul><li>It evaluates the condition and returns <code>expr1</code> if the condition is true, or <code>expr2</code> if the condition is false.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_11",exampleid:"js_2_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="6"><li><strong>Grouping Operator</strong></li></ol>'},{text:"<ul><ul><li>The grouping operator (<code>()</code>) is used to group expressions and control the order of evaluation.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_12",exampleid:"js_2_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Bitwise Operators</strong></li></ol>'},{text:"<ul><ul><li>JavaScript also supports bitwise operators (<code>&</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code><<</code>, <code>>></code>, <code>>>></code>) for manipulating binary representations of numbers. These operators are mainly used in advanced scenarios like low-level programming or working with binary data.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_13",exampleid:"js_2_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Operators and expressions allow you to perform a wide range of operations and calculations in JavaScript. By understanding and utilizing these operators effectively, you can manipulate values, make decisions, and control the flow of your code."}]}]},{category:"js",chid:3,title:"Control Structures and Loops",sections:[{secid:1,subtitle:"Conditional Statements",paragraphs:[{text:"JavaScript conditional statements are a fundamental part of the language, allowing you to execute different code blocks based on certain conditions. These conditions are typically boolean expressions (that evaluate to true or false). The primary conditional statements in JavaScript are <code>if</code>, <code>else if</code>, <code>else</code>, and <code>switch</code>."},{text:"<ol><li><strong>The <code>if</code> Statement</strong></li></ol>"},{text:"<ul>The <code>if</code> statement is the simplest form of conditional statement. It executes a block of code if a specified condition is true.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_2",exampleid:"js_3_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>The <code>else</code> Statement</strong></li></ol>'},{text:"<ul>An <code>else</code> statement can be used to execute a block of code when the <code>if</code> condition is false.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_4",exampleid:"js_3_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>The <code>else if</code> Statement</strong></li></ol>'},{text:"<ul>For multiple conditions, <code>else if</code> can be used. It allows you to check several conditions, not just one.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_6",exampleid:"js_3_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="4"><li><strong>The <code>switch</code> Statement</strong></li></ol>'},{text:"<ul>The <code>switch</code> statement is used for multiple case checks. It's an alternative to multiple <code>if</code> statements.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_8",exampleid:"js_3_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"These conditional statements provide powerful ways to control the flow of your JavaScript program, allowing more dynamic and responsive coding based on different conditions."}]},{secid:2,subtitle:"Ternary, Optional Chaining, and Nullish Coalescing Operators",paragraphs:[{text:"JavaScript includes several operators that can greatly simplify and improve the readability of your code. Three such operators are the ternary operator, optional chaining operator, and nullish coalescing operator. Here's an explanation of each:"},{text:"<ol><li><strong>Ternary Operator (<code>condition ? exprIfTrue : exprIfFalse</code>)</strong></li></ol>"},{text:"<ul>The ternary operator is a condensed form of an <code>if-else</code> statement. It takes three operands: a condition to evaluate, an expression to return if the condition is true, and an expression to return if the condition is false.</ul>"},{text:"",codeConfig:{codeid:"js_3_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_2_2",exampleid:"js_3_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>Optional Chaining Operator (<code>?.</code>)</strong></li></ol>'},{text:"<ul>Optional chaining allows you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid. It returns undefined if the reference is nullish (null or undefined).</ul>"},{text:"",codeConfig:{codeid:"js_3_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_2_4",exampleid:"js_3_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>Nullish Coalescing Operator (<code>??</code>)</strong></li></ol>'},{text:"<ul>The nullish coalescing operator returns the right-hand operand when the left-hand operand is nullish, and the left-hand operand otherwise. It's a way to provide a default value.</ul>"},{text:"",codeConfig:{codeid:"js_3_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_2_6",exampleid:"js_3_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"In summary, these operators offer more concise and readable alternatives to traditional conditional logic and null checks, allowing for cleaner and more efficient JavaScript code."}]},{secid:3,subtitle:"Looping Constructs",paragraphs:[{text:"JavaScript loops are fundamental constructs that enable you to execute a block of code repeatedly under specified conditions. They are particularly useful when you want to iterate over arrays, objects, or simply repeat tasks a certain number of times. The main types of loops in JavaScript include <code>for</code>, <code>while</code>, <code>do-while</code>, and <code>for...in</code>/<code>for...of</code>."},{text:"<ol><li><strong>The <code>for</code> Loop</strong></li></ol>"},{text:"<ul>The <code>for</code> loop is often used when you know in advance how many times you need to execute a block of code.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul><code>initialization</code> is typically used to initialize a counter variable.</ul>"},{text:"<ul><code>condition</code> makes the loop running as long as this <code>condition</code> is true.</ul>"},{text:"<ul><code>increment</code> updates the counter variable on each iteration.</ul>"},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_2",exampleid:"js_3_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>The <code>while</code> Loop</strong></li></ol>'},{text:"<ul>The <code>while</code> loop is used when you want to repeat a block of code as long as a specified condition is true, but you don't know in advance how many times you'll need to iterate.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_4",exampleid:"js_3_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>The <code>do-while</code> Loop</strong></li></ol>'},{text:"<ul>The <code>do-while</code> loop is similar to the <code>while</code> loop, but it executes the block of code once before checking the condition, ensuring that the block is executed at least once.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_6",exampleid:"js_3_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="4"><li><strong>The <code>for...in</code> Loop</strong></li></ol>'},{text:"<ul>The <code>for...in</code> loop is used to iterate over the keys of an object. It is a great way to inspect each property in an object.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_8",exampleid:"js_3_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="5"><li><strong>The <code>for...of</code> Loop</strong></li></ol>'},{text:"<ul>The <code>for...of</code> loop is used to iterate over iterable objects like arrays, strings, NodeLists, and more, directly accessing the value of each item.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_10",exampleid:"js_3_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"Using these loops effectively can significantly simplify your code, making it more readable and efficient, especially when dealing with repetitive tasks or iterating over data collections."}]}]},{category:"js",chid:4,title:"Functions and Their Usage",sections:[{secid:1,subtitle:"Defining and Invoking Functions",paragraphs:[{text:"A JavaScript function is a block of code that performs a specific task or calculation. It's a fundamental building block of JavaScript programming, allowing you to encapsulate reusable code. Functions can accept inputs (parameters) and optionally return a value.  Functions enhance code organization, reusability, and readability in JavaScript programs."},{text:"<ol><li><strong>Defining Functions</strong></li></ol>"},{text:"<ul>There are several ways to define functions in JavaScript:</ul>"},{text:"<ul><ul><li><strong>Function Declaration</strong></li></ul></ul>"},{text:"<ul><ul>A function declaration is a classic way to define a function. The <code>function</code> keyword is used, followed by the name of the function, a list of parameters enclosed in parentheses, and the function body enclosed in curly braces.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Function Expression</strong></li></ul></ul>"},{text:"<ul><ul>A function expression is similar to a function declaration, but the function is assigned to a variable. Function expressions can be anonymous (without a name).</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Arrow Functions (ES6)</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions are a concise way to write functions in ES6 and later. They are especially useful for inline functions and callbacks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul>Arrow functions with a single expression can omit the curly braces and the <code>return</code> keyword.</ul></ul>"},{text:"<ul><ul><li><strong>Functions Using Rest Parameters</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript functions can be defined using rest parameters. Rest parameters allow you to represent an indefinite number of arguments as an array. This is useful when you don't know in advance how many arguments will be passed to the function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Functions Using Destructing Objects or Arrays as Paramenters</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript functions can be defined using destructuring objects or arrays as parameters to enhance their flexibility and readability. The approach allows unpacking values from arrays or properties from objects, into distinct variables.</ul></ul>"},{text:"<ul><ul>For an object:</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul>For an array:</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Invoking (Calling) Functions</strong></li></ol>'},{text:"<ul>Once defined, a function can be executed (called or invoked) by using its name followed by parameters inside parentheses.</ul>"},{text:"<ul><ul><li><strong>Invoking General Functions</strong></li></ul></ul>"},{text:"<ul><ul>Passes arguments that correspond to the function's parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_7",exampleid:"js_4_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invoking a Function Using Rest Parameters</strong></li></ul></ul>"},{text:"<ul><ul>Passes an indefinite number of arguments as an array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_8",exampleid:"js_4_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invoking a Function Using a Destructing Object as Paramenters</strong></li></ul></ul>"},{text:"<ul><ul>Passes an object that matches the structure expected by the function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_9",exampleid:"js_4_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invoking a Function Using a Destructing Array as Paramenters</strong></li></ul></ul>"},{text:"<ul><ul>Passes an array with elements corresponding to the expected parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_10",exampleid:"js_4_1_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases of Functions</strong></li></ol>'},{text:"<ul>Functions are used for various purposes in JavaScript (Some use cases will be discussed in later chapters):</ul>"},{text:"<ul><ul><li><strong>Modularizing Code</strong></li></ul></ul>"},{text:"<ul><ul>Breaking a complex problem into smaller, reusable blocks.</ul></ul>"},{text:"<ul><ul><li><strong>Event Handling</strong></li></ul></ul>"},{text:"<ul><ul>Assigning functions to respond to events like clicks, key presses, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Callbacks</strong></li></ul></ul>"},{text:"<ul><ul>Passing a function as an argument to another function to be executed later.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_11",exampleid:"js_4_1_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Immediately Invoked Function Expressions (IIFE)</strong></li></ul></ul>"},{text:"<ul><ul>Executing a function as soon as it is defined.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_12",exampleid:"js_4_1_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Asynchronous Operations</strong></li></ul></ul>"},{text:"<ul><ul>In modern JavaScript development, functions are used in asynchronous operations like Promises and async/await.</ul></ul>"},{text:"Understanding how to define and invoke functions is crucial in JavaScript as it allows you to write more reusable, maintainable, and organized code."}]},{secid:2,subtitle:"Scope and Closure",paragraphs:[{text:"In JavaScript, scope and closure are two fundamental concepts that deal with the visibility and lifetime of variables."},{text:"<ol><li><strong>Scope</strong></li></ol>"},{text:"<ul>Scope determines where variables and functions can be accessed in your code. There are two main types of scope in JavaScript:</ul>"},{text:"<ul><ul><li><strong>Global Scope</strong></li></ul></ul>"},{text:"<ul><ul>A variable declared outside of any function or block becomes a global variable, accessible from anywhere in the code.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_1",exampleid:"js_4_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Function Scope</strong></li></ul></ul>"},{text:"<ul><ul>Variables declared within a function using <code>var</code> are local to that function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_2",exampleid:"js_4_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Block Scope (ES6)</strong></li></ul></ul>"},{text:"<ul><ul>With ES6, <code>let</code> and <code>const</code> introduced block-level scope, which limits the variable to the block (loops, conditionals) in which it is declared.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_3",exampleid:"js_4_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Closure</strong></li></ol>'},{text:"<ul>A JavaScript closure is a feature where an inner function has access to the outer (enclosing) function's variables and parameters. This concept is crucial in JavaScript and enables powerful programming patterns.</ul>"},{text:"<ul><ul><li><strong>Access to Outer Variables</strong></li></ul></ul>"},{text:"<ul><ul>The inner function can access variables defined in its own scope, variables from the outer function's scope, and global variables.</ul></ul>"},{text:"<ul><ul><li><strong>Preserving Variables</strong></li></ul></ul>"},{text:"<ul><ul>One powerful aspect of closures is their ability to preserve the state of outer function variables even after the outer function has returned. This is because functions in JavaScript maintain a reference to the environments in which they were created.</ul></ul>"},{text:"<ul><ul><li><strong>Use Cases</strong></li></ul></ul>"},{text:"<ul><ul>Closures are widely used in JavaScript for things like data encapsulation and privacy, creating factory functions, and in callbacks and event handlers where they preserve the state of the environment for asynchronous execution.</ul></ul>"},{text:"<ul><ul><li><strong>Example of Closure</strong></li></ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_4",exampleid:"js_4_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Understanding scope and closure is crucial for effective JavaScript programming, as it affects variable access, memory management, and function behavior."}]},{secid:3,subtitle:"`this` Keyword and `arguments` Object",paragraphs:[{text:"In JavaScript, the <code>this</code> keyword and the <code>arguments</code> object are two important features associated with functions. Understanding their behavior and usage is crucial for writing effective JavaScript code."},{text:"<ol><li><strong>The <code>this</code> Keyword in JavaScript Functions</strong></li></ol>"},{text:"<ul>The <code>this</code> keyword in a JavaScript function refers to the object it belongs to. It has different values depending on where and how the function is called.</ul>"},{text:"<ul><ul><li><strong>Method Call (Object Context)</strong></li></ul></ul>"},{text:"<ul><ul>When a function is called as a method of an object, <code>this</code> refers to the object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_1",exampleid:"js_4_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Simple Function Call</strong></li></ul></ul>"},{text:"<ul><ul>In a regular function call, <code>this</code> refers to the global object (<code>window</code> in a browser, <code>global</code> in Node.js). In strict mode, this will be undefined.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_2",exampleid:"js_4_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Constructor Call</strong></li></ul></ul>"},{text:"<ul><ul>When a function is used as a constructor (with the <code>new</code> keyword), <code>this</code> refers to the newly created instance.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_3",exampleid:"js_4_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Explicit Binding</strong></li></ul></ul>"},{text:"<ul><ul>Using <code>call</code>, <code>apply</code>, or <code>bind</code> methods, you can set the value of <code>this</code> explicitly.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_4",exampleid:"js_4_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Arrow Functions</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions do not have their own <code>this</code> but inherit it from the parent scope. This is particularly useful in callbacks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_5",exampleid:"js_4_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>The <code>arguments</code> Object</strong></li></ol>'},{text:"<ul>The <code>arguments</code> object is an array-like object accessible inside functions that contains the values of the arguments passed to that function.</ul>"},{text:"<ul><ul><li><strong>Accessing Function <code>arguments</code> Object</strong></li></ul></ul>"},{text:"<ul><ul>The <code>arguments</code> object allows you to work with function parameters more flexibly, especially when you don't know the exact number of arguments in advance.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_6",exampleid:"js_4_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Non-Arrow Functions Only</strong></li></ul></ul>"},{text:"<ul><ul>The <code>arguments</code> object is available only in standard function definitions, not in arrow functions. Arrow functions do not have their own <code>arguments</code> object.</ul></ul>"},{text:"Understanding these concepts is vital for mastering function behavior and scope in JavaScript, especially in more complex applications involving callbacks, event handlers, and object-oriented programming."}]},{secid:4,subtitle:"`call`, `apply`, and `bind` Methods",paragraphs:[{text:"In JavaScript, <code>call</code>, <code>apply</code>, and <code>bind</code> are methods used to control the invocation of functions. They are part of the function prototype, hence available to all functions. These methods are especially useful for setting the <code>this</code> value explicitly, enabling more flexible function invocation."},{text:"<ol><li><strong>The <code>call</code> Method</strong></li></ol>"},{text:"<ul>The <code>call</code> method calls a function with a given <code>this</code> value and individual arguments.</ul>"},{text:"<ul><ul><li><strong>Setting <code>this</code> Value</strong></li></ul></ul>"},{text:"<ul><ul>You can specify the value of <code>this</code> inside the called function.</ul></ul>"},{text:"<ul><ul><li><strong>Passing Arguments</strong></li></ul></ul>"},{text:"<ul><ul>Arguments are passed individually, not as an array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_4_1",exampleid:"js_4_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>The <code>apply</code> Method</strong></li></ol>'},{text:"<ul>The <code>apply</code> method is similar to <code>call</code>, but arguments are passed as an array, making it ideal for situations where the number of arguments is not known in advance.</ul>"},{text:"<ul><ul><li><strong>Setting <code>this</code> Value</strong></li></ul></ul>"},{text:"<ul><ul>Specify the <code>this</code> context.</ul></ul>"},{text:"<ul><ul><li><strong>Passing Arguments as an Array</strong></li></ul></ul>"},{text:"<ul><ul>Useful for variable-length argument lists.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_4_2",exampleid:"js_4_4_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>The <code>bind</code> Method</strong></li></ol>'},{text:"<ul>The <code>bind</code> method creates a new function with a specified <code>this</code> value and any number of preset leading arguments.</ul>"},{text:"<ul><ul><li><strong>Creating a Bound Function</strong></li></ul></ul>"},{text:"<ul><ul>Allows you to create a new function with <code>this</code> set to a specific object.</ul></ul>"},{text:"<ul><ul><li><strong>Partial Application</strong></li></ul></ul>"},{text:"<ul><ul>You can preset some arguments, which is known as partial function application.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_4_3",exampleid:"js_4_4_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"These methods are particularly useful in scenarios where you need to manipulate the <code>this</code> context, such as in event handling, callback functions, and object-oriented programming in JavaScript. Understanding and using these methods can significantly enhance the flexibility and reusability of your code."}]},{secid:5,subtitle:"Arrow Functions",paragraphs:[{text:"Arrow functions, introduced in ES6 (ECMAScript 2015), provide a more concise syntax for writing function expressions in JavaScript. They are particularly useful for short functions and where you need to preserve the lexical <code>this</code> context."},{text:"<ol><li><strong>Basic Syntax of Arrow Functions</strong></li></ol>"},{text:"<ul><ul><li><strong>General Definition</strong></li></ul></ul>"},{text:"<ul><ul>An arrow function is an anonymous function expression using <code>=></code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>No Parameters</strong></li></ul></ul>"},{text:"<ul><ul>If the function has no parameters, you use an empty pair of parentheses.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_2",exampleid:"js_4_5_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Single Parameter</strong></li></ul></ul>"},{text:"<ul><ul>If there is only one parameter, parentheses are optional.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_3",exampleid:"js_4_5_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Multiple Parameters</strong></li></ul></ul>"},{text:"<ul><ul>Use parentheses for multiple parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_4",exampleid:"js_4_5_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Function Body</strong></li></ul></ul>"},{text:"<ul><ul>If the function body contains just a single statement, you can omit the curly braces <code>{}</code> and the <code>return</code> statement.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_5",exampleid:"js_4_5_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>For a more complex function body, use curly braces and an explicit <code>return</code> statement.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_6",exampleid:"js_4_5_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Advanced Usage and Characteristics</strong></li></ol>'},{text:"<ul><ul><li><strong>No <code>this</code> Binding</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions do not have their own <code>this</code> context. Instead, they inherit <code>this</code> from the parent scope at the time of definition. This is particularly useful in callbacks and methods where you want to access the parent context's <code>this</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_7",exampleid:"js_4_5_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>No <code>arguments</code> Binding</strong></li></ul></ul>"},{text:"<ul><ul>Unlike regular functions, arrow functions do not have the <code>arguments</code> object. To access function's <code>arguments</code>, you must explicitly define parameters or use the rest parameters syntax.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_8",exampleid:"js_4_5_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>No Constructor</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions cannot be used as constructors and will throw an error if used with the <code>new</code> keyword.</ul></ul>"},{text:"<ul><ul><li><strong>Implicit Returns</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions allow for implicit returns when there is no block <code>{}</code>. This makes them very concise for single-expression functions.</ul></ul>"},{text:"<ul><ul><li><strong>Use Cases</strong></li></ul></ul>"},{text:"<ul><ul>Due to their concise syntax and <code>this</code> behavior, arrow functions are often used for inline functions and callbacks, array methods (like <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>), and methods in object literals (keeping in mind the lexical <code>this</code>).</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_9",exampleid:"js_4_5_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Understanding when and how to use arrow functions is crucial for writing concise and readable JavaScript code, especially in scenarios involving callbacks and array transformations."}]}]},{category:"js",chid:5,title:"Working with Data Structures",sections:[{secid:1,subtitle:"Strings, Their Methods, and Manipulation",paragraphs:[{text:"JavaScript strings are a fundamental data type used to represent and manipulate text. Strings can be represented as either string primitives or string objects.  Here's an overview of strings, their methods, and manipulation:"},{text:"<ol><li><strong>Creating Strings</strong></li></ol>"},{text:"<ul><ul><li><strong>String Primitives</strong></li></ul></ul>"},{text:"<ul><ul>String primitives are the most common way to work with text in JavaScript. They are created by simply assigning a string literal to a variable. String literals can be enclosed in single quotes (<code>'</code>), double quotes (<code>\"</code>), or backticks (<code>`</code>) for template literals.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>String Objects</strong></li></ul></ul>"},{text:"<ul><ul>String objects in JavaScript are created using the <code>String</code> constructor with the <code>new</code> keyword. This is less common in everyday JavaScript programming because string primitives offer almost all the functionality needed for string manipulation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Key Differences</strong></li></ul></ul>"},{text:"<ul><ul>A string primitive is of type <code>string</code>, whereas a string object is of type <code>object</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_3",exampleid:"js_5_1_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>String primitives are generally more efficient because they do not create a new object.</ul></ul>"},{text:"<ul><ul>Most string operations can be performed on both types, but it's important to know that they are not exactly the same. For example, comparing two string objects using <code>==</code> or <code>===</code> will compare object references, not the string values.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_4",exampleid:"js_5_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Basic Properties</strong></li></ol>'},{text:"<ul><ul><li><strong><code>length</code></strong></li></ul></ul>"},{text:"<ul><ul>Returns the length of the string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_5",exampleid:"js_5_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Common String Methods</strong></li></ol>'},{text:"<ul><ul><li><strong><code>charAt(index)</code></strong></li></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_6",exampleid:"js_5_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Returns the character at the specified index.</ul></ul>"},{text:"<ul><ul><li><strong><code>concat(string2, string3, ..., stringN)</code></strong></li></ul></ul>"},{text:"<ul><ul>Concatenates two or more strings.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_7",exampleid:"js_5_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>includes(searchString, position)</code></strong></li></ul></ul>"},{text:"<ul><ul>Checks if the string contains the specified substring.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_8",exampleid:"js_5_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>indexOf(searchValue, fromIndex)</code></strong></li></ul></ul>"},{text:"<ul><ul>Returns the index of the first occurrence of the specified value.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_9",exampleid:"js_5_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>slice(startIndex, endIndex)</code></strong></li></ul></ul>"},{text:"<ul><ul>Extracts a section of a string and returns a new string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_10",exampleid:"js_5_1_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>split(separator, limit)</code></strong></li></ul></ul>"},{text:"<ul><ul>Splits a string into an array of substrings.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_11",exampleid:"js_5_1_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>toLowerCase()</code></strong></li></ul></ul>"},{text:"<ul><ul>Converts the string to lower case.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_12",exampleid:"js_5_1_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>toUpperCase()</code></strong></li></ul></ul>"},{text:"<ul><ul>Converts the string to upper case.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_13",exampleid:"js_5_1_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>trim()</code></strong></li></ul></ul>"},{text:"<ul><ul>Removes whitespace from both ends of a string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_14",exampleid:"js_5_1_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>String Concatenation with Operators and Interpolation</strong></li></ol>'},{text:"<ul><ul><li><strong><code>+</code></strong></li></ul></ul>"},{text:"<ul><ul>The <code>+</code> operator is used to concatenate two strings. When used between strings, it returns a new string that is the combination of the operands.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_15",exampleid:"js_5_1_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>+=</code></strong></li></ul></ul>"},{text:"<ul><ul>The <code>+=</code> operator is used to append a string to an existing string variable. It adds the right operand to the left operand and assigns the result to the left operand. This is a shorthand for <code>string1 = string1 + string2</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_16",exampleid:"js_5_1_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Interpolation</strong></li></ul></ul>"},{text:"<ul><ul>In JavaScript, template literals (using backticks) allow for string interpolation, which is a way to embed expressions within strings, such as the inclusion of variables, expressions, and even multi-line strings without the need for concatenation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_17",exampleid:"js_5_1_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Character Access of Strings</strong></li></ol>'},{text:"<ul><ul><li><strong>Using <code>for...of</code> Loop</strong></li></ul></ul>"},{text:"<ul><ul>The <code>for...of</code> loop is a modern and efficient way to iterate over iterable objects like strings. It allows you to directly access each character in the string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_18",exampleid:"js_5_1_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using Destructuring</strong></li></ul></ul>"},{text:"<ul><ul>Destructuring in JavaScript allows you to unpack values from arrays or properties from objects. Since strings are iterable, they can be destructured similar to arrays, enabling access to individual characters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_19",exampleid:"js_5_1_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Destructuring with Rest Operator</strong></li></ul></ul>"},{text:"<ul><ul>In JavaScript, destructuring along with the rest operator (<code>...</code>) can be used to break a string into parts, assigning some of its characters to variables and collecting the rest of them into an array. This is particularly useful when you want to separate a string into individual characters and also keep track of the remainder of the string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_20",exampleid:"js_5_1_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, JavaScript strings are a versatile and essential data type in web development, offering a wide range of functionalities for text manipulation and handling. Their ease of use and extensive method library make them a powerful tool in any JavaScript developer's toolkit."}]},{secid:2,subtitle:"Arrays, their Methods, and Manipulation",paragraphs:[{text:"JavaScript arrays are a versatile way to store and manage collections of data in JavaScript. They are an essential feature of the language, providing a flexible and efficient way to work with groups of values. Here are some of important features of JavaScript arrays."},{text:"<ol><li><strong>Creating Arrays</strong></li></ol>"},{text:"<ul>Arrays in JavaScript can be created using array literals or the <code>Array</code> constructor.</ul>"},{text:"<ul><ul><li><strong>Array Literals</strong></li></ul></ul>"},{text:"<ul><ul>The array literal is the simplest and most common way to create an array in JavaScript. It involves enclosing a comma-separated list of elements within square brackets (<code>[]</code>). This method is straightforward and is usually preferred for its readability and simplicity.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_1",exampleid:"js_5_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>Array</code> Constructor</strong></li></ul></ul>"},{text:"<ul><ul>The <code>Array</code> constructor is a more formal and versatile way of creating arrays. It can be used in a few different ways:</ul></ul>"},{text:"<ul><ul>By creating an array with specified elements, you can pass a list of elements to the <code>Array</code> constructor, and it will create an array containing those elements.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_2",exampleid:"js_5_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>To create an array with a specified length, you can pass a single numeric value to the <code>Array</code> constructor, it creates an array with that length. This array is filled with empty slots (technically undefined values).</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_3",exampleid:"js_5_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Mixed Data Types</strong></li></ul></ul>"},{text:"<ul><ul>Arrays can store elements of different data types, including numbers, strings, objects, and even other arrays.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_4",exampleid:"js_5_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Multidimensional Arrays</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript supports multidimensional arrays (arrays of arrays).</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_5",exampleid:"js_5_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Accessing Elements of an Array</strong></li></ol>'},{text:"<ul>Accessing elements is essential for retrieving and manipulating data stored in an array.</ul>"},{text:"<ul><ul><li><strong>Array Length</strong></li></ul></ul>"},{text:"<ul><ul>The <code>length</code> property provides the number of elements in an array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_6",exampleid:"js_5_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using Indices</strong></li></ul></ul>"},{text:"<ul><ul>Elements in an array are stored at numeric indices, starting from 0. You can access them using square brackets <code>[]</code> with the index.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_7",exampleid:"js_5_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Iterating Over Arrays</strong></li></ul></ul>"},{text:"<ul><ul>Arrays can be iterated using loops like <code>for</code>, <code>for...of</code>, and <code>forEach()</code> method.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_8",exampleid:"js_5_2_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using Destructuring</strong></li></ul></ul>"},{text:"<ul><ul>Destructuring allows you to unpack values from an array directly into variables. This makes your code more readable and concise, especially when you need to access specific elements in an array.</ul></ul>"},{text:"<ul><ul>You can assign array elements to variables in a single line.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_9",exampleid:"js_5_2_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>If you're only interested in certain elements, you can skip over elements by leaving blanks in the destructuring assignment.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_10",exampleid:"js_5_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>If you want to capture the rest of the elements in an array, you can use the rest parameter (<code>...</code>).</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_11",exampleid:"js_5_2_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Destructuring also allows you to set default values for variables, in case the array is shorter than expected.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_12",exampleid:"js_5_2_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Manipulating Arrays</strong></li></ol>'},{text:"<ul>JavaScript provides a wide range of methods for manipulating arrays, making it easy to perform various operations such as adding, removing, transforming, and reordering elements.</ul>"},{text:"<ul><ul><li><strong><code>push()</code></strong></li></ul></ul>"},{text:"<ul><ul>Adds one or more elements to the end of an array and returns the new length of the array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_13",exampleid:"js_5_2_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>pop()</code></strong></li></ul></ul>"},{text:"<ul><ul>Removes the last element from an array and returns that element.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_14",exampleid:"js_5_2_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>unshift()</code></strong></li></ul></ul>"},{text:"<ul><ul>Adds one or more elements to the beginning of an array and returns the new length.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_15",exampleid:"js_5_2_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>shift()</code></strong></li></ul></ul>"},{text:"<ul><ul>Removes the first element from an array and returns that element.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_16",exampleid:"js_5_2_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>map()</code></strong></li></ul></ul>"},{text:"<ul><ul>Creates a new array with the results of calling a provided function on every element in the calling array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_17",exampleid:"js_5_2_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>filter()</code></strong></li></ul></ul>"},{text:"<ul><ul>Creates a new array with all elements that pass the test implemented by the provided function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_18",exampleid:"js_5_2_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>reduce()</code></strong></li></ul></ul>"},{text:"<ul><ul>Executes a reducer function on each element of the array, resulting in a single output value.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_19",exampleid:"js_5_2_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>find()</code></strong></li></ul></ul>"},{text:"<ul><ul>Returns the value of the first element in the provided array that satisfies the provided testing function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_20",exampleid:"js_5_2_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>indexOf()</code></strong></li></ul></ul>"},{text:"<ul><ul>Returns the first index at which a given element can be found in the array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_21",exampleid:"js_5_2_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>reverse()</code></strong></li></ul></ul>"},{text:"<ul><ul>Reverses the order of the elements of an array in place.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_22",exampleid:"js_5_2_22_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>sort()</code></strong></li></ul></ul>"},{text:"<ul><ul>Sorts the elements of an array in place and returns the array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_23",exampleid:"js_5_2_23_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>You can use a compare function that references specific properties to customize sorting behaviors.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_24",exampleid:"js_5_2_24_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>slice()</code></strong></li></ul></ul>"},{text:"<ul><ul>Returns a shallow copy of a portion of an array into a new array object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_25",exampleid:"js_5_2_25_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>splice()</code></strong></li></ul></ul>"},{text:"<ul><ul>Changes the contents of an array by removing or replacing existing elements and/or adding new elements.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_26",exampleid:"js_5_2_26_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>join()</code></strong></li></ul></ul>"},{text:"<ul><ul>Joins all elements of an array into a string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_27",exampleid:"js_5_2_27_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>concat()</code></strong></li></ul></ul>"},{text:"<ul><ul>Merges two or more arrays into one. This method does not change the existing arrays but instead returns a new array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_28",exampleid:"js_5_2_28_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Spread Operator <code>...</code></strong></li></ul></ul>"},{text:"<ul><ul>The spread operator <code>...</code> is a modern and versatile feature of JavaScript that can be used to expand elements of an iterable (such as an array) into individual elements. This is particularly useful for concatenating arrays.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_29",exampleid:"js_5_2_29_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"JavaScript arrays are a powerful tool for developers, capable of handling a wide variety of tasks in data manipulation and storage. These features, along with their ease of use, make arrays an indispensable part of JavaScript programming."}]},{secid:3,subtitle:"Objects and Properties",paragraphs:[{text:"JavaScript, as a flexible and dynamic language, heavily relies on objects as one of its core data types. Objects in JavaScript are versatile constructs that can be used to represent a wide range of real-world entities and data structures. Understanding JavaScript objects is fundamental for anyone looking to master the language."},{text:"<ol><li><strong>Basic Features</strong></li></ol>"},{text:"<ul><ul><li><strong>Key-Value Pairs</strong></li></ul></ul>"},{text:"<ul><ul>At their core, JavaScript objects are collections of key-value pairs. The keys (also known as properties) are usually strings or symbols, and the values can be any data type, including numbers, strings, functions, and even other objects.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_1",exampleid:"js_5_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Dynamic Nature</strong></li></ul></ul>"},{text:"<ul><ul>Objects in JavaScript are dynamic. This means you can add, modify, or delete properties after the object has been created.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_2",exampleid:"js_5_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Getters and Setters</strong></li></ul></ul>"},{text:"<ul><ul>Objects can have getter and setter functions. These are special methods that provide a way to get and set the values of properties indirectly.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_3",exampleid:"js_5_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Property Shorthands</strong></li></ul></ul>"},{text:"<ul><ul>Property shorthands allow you to quickly create objects when the property names are the same as the variable names that hold their values.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_4",exampleid:"js_5_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Computed Property Names</strong></li></ul></ul>"},{text:"<ul><ul>Computed property names allow you to set an object's property name using an expression, providing more dynamic object creation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_5",exampleid:"js_5_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Methods</strong></li></ul></ul>"},{text:'<ul><ul>Methods are functions that are stored as object properties. This allows objects to have "actions" they can perform.</ul></ul>'},{text:"",codeConfig:{codeid:"js_5_3_6",exampleid:"js_5_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>this</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Inside a method, <code>this</code> refers to the object the method belongs to. This provides a way to access other properties of the object within methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_7",exampleid:"js_5_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Creating Objects</strong></li></ol>'},{text:"<ul>There are several ways to create objects in JavaScript:</ul>"},{text:"<ul><ul><li><strong>Object Literals</strong></li></ul></ul>"},{text:"<ul><ul>The simplest and most common way to create objects.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_8",exampleid:"js_5_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the <code>new Object()</code> Syntax</strong></li></ul></ul>"},{text:"<ul><ul>This is more verbose and less common.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_9",exampleid:"js_5_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Constructor Functions</strong></li></ul></ul>"},{text:"<ul><ul>Useful for creating multiple objects with the same structure.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_10",exampleid:"js_5_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the <code>Object.create()</code> Method</strong></li></ul></ul>"},{text:"<ul><ul>This method can be used to create a new object with the specified prototype object and properties.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_11",exampleid:"js_5_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Class Syntax (ES6 and later)</strong></li></ul></ul>"},{text:"<ul><ul>This is a more modern approach using classes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_12",exampleid:"js_5_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Accessing Object Keys and Properties</strong></li></ol>'},{text:"<ul>Once you have created an object, you can access its keys and properties in several ways:</ul>"},{text:"<ul><ul><li><strong>Dot Notation</strong></li></ul></ul>"},{text:"<ul><ul>The most common way to access properties.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_13",exampleid:"js_5_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Bracket Notation</strong></li></ul></ul>"},{text:"<ul><ul>Useful when the property name is dynamic or not a valid identifier.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_14",exampleid:"js_5_3_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Object Destructuring</strong></li></ul></ul>"},{text:"<ul><ul>Destructuring allows unpacking properties from objects into distinct variables.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_15",exampleid:"js_5_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>for...in</code> Loop</strong></li></ul></ul>"},{text:"<ul><ul>Iterates over all enumerable properties of an object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_16",exampleid:"js_5_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>Object.keys()</code> Method</strong></li></ul></ul>"},{text:"<ul><ul>Gets an array of all the property names (keys) of an object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_17",exampleid:"js_5_3_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>Object.values()</code> Method (ES8 and later)</strong></li></ul></ul>"},{text:"<ul><ul>Gets an array of all the values of an object's own enumerable properties.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_18",exampleid:"js_5_3_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>Object.entries()</code> Method (ES8 and later)</strong></li></ul></ul>"},{text:"<ul><ul>Gets an array of key-value pairs.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_19",exampleid:"js_5_3_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Property Attributes and Descriptors</strong></li></ol>'},{text:"<ul>Property attributes and descriptors in JavaScript provide a detailed level of control over the properties of objects. These attributes define characteristics of the properties, such as whether they can be written to, enumerated, or configured.</ul>"},{text:"<ul><ul><li><strong>Key Property Attributes</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong><code>value</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The value associated with the property. This can be any valid JavaScript value (number, object, function, etc.).</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong><code>writable</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>A Boolean indicating whether the property's value can be changed. If false, the property is read-only.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong><code>enumerable</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>A Boolean indicating whether the property is enumerable. If true, the property shows up in <code>for...in</code> loops and methods like <code>Object.keys()</code>.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong><code>configurable</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>A Boolean indicating if the property descriptor can be changed and if the property can be deleted from the object.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Using <code>Object.defineProperty()</code></strong></li></ul></ul>"},{text:"<ul><ul>The <code>Object.defineProperty()</code> method is used to define a new property directly on an object or modify an existing property on an object and return the object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_20",exampleid:"js_5_3_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using <code>Object.defineProperties()</code></strong></li></ul></ul>"},{text:"<ul><ul>To define multiple properties at once, you can use <code>Object.defineProperties()</code>. This method allows setting multiple property descriptors.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_21",exampleid:"js_5_3_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Accessing Property Descriptors</strong></li></ul></ul>"},{text:"<ul><ul>You can use <code>Object.getOwnPropertyDescriptor()</code> to get the descriptor for a property of an object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_22",exampleid:"js_5_3_22_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Copying Objects</strong></li></ol>'},{text:"<ul>Copying objects in JavaScript requires understanding the difference between shallow and deep copying.</ul>"},{text:"<ul><ul><li><strong>Shallow Copy</strong></li></ul></ul>"},{text:"<ul><ul>A shallow copy of an object copies the top-level properties, but nested objects or arrays are still referenced. This means changes to nested objects in the copied object will affect the original object, and vice versa.</ul></ul>"},{text:"<ul><ul>Using Spread Syntax</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_23",exampleid:"js_5_3_23_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Using <code>Object.assign()</code></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_24",exampleid:"js_5_3_24_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Deep Copy</strong></li></ul></ul>"},{text:"<ul><ul>A deep copy creates a new object and recursively copies every property of the original object, resulting in a completely independent object.</ul></ul>"},{text:"<ul><ul>Using <code>JSON.stringify()</code> and <code>JSON.parse()</code></ul></ul>"},{text:"<ul><ul>This method is a simple way to deep copy objects that contain only JSON-serializable values. However, it does not work with functions, dates, or other non-serializable values.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_25",exampleid:"js_5_3_25_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Using the Third-Party Libraries</ul></ul>"},{text:"<ul><ul>Some third-party libraries, such as Lodash, provide deep copy features for JavaScript objects.</ul></ul>"},{text:"JavaScript objects are a backbone of the language, providing a flexible and powerful way to structure and manipulate data. They combine data and functionality, are dynamically modifiable, and support inheritance, making them suitable for a wide range of programming paradigms and applications in JavaScript. Whether you're building simple scripts or complex applications, a thorough understanding of JavaScript objects is essential."}]},{secid:4,subtitle:"Maps and Sets",paragraphs:[{text:"JavaScript <code>Map</code>, <code>Set</code>, <code>WeakMap</code>, and <code>WeakSet</code> are data structures introduced in ES6 (ECMAScript 2015) that are used to store collections of data. <code>Map</code> and <code>Set</code> are suitable for scenarios where you need to store key-value pairs and unique values, respectively, with any data type. <code>WeakMap</code> and <code>WeakSet</code> are useful for memory-efficient storage, as they allow for the garbage collection of unused objects."},{text:"<ol><li><strong><code>Map</code></strong></li></ol>"},{text:"<ul>A <code>Map</code> in JavaScript is a collection of key-value pairs where both the keys and values can be of any type. This is a significant improvement over regular objects because in objects, the keys are always strings or symbols.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Key-Value Storage</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stores elements as key-value pairs.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Any Data Type as Key</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Allows keys of any data type (not limited to strings or symbols).</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Ordered</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Iterates elements in the order of their insertion.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Size Property</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can easily get the size of the map using the <code>size</code> property.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a <code>Map</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To create a <code>Map</code>, you simply initialize it using the <code>new</code> keyword. This creates an empty <code>Map</code>.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can add elements to a <code>Map</code> using the <code>set</code> method. This method takes two arguments: the key and the value. You can add as many key-value pairs as needed.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Getting the Size</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>size</code> property of a JavaScript <code>Map</code> object returns the number of key/value pairs in the <code>Map</code>.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_2a",exampleid:"js_5_4_2a_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Accessing Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To access the value associated with a specific key, use the <code>get</code> method with the key as its argument.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_3",exampleid:"js_5_4_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>If you try to access a value with a key that doesn't exist in the map, it will return undefined.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Iterating over a <code>Map</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>There are several ways to iterate over a <code>Map</code>. Here are a few common methods:</ul></ul></ul>"},{text:"<ul><ul><ul>Using <code>forEach()</code>:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_4",exampleid:"js_5_4_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Using <code>for...of</code> loop with <code>entries()</code>:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_5",exampleid:"js_5_4_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Iterating over keys or values only:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_6",exampleid:"js_5_4_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:'<ol start="2"><li><strong><code>Set</code></strong></li></ol>'},{text:"<ul>A <code>Set</code> in JavaScript is a collection of unique values. Each value can only occur once in a <code>Set</code>, which makes it perfect for creating collections of non-repetitive elements.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Unique Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stores only unique elements.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Any Data Type</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Allows elements of any data type.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>No Key-Value Pairs</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Unlike maps, sets only store values, not key-value pairs.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>No Index-Based Access</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Elements are not accessed by their position.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Size Property</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To get the size of a <code>Set</code>, use the <code>size</code> property.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a <code>Set</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To create a <code>Set</code>, you use the <code>new</code> keyword to initialize it. This will create an empty <code>Set</code>.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can add elements to a <code>Set</code> using the <code>add</code> method. Each element in a <code>Set</code> must be unique; duplicate values will be ignored.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Checking for a Value</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To check if a value exists in a <code>Set</code>, use the <code>has</code> method. This method returns true if the value is present in the <code>Set</code>, and false otherwise.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_9",exampleid:"js_5_4_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Removing Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To remove an element from a <code>Set</code>, use the <code>delete</code> method. This method removes the specified element.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_10",exampleid:"js_5_4_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Iterating over a <code>Set</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>There are several ways to iterate over the elements of a <code>Set</code>:</ul></ul></ul>"},{text:"<ul><ul><ul>Using <code>forEach</code> method:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_11",exampleid:"js_5_4_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Using <code>for...of</code> loop:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_12",exampleid:"js_5_4_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Getting the Size</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can find out the number of elements in a <code>Set</code> using the <code>size</code> property.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_13",exampleid:"js_5_4_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:'<ol start="3"><li><strong><code>WeakMap</code></strong></li></ol>'},{text:"<ul>A <code>WeakMap</code> is similar to a <code>Map</code>, but with a few key differences. The keys of a WeakMap are objects and non-registered symbols (created by calling the <code>Symbol()</code> constructor), and they are weakly referenced. This means that if there is no other reference to the object or symbol, it can be garbage-collected. This behavior is useful for managing memory in large applications.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Object or Non-registered Symbol Keys</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Only objects or non-registered symbols can be keys.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Weak References</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Keys are weakly referenced.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Non-Enumerable</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Keys and values are not enumerable.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a <code>WeakMap</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Creating a <code>WeakMap</code> is straightforward. You use the <code>new</code> keyword to initialize it.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_14",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To add elements to a <code>WeakMap</code>, you use the <code>set</code> method. This method takes two arguments: an object as a key and the value associated with that key.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_15",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Accessing Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To access values in a <code>WeakMap</code>, you use the <code>get</code> method with the object key as its argument.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_16",exampleid:"js_5_4_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>This will retrieve the value associated with <code>objKey</code>. If the key does not exist in the <code>WeakMap</code>, <code>get</code> will return undefined.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Deleting Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To remove a key-value pair from a <code>WeakMap</code>, use the <code>delete</code> method with the object key.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_17",exampleid:"js_5_4_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>This method removes the specified key and its associated value from the <code>WeakMap</code>.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Additional Notes</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Garbage Collection</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>One of the key characteristics of <code>WeakMap</code> is that it allows its keys to be garbage-collected. If there are no other references to the key, it can be garbage-collected, which in turn removes the key-value pair from the <code>WeakMap</code>.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Not Enumerable</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Unlike <code>Map</code>, <code>WeakMap</code> keys and values are not enumerable. There are no methods to get a list of keys, values, or entries. This is due to the way <code>WeakMap</code> is designed to allow for efficient garbage collection.</ul></ul></ul>"},{text:'<ol start="4"><li><strong><code>WeakSet</code></strong></li></ol>'},{text:"<ul>A <code>WeakSet</code> is a collection of objects and non-registered symbols, similar to a <code>Set</code>, but with weak references. This means that if an object or a non-registered symbol in a <code>WeakSet</code> has no other references, it can be garbage-collected.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Object or Non-registered Symbol Values</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Only objects or non-registered symbols can be stored.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Weak References</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stored objects or non-registered symbols are weakly referenced.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Not Enumerable</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The elements cannot be enumerated.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a <code>WeakSet</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To create a <code>WeakSet</code>, you initialize it using the <code>new</code> keyword. This creates an empty <code>WeakSet</code>.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_18",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Elements are added to a <code>WeakSet</code> using the <code>add</code> method.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_19",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Checking for an Element</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To check if an object or a non-registered symbol is present in a <code>WeakSet</code>, use the <code>has</code> method. This method returns true if the object is in the <code>WeakSet</code>, and false otherwise.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_20",exampleid:"js_5_4_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Deleting Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To remove an object from a <code>WeakSet</code>, use the <code>delete</code> method.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_21",exampleid:"js_5_4_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"In summary, <code>Map</code> and <code>Set</code> are robust for general-purpose use where order and uniqueness are important, respectively. <code>WeakMap</code> and <code>WeakSet</code> are specialized for cases where memory management is a concern, particularly in managing object references without impeding garbage collection."}]},{secid:5,subtitle:"JSON Format",paragraphs:[{text:"JSON (JavaScript Object Notation) is a text-based data format following JavaScript object syntax. While it's derived from JavaScript, JSON is a language-independent format and is widely used in various programming environments. Here are the key aspects of JSON syntax:"},{text:"<ol><li><strong>Quoted Keys and Values</strong></li></ol>"},{text:"<ul>In JSON, both keys and string values must be enclosed in double quotes. Single quotes are not valid in JSON.</ul>"},{text:"",codeConfig:{codeid:"js_5_5_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>Here, both the keys (<code>name</code>, <code>occupation</code>) and the string value (<code>John</code>, <code>Engineer</code>) are in double quotes.</ul>"},{text:'<ol start="2"><li><strong>No Trailing Commas</strong></li></ol>'},{text:"<ul>Unlike some JavaScript objects, JSON does not allow trailing commas. Every key-value pair must be separated by a comma, but the last pair must not be followed by a comma.</ul>"},{text:'<ol start="3"><li><strong>Data Types</strong></li></ol>'},{text:"<ul>JSON supports some data types, including:</ul>"},{text:"<ul>Strings (must be in double quotes)</ul>"},{text:"<ul>Numbers (integers and floats)</ul>"},{text:"<ul>Booleans (true or false)</ul>"},{text:"<ul>Arrays (ordered lists)</ul>"},{text:"<ul>Objects (collections of key/value pairs)</ul>"},{text:"<ul>Null (null)</ul>"},{text:'<ol start="4"><li><strong>Arrays in JSON</strong></li></ol>'},{text:"<ul>Arrays are ordered lists of values, enclosed in square brackets <code>[]</code>. The values can be of any JSON-supported data type.</ul>"},{text:"",codeConfig:{codeid:"js_5_5_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>Note that the string values in the array are also enclosed in double quotes.</ul>"},{text:'<ol start="5"><li><strong>Nested Objects and Arrays</strong></li></ol>'},{text:"<ul>JSON can have nested objects and arrays.</ul>"},{text:"",codeConfig:{codeid:"js_5_5_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>In this example, the <code>address</code> is a nested object, and <code>hobbies</code> is an array of strings.</ul>"},{text:'<ol start="6"><li><strong>Stringification and Parsing</strong></li></ol>'},{text:"<ul><ul><li><code>JSON.stringify()</code> in JavaScript converts an object to a JSON string.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_5_4",exampleid:"js_5_5_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><code>JSON.parse()</code> converts a JSON string back to a JavaScript object.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_5_5",exampleid:"js_5_5_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>These methods ensure that the data adheres to JSON syntax when converting between strings and objects.</ul></ul>"},{text:'<ol start="7"><li><strong>Comments</strong></li></ol>'},{text:"<ul>Standard JSON does not support comments. Adding comments to a JSON file would make it invalid.</ul>"},{text:'<ol start="8"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul>JSON is commonly used for data interchange in web applications, API responses, configuration files, and more.</ul>"},{text:'<ol start="9"><li><strong>Compatibility</strong></li></ol>'},{text:"<ul>Despite being derived from JavaScript, JSON is a universally accepted format and can be used in numerous programming languages.</ul>"},{text:"Understanding the precise syntax rules of JSON is crucial for effective data interchange in modern web development and many other applications. This adherence to a strict syntax ensures consistency across different systems and platforms."}]}]},{category:"js",chid:6,title:"Object-Oriented Programming (OOP)",sections:[{secid:1,subtitle:"Prototypes and Inheritance",paragraphs:[{text:"JavaScript's prototypes and inheritance are fundamental concepts that play a crucial role in the language's object-oriented programming model. Let's break them down."},{text:"<ol><li><strong>Prototypes</strong></li></ol>"},{text:"<ul><ul><li><strong>What's a Prototype</strong></li></ul></ul>"},{text:"<ul><ul>Every JavaScript object has a property called <code>prototype</code>. This is a reference to another object and contains shared attributes and methods. When an object is created (e.g., using object literals, constructors, or factory functions), JavaScript gives this object a prototype property that links to the prototype object of its constructor.</ul></ul>"},{text:"<ul><ul><li><strong>Use Cases of Prototypes</strong></li></ul></ul>"},{text:"<ul><ul>Prototypes are used for sharing functionality across objects. Instead of each object storing its own copy of a method or property, it can access these from its prototype. For example:</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_1",exampleid:"js_6_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Here, the <code>greet</code> method is on <code>Person.prototype</code>, so it's shared by all instances of <code>Person</code>.</ul></ul>"},{text:'<ol start="2"><li><strong>Inheritance</strong></li></ol>'},{text:"<ul><ul><li><strong>What's Inheritance</strong></li></ul></ul>"},{text:'<ul><ul>Inheritance in JavaScript allows an object to take on the properties and methods of another object, effectively "inheriting" them.</ul></ul>'},{text:"<ul><ul><li><strong>Prototypal Inheritance</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript uses prototypes for inheritance. When you try to access a property or method of an object, JavaScript first looks at the object itself, and if it doesn't find it, it looks at the object's prototype, and so on up the prototype chain until it finds the property or returns undefined.</ul></ul>"},{text:"<ul><ul><li><strong>Steps to Implement Prototypal Inheritance</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 1: Define the Base Constructor Function</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>First, we'll define a constructor function <code>Vehicle</code> that will serve as the base for our inheritance.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this example, <code>Vehicle</code> is a constructor function with a property <code>type</code>. It also has a method <code>describe</code> on its prototype.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 2: Define the Child Constructor Function</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Next, we'll define another constructor function <code>Car</code> that will inherit properties and methods from <code>Vehicle</code>.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Here, <code>Car</code> is intended to be a more specific type of <code>Vehicle</code>. It calls <code>Vehicle</code> constructor function to initialize the <code>type</code> property. It also sets its <code>prototype</code> to a new object created with <code>Vehicle.prototype</code> to inherit methods from <code>Vehicle</code>.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 3: Add or Override Methods in <code>Car</code></strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Now, we can add new methods to <code>Car</code> or override existing ones from <code>Vehicle</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this example, we added a new method <code>showDetails</code> to <code>Car</code>, and we also override the <code>describe</code> method to provide more specific information about the <code>Car</code>.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 4: Create an Instance of <code>Car</code> and Use It</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Finally, we can create an instance of <code>Car</code> and use the inherited and newly defined methods.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_5",exampleid:"js_6_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this example, <code>myCar</code> is an instance of <code>Car</code> that has access to both the methods defined in <code>Car</code> and inherited from <code>Vehicle</code>.</ul></ul></ul>"},{text:"Understanding these concepts is crucial for effective JavaScript programming, especially when dealing with complex object-oriented structures."}]},{secid:2,subtitle:"Classes and Inheritance",paragraphs:[{text:"JavaScript classes are a part of the ECMAScript 2015 (ES6) specification that provide a new, syntactic sugar over the existing prototype-based inheritance and offer a more convenient and familiar syntax for creating objects. Here's a breakdown of the key components and features of JavaScript classes:"},{text:"<ol><li><strong>Defining Classes</strong></li></ol>"},{text:"<ul><ul><li><strong><code>class</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The <code>class</code> keyword is used to define a class in JavaScript. It encapsulates data and methods that should be used across instances of this class.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>constructor</code> Method</strong></li></ul></ul>"},{text:"<ul><ul>The <code>constructor</code> method is a special method for creating and initializing objects created with a class. It's automatically called when a new instance of the class is created.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Public Fields</strong></li></ul></ul>"},{text:"<ul><ul>Public fields are variables that belong to a class. They are declared directly within the class body, outside of any methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_3",exampleid:"js_6_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Public Methods</strong></li></ul></ul>"},{text:"<ul><ul>Public methods are functions associated with a class. they are defined within the class body.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_4",exampleid:"js_6_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Static Fields and Methods</strong></li></ul></ul>"},{text:"<ul><ul>Static fields and methods are used or called on the class itself, not on instances of the class. they are defined within the class body.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_5",exampleid:"js_6_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Setters & Getters</strong></li></ul></ul>"},{text:"<ul><ul>Setters and getters are special methods to set and get the values of fields. They provide a way to get and set the fields of an object internally.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_6",exampleid:"js_6_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Private Fields and Methods with <code>#</code></strong></li></ul></ul>"},{text:"<ul><ul>Private class fields that cannot be accessed outside of the class's body. Marked with <code>#</code>, they are only accessible within the class. In addition, <code>#</code> can also apply to static fields, static methods, setters, and getters to make them private in a class.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_7",exampleid:"js_6_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Inheritance</strong></li></ol>'},{text:"<ul><ul><li><strong>What's Class Inheritance</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript's class inheritance is a key concept that allows objects to take on fields and methods from another class. Introduced in ES6, class syntax provides a more intuitive and easier-to-understand mechanism for creating object-oriented code compared to the traditional prototype-based approach.</ul></ul>"},{text:"<ul><ul><li><strong><code>extends</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>In JavaScript, the <code>extends</code> keyword is used in class declarations to create a class as a child of another class.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>super</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Inside a subclass, <code>super</code> refers to the constructor of the parent class. It's used to call the parent's constructor and methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Steps to Implement Class Inheritance</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 1: Define the Parent Class</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>First, we define a parent class. In this example, let's create a <code>Vehicle</code> class that will serve as our base class.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this <code>Vehicle</code> class, we have a constructor that initializes the <code>brand</code> field and a method <code>start</code>.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 2: Define the Child Class using <code>extends</code> Keyword</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Now, let's create a child class <code>Car</code> that extends the <code>Vehicle</code> class. This is where we use the <code>extends</code> keyword.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In the <code>Car</code> class, the <code>extends Vehicle</code> syntax is used to create <code>Car</code> as a subclass of <code>Vehicle</code>. The <code>super(brand)</code> call inside the constructor is crucial. It calls the constructor of <code>Vehicle</code>, ensuring the <code>brand</code> field is initialized.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 3: Overriding Methods</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Let's add an example of overriding a method in the child class.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_12",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In the overridden <code>start</code> method of <code>Car</code>, we call <code>super.start()</code> to execute the <code>start</code> method from the <code>Vehicle</code> class.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 4: Creating Instances and Using the Inheritance</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Finally, let's create an instance of the <code>Car</code> class and see the inheritance in action.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_13",exampleid:"js_6_2_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Here, <code>myCar</code> is an instance of <code>Car</code>. The <code>display</code> method specific to <code>Car</code> displays the full information of the <code>myCar</code>.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Key Features of Class Inheritance</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Method Overriding</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Child classes can override methods of the parent class to provide specialized behavior.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Accessing Parent Class Methods</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>super</code> keyword can be used to access and call methods on an object's parent.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Multi-level Inheritance</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>JavaScript supports multi-level inheritance (a chain of classes inheriting from one another).</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Single Inheritance</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Each class can only extend one other class (no multiple inheritance directly).</ul></ul></ul>"},{text:"JavaScript classes provide a more declarative and less verbose way to create objects and manage inheritance compared to the traditional prototype-based approach. The syntax introduced by ES6, including <code>class</code> keyword, constructor, fields, methods, static methods, setters & getters, and private class fields, offers a clearer and more powerful way to work with objects in JavaScript."}]},{secid:3,subtitle:"Built-in Constructors",paragraphs:[{text:"JavaScript provides several built-in constructors which allow for the creation of objects of predefined types. These constructors are part of the JavaScript language and are available in any JavaScript environment. Let's explore some of the most commonly used built-in constructors with examples:"},{text:"<ol><li><strong>Object Constructor</strong></li></ol>"},{text:"<ul><ul><li><strong>Creating Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The <code>Object</code> constructor is used to create a new object wrapper. It's the base constructor for all JavaScript objects. While you can create objects using <code>new Object()</code>, it's more common and convenient to use object literal syntax <code>{}</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_1",exampleid:"js_6_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Object Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>When called as a function (<code>Object()</code>), it returns a new object, similar to using the <code>new Object()</code> constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_2",exampleid:"js_6_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Array Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Array Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The <code>Array</code> constructor creates array objects. It's less common to use <code>new Array()</code> due to potential confusion (single numeric argument defines array length). Array literals <code>[]</code> are preferred.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_3",exampleid:"js_6_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Array Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Calling <code>Array()</code> as a function behaves like using the <code>new Array()</code> constructor. It creates and returns a new array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_4",exampleid:"js_6_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>String Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating String Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Creates a new string object. Rarely used because string literals provide the same functionality more simply.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_5",exampleid:"js_6_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the String Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>When <code>String()</code> is called as a function, it converts the given value to a string primitive, which is different from creating a String object using <code>new String()</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_6",exampleid:"js_6_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Number Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Number Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Constructs a number object wrapper. Generally not recommended for use. Number literals provide cleaner syntax and better performance.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_7",exampleid:"js_6_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Number Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Similar to <code>String()</code>, calling <code>Number()</code> as a function converts the given value to a number primitive, rather than creating a new <code>Number</code> object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_8",exampleid:"js_6_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Boolean Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Boolean Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Creates a boolean object wrapper. Boolean literals are preferred for simplicity. Boolean objects can be counterintuitive (all Boolean objects are truthy, even <code>new Boolean(false)</code>).</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_9",exampleid:"js_6_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Boolean Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul><code>Boolean()</code> as a function converts the given value to its boolean primitive equivalent, which is not the same as creating a new Boolean object with <code>new Boolean()</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_10",exampleid:"js_6_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="6"><li><strong>Function Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Function Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The <code>Function</code> constructor creates new function objects. It allows defining functions dynamically, but is less common due to readability concerns and scoping differences.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_11",exampleid:"js_6_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Function Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Calling <code>Function()</code> as a function still creates a new function object, similar to using the <code>new Function()</code> constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_12",exampleid:"js_6_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Date Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Date Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The <code>Date</code> constructor creates date objects representing dates and times. Commonly used as there's no literal syntax for dates.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_13",exampleid:"js_6_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Date Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>When <code>Date()</code> is called as a function, it returns a string representing the current date and time, rather than creating a new Date object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_14",exampleid:"js_6_3_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="8"><li><strong>RegExp Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating RegExp Objects Using <code>new</code> Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Constructs a RegExp object for matching text with a pattern. While useful for dynamically creating regular expressions, literal syntax is often clearer and more concise.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_15",exampleid:"js_6_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the RegExp Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Calling <code>RegExp()</code> as a function creates a new regular expression object, similar to using the <code>new RegExp()</code> constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_16",exampleid:"js_6_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Built-in constructors in JavaScript offer flexibility in creating various types of objects, but understanding when and how to use them, especially considering the alternatives, is crucial for effective JavaScript programming."}]}]},{category:"js",chid:7,title:"Asynchronous Programming",sections:[{secid:1,subtitle:"Introduction to Asynchronous Programming",paragraphs:[{text:"Asynchronous programming is a programming paradigm that allows tasks to run independently and concurrently without blocking the execution of the main program. It enables the efficient execution of time-consuming operations such as fetching data from a server, reading and writing files, or waiting for user input. Instead of waiting for these operations to complete before moving on, asynchronous programming allows the program to continue executing other tasks while waiting for the asynchronous operations to finish. Here's an introduction to asynchronous programming:"},{text:"<ol><li><strong>Synchronous vs. Asynchronous Execution</strong></li></ol>"},{text:"<ul>In synchronous programming, tasks are executed one after the other, and each task must complete before the next one starts. This can lead to blocking, where the program waits for a task to finish, causing a delay in the overall execution.</ul>"},{text:"<ul>In asynchronous programming, tasks can be initiated and continue running independently while other tasks are in progress. Asynchronous tasks run in the background, and the program can move on to execute other tasks without waiting for the completion of the asynchronous operations.</ul>"},{text:'<ol start="2"><li><strong>Callbacks</strong></li></ol>'},{text:"<ul>Callbacks are a common pattern used in asynchronous programming.</ul>"},{text:"<ul>A callback is a function that is passed as an argument to another function and gets invoked once an asynchronous operation completes.</ul>"},{text:"<ul>Callbacks allow you to specify the code that should run after the completion of an asynchronous task.</ul>"},{text:'<ol start="3"><li><strong>Promises</strong></li></ol>'},{text:"<ul>Promises are a more modern approach to asynchronous programming and provide a cleaner and more structured way to handle asynchronous operations.</ul>"},{text:"<ul>A Promise represents the eventual completion or failure of an asynchronous operation and provides a mechanism to handle the result or error once available.</ul>"},{text:"<ul>Promises have methods like <code>then()</code> and <code>catch()</code> that allow you to chain operations and handle the success or failure of a Promise.</ul>"},{text:'<ol start="4"><li><strong>Async/Await</strong></li></ol>'},{text:"<ul><code>async/await</code> is a syntax introduced in newer versions of JavaScript (ES2017) that simplifies working with Promises.</ul>"},{text:"<ul>The <code>async</code> keyword is used to define an asynchronous function, and the <code>await</code> keyword is used to pause the execution of the function until a Promise is resolved.</ul>"},{text:"<ul><code>async/await</code> allows you to write asynchronous code in a more synchronous and readable manner, making it easier to handle asynchronous operations and their results.</ul>"},{text:'<ol start="5"><li><strong>Event-driven Programming</strong></li></ol>'},{text:"<ul>Asynchronous programming often revolves around event-driven programming.</ul>"},{text:"<ul>Events are triggered when certain actions occur, such as user input, network responses, or timers.</ul>"},{text:"<ul>Asynchronous operations are usually initiated and respond to events, and the program executes code in response to these events.</ul>"},{text:"Asynchronous programming is essential for building responsive and efficient applications, particularly in scenarios where operations involve network requests, file I/O, or other time-consuming tasks. By utilizing callbacks, Promises, or async/await syntax, you can handle asynchronous operations in a structured and manageable way, ensuring that your program remains responsive and performs well."}]},{secid:2,subtitle:"Callback Functions",paragraphs:[{text:"Callback functions are a fundamental concept in JavaScript that allows you to pass a function as an argument to another function. The primary purpose of using callback functions is to execute code asynchronously or to handle the result of an asynchronous operation. Here's an overview of callback functions:"},{text:"<ol><li><strong>Definition</strong></li></ol>"},{text:"<ul>A callback function is a function that is passed as an argument to another function and gets invoked at a later point in time, typically after the completion of a certain task.</ul>"},{text:"<ul>The function receiving the callback is responsible for calling it, usually passing some data or result to the callback.</ul>"},{text:'<ol start="2"><li><strong>Callback Syntax</strong></li></ol>'},{text:"<ul>Callback functions can be declared using regular function syntax or as anonymous functions.<br/><br/>Here is an example:</ul>"},{text:"",codeConfig:{codeid:"js_7_2_1",exampleid:"js_7_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>Asynchronous Operations</strong></li></ol>'},{text:"<ul>Callback functions are commonly used in asynchronous programming to handle the completion of time-consuming tasks, such as making API requests, reading files, or database operations.</ul>"},{text:"<ul>Instead of blocking the program's execution while waiting for these tasks to finish, the program continues executing other tasks, and the callback function is invoked once the asynchronous operation completes.<br/><br/>Here is an example:</ul>"},{text:"",codeConfig:{codeid:"js_7_2_2",exampleid:"js_7_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="4"><li><strong>Customizing Callbacks</strong></li></ol>'},{text:"<ul>Callback functions can be customized to accept additional arguments based on the specific requirements of the operation or task being performed.</ul>"},{text:"<ul>The function that invokes the callback can pass any necessary data as arguments when invoking the callback.</ul>"},{text:"Callback functions are a powerful mechanism in JavaScript that allows you to control the flow of execution in asynchronous scenarios. By passing callback functions to other functions, you can define custom behavior that executes at a specific point in time, such as after the completion of an asynchronous task. However, as the complexity of asynchronous code grows, alternative approaches like Promises or async/await may be more suitable for handling asynchronous operations in a more maintainable and readable manner."}]},{secid:3,subtitle:"Promises",paragraphs:[{text:"Understanding of JavaScript Promises involves several key concepts and how they apply to asynchronous programming in JavaScript. Promises are a core part of handling asynchronous operations in JavaScript, allowing you to write cleaner, more readable code. Here will cover the basics, usage, chaining, error handling, and advanced concepts related to Promises."},{text:"<ol><li><strong>What are Promises?<strong></li></ul>"},{text:"<ul>A Promise in JavaScript represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a Promise to supply the value at some point in the future.</ul>"},{text:'<ol start="2"><li><strong>Promise States</strong></li></ol>'},{text:"<ul>A Promise can be in one of three states: pending, fulfilled, or rejected.</ul>"},{text:"<ul>When a Promise is pending, it means that the asynchronous operation is still ongoing and the result is not available yet.</ul>"},{text:"<ul>A fulfilled Promise means that the operation completed successfully, and the Promise holds the resulting value.</ul>"},{text:"<ul>A rejected Promise means that an error occurred during the operation, and the Promise holds the reason for the error.</ul>"},{text:'<ol start="3"><li><strong>Creating Promises</strong></li></ol>'},{text:'<ul>Promises can be created using the <code>Promise</code> constructor. The constructor takes a function as an argument, commonly referred to as the "executor function".</ul>'},{text:"<ul>The executor function takes two parameters: <code>resolve</code> and <code>reject</code>. <code>resolve</code> is used to fulfill the Promise, and <code>reject</code> is used to reject the Promise.</ul>"},{text:"<ul>Inside the executor function, you perform the asynchronous operation, and once it's complete, you call <code>resolve</code> with the result or <code>reject</code> with an error.</ul>"},{text:"",codeConfig:{codeid:"js_7_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{text:'<ol start="4"><li><strong>Consuming Promises using <code>then</code>, <code>catch</code>, and <code>finally</code></strong></li></ol>'},{text:"<ul>Once a Promise is created, you can use <code>then()</code>, <code>catch()</code>, and <code>finally()</code> to handle fulfilled (successful), rejected (failed), and finished (either fulfilled or rejected) Promises, respectively.</ul>"},{text:"<ul><ul><li><code>then()</code></li></ul></ul>"},{text:"<ul><ul>Used for handling fulfilled Promises. It takes up to two arguments: a callback for success and another for failure.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_2",exampleid:"js_7_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><code>catch()</code></li></ul></ul>"},{text:"<ul><ul>Used for handling rejected Promises, any errors that occur during the asynchronous operation or in any of the preceding <code>then()</code> callbacks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_3",exampleid:"js_7_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><code>finally()</code></li></ul></ul>"},{text:"<ul><ul>Used to execute logic after a Promise is settled, regardless of its outcome.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_4",exampleid:"js_7_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Promise Chaining</strong></li></ol>'},{text:"<ul>Promises can be chained together using the <code>then()</code> method, which allows you to specify what should happen after the Promise is fulfilled.</ul>"},{text:"<ul>The <code>then()</code> method takes a callback function as an argument, which will be executed with the resolved value of the Promise.</ul>"},{text:"<ul>Promise chaining allows you to perform sequential operations or transformations on the result of the previous Promise.</ul>"},{text:"",codeConfig:{codeid:"js_7_3_5",exampleid:"js_7_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:'<ol start="6"><li><strong>Advanced Features</strong></li></ol>'},{text:"<ul>JavaScript Promises offer several advanced features that facilitate more complex asynchronous operations, error handling, and control flow management. These features enable you to write cleaner, more efficient code when dealing with multiple asynchronous tasks.</ul>"},{text:"<ul><ul><li><code>Promise.resolve()</code> and <code>Promise.reject()</code></li></ul></ul>"},{text:"<ul><ul><code>Promise.resolve()</code> and <code>Promise.reject()</code> are utility methods to create Promises that are already resolved or rejected with a given value or reason.</ul></ul>"},{text:"<ul><ul>Use them for simplifying code when you need to return a Promise from a function that sometimes completes synchronously.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_6",exampleid:"js_7_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><code>Promise.all()</code></li></ul></ul>"},{text:"<ul><ul><code>Promise.all()</code> is a static method that takes an iterable of Promises as an input and returns a single Promise that resolves when all of the input's Promises have resolved or when the input iterable contains no Promises. It rejects immediately if any of the input Promises are rejected.</ul></ul>"},{text:"<ul><ul>Use the method, when you need to perform multiple asynchronous operations in parallel and wait for all of them to complete.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_7",exampleid:"js_7_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><code>Promise.race()</code></li></ul></ul>"},{text:"<ul><ul><code>Promise.race()</code> is similar to <code>Promise.all()</code>, but instead of waiting for all Promises to succeed, it resolves or rejects as soon as one of the Promises in the iterable resolves or rejects, with the value or reason from that Promise.</ul></ul>"},{text:"<ul><ul>The method is useful for timeout patterns where you race an asynchronous operation against a timeout and take whichever completes first.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_8",exampleid:"js_7_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><code>Promise.allSettled()</code></li></ul></ul>"},{text:"<ul><ul><code>Promise.allSettled()</code> returns a Promise that resolves after all of the given Promises have either resolved or rejected, with an array of objects describing the outcome of each Promise.</ul></ul>"},{text:"<ul><ul>Use the method, when you need to perform multiple operations in parallel and you want to know the outcome of each Promise regardless of whether they succeeded or failed.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_9",exampleid:"js_7_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><code>Promise.any()</code></li></ul></ul>"},{text:"<ul><ul><code>Promise.any()</code> takes an iterable of Promise objects and, as soon as one of the Promises in the iterable fulfills, returns a single Promise that resolves with the value from that Promise. If all of the passed-in Promises are rejected, it returns a single Promise that is rejected with an <code>AggregateError</code>.</ul></ul>"},{text:"<ul><ul>Use the method, when you have multiple Promise-based tasks and you want to proceed with the first one that succeeds.</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_10",exampleid:"js_7_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"Promises are a fundamental part of JavaScript and a powerful tool for handling asynchronous operations. They allow for cleaner code through chaining and provide robust error handling mechanisms. Understanding Promises and how to use them effectively is crucial for any JavaScript developer working with asynchronous operations."}]},{secid:4,subtitle:"Async/Await",paragraphs:[{text:"<code>async/await</code> is a syntax introduced in newer versions of JavaScript (ES2017) that provides a more concise and synchronous-like way to write asynchronous code. It is built on top of Promises and offers a simpler and more readable approach to handle asynchronous operations. Here's an overview of async/await:"},{text:"<ol><li><strong>Defining Async Function</strong></li></ol>"},{text:"<ul>An async function is a special type of function that allows you to use the <code>await</code> keyword inside it.</ul>"},{text:"<ul>The <code>async</code> keyword is used to define a function as asynchronous. It can be used in function declarations or function expressions.</ul>"},{text:"<ul>An async function always returns a Promise, and the value returned by the function is wrapped in a resolved Promise or any error thrown is wrapped in a rejected Promise.</ul>"},{text:"",codeConfig:{codeid:"js_7_4_1",exampleid:"js_7_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>Using <code>await</code> Keyword</strong></li></ol>'},{text:"<ul>The <code>await</code> keyword can only be used inside an async function.</ul>"},{text:"<ul>It pauses the execution of the async function until the Promise is resolved or rejected.</ul>"},{text:"<ul>When <code>await</code> is used on a Promise, it waits for the Promise to settle and returns the resolved value.</ul>"},{text:"",codeConfig:{codeid:"js_7_4_2",exampleid:"js_7_4_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>Error Handling</strong></li></ol>'},{text:"<ul>You can handle errors in async functions using <code>try/catch</code> blocks. This allows you to catch rejected Promises and other errors in a synchronous-like manner.</ul>"},{text:"<ul>You can handle the error gracefully, log it, or take appropriate actions.</ul>"},{text:"<ul>Please refer to the above example.</ul>"},{text:"<code>async/await</code> offers a more intuitive and synchronous-like way to write asynchronous code, making it easier to read, write, and reason about. It simplifies error handling and allows for sequential execution of asynchronous operations. However, it's important to note that <code>async/await</code> can only be used within <code>async</code> functions and requires Promises to be present for it to work. It has become a widely adopted pattern in modern JavaScript development and is commonly used in conjunction with Promises or libraries and frameworks that use Promises as their underlying mechanism for handling asynchronous tasks."}]},{secid:5,subtitle:"Event-Driven Programming",paragraphs:[{text:"JavaScript is a language well-suited for event-driven programming. Event-driven programming is a paradigm where the flow of a program is primarily determined by events, such as user actions, system events, or messages from other parts of the program. Instead of following a linear sequence of execution, event-driven programs react to these events by executing specific event handlers or callbacks."},{text:"In the context of web development, event-driven programming is especially prominent due to the nature of the browser environment, where user interactions (clicks, keypresses, etc.) trigger events that developers can listen to and respond to accordingly."},{text:"Here's an overview of how event-driven programming works in JavaScript:"},{text:"<ol><li><strong>Event Listeners</strong></li></ol>"},{text:'<ul>In event-driven programming, you attach event listeners to specific elements or objects that are likely to generate events. These event listeners "listen" for events to occur. When the event is triggered, the associated callback function, also known as an event handler, is executed.</ul>'},{text:'<ol start="2"><li><strong>Event Handling</strong></li></ol>'},{text:"<ul>The event handler is a function that contains the logic to be executed when the event occurs. It could be anything from updating the user interface, processing data, making an AJAX request, or changing the application's state.</ul>"},{text:'<ol start="3"><li><strong>Asynchronous Execution</strong></li></ol>'},{text:"<ul>Event-driven programming is inherently asynchronous. When you register an event listener, the program continues executing without waiting for the event to occur. Once the event happens, the event handler is invoked asynchronously, allowing the rest of the program to continue its normal flow.</ul>"},{text:"<ul>Here's an example of event-driven programming in JavaScript:</ul>"},{text:"",codeConfig:{codeid:"js_7_5_1",exampleid:"js_7_5_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{text:"JavaScript's event-driven nature allows for interactive and responsive web applications. It is widely used in various contexts, including web development, desktop applications, and server-side programming with Node.js. Event-driven architecture plays a crucial role in enabling non-blocking behavior and efficient resource utilization, making it a fundamental concept in modern programming paradigms."}]}]},{category:"js",chid:8,title:"Browser Object Model (BOM)",sections:[{secid:1,subtitle:"Window Object",paragraphs:[{text:"The JavaScript <code>window</code> object is a global object representing the browser window that contains the DOM document. It acts as the root level of the Browser Object Model (BOM) and provides functionalities beyond the document content, such as methods to control the browser window and variables that give information about the environment."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong><code>document</code></strong></li></ul></ul>"},{text:"<ul><ul>This property refers to the Document Object Model (DOM) of the page, allowing access to the content of the page and various methods to manipulate it.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_1",exampleid:"js_8_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>innerWidth</code> and <code>innerHeight</code></strong></li></ul></ul>"},{text:"<ul><ul>These properties return the width and height of the window's layout viewport, excluding any scrollbars.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_2",exampleid:"js_8_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>frames</code></strong></li></ul></ul>"},{text:"<ul><ul>An array-like object representing all the <code>&lt;iframe&gt;</code> elements in the current window.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_3",exampleid:"js_8_1_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Key Methods </strong></li></ol>'},{text:"<ul><ul><li><strong><code>open()</code> and <code>close()</code></strong></li></ul></ul>"},{text:"<ul><ul><code>open()</code> opens a new browser window or tab.</ul></ul>"},{text:"<ul><ul><code>close()</code> closes the current window. This method is only allowed to close windows that were opened by JavaScript using the <code>open()</code> method.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_4",exampleid:"js_8_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>scrollTo()</code>, <code>scrollBy()</code>, and <code>scroll()</code></strong></li></ul></ul>"},{text:"<ul><ul>These methods control the scrolling of the window.</ul></ul>"},{text:"<ul><ul><code>scrollTo()</code> scrolls to a particular set of coordinates in the document. It's used to jump to a specific position either in the entire window or within a scrollable element.</ul></ul>"},{text:"<ul><ul><code>scrollBy()</code> scrolls the document in the window or a particular element by the specified number of pixels. It's used for scrolling relative to the current position.</ul></ul>"},{text:"<ul><ul><code>scroll()</code> is an alias for <code>scrollTo()</code>. It performs the same function as <code>scrollTo()</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_5",exampleid:"js_8_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>alert()</code>, <code>prompt()</code>, and <code>confirm()</code></strong></li></ul></ul>"},{text:"<ul><ul>JavaScript provides these types of dialog boxes that can be used for interaction with users.</ul></ul>"},{text:"<ul><ul><code>alert()</code> displays an alert dialog with a specified message and an OK button. It's primarily used to inform users.</ul></ul>"},{text:"<ul><ul><code>prompt()</code> displays a modal dialog with a specified message, along with OK and Cancel buttons. It's used to confirm a user's decision.</ul></ul>"},{text:"<ul><ul><code>confirm()</code> displays a dialog box that prompts the user for input. It provides a text box for the user's response.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_6",exampleid:"js_8_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>setTimeout()</code> and <code>setInterval()</code></strong></li></ul></ul>"},{text:"<ul><ul>These are two fundamental timing functions in JavaScript, They are used to schedule the execution of code at a later time.</ul></ul>"},{text:"<ul><ul><code>setTimeout()</code> executes a function or specified piece of code once after a defined delay.</ul></ul>"},{text:"<ul><ul><code>clearTimeout()</code> is used to cancel a timeout set with <code>setTimeout()</code>.</ul></ul>"},{text:"<ul><ul><code>setInterval()</code> executes a function or specified piece of code repeatedly at set intervals.</ul></ul>"},{text:"<ul><ul><code>clearInterval()</code> is used to cancel a timer set with <code>setInterval()</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_7",exampleid:"js_8_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Global Variables and Functions</strong></li></ul></ul>"},{text:"<ul><ul>Any global variable or function is automatically a property of the <code>window</code> object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_8",exampleid:"js_8_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Fundamental Timing</strong></li></ul></ul>"},{text:"<ul><ul>in JavaScript, <code>setTimeout()</code> and <code>setInterval()</code> of the <code>window</code> object are used to schedule the execution of code at a later time - either once after a delay, or repeatedly at regular intervals.</ul></ul>"},{text:"<ul><ul><li><strong>Dialogs</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript provides several types of dialogs that can be used for interaction with users. These are part of the window object and can be used to display alerts, confirm actions, or prompt for input by calling <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code>.</ul></ul>"},{text:"<ul><ul><li><strong>Handling Browser Resize Events</strong></li></ul></ul>"},{text:"<ul><ul>Detect changes in the browser window size, useful for responsive designs and dynamic layouts.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_9",exampleid:"js_8_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"The <code>window</code> object provides a wide array of functionalities to interact with the browser window and is fundamental in web development. Understanding its properties and methods is essential for manipulating the web environment and enhancing user interaction."}]},{secid:2,subtitle:"Screen Object",paragraphs:[{text:"The <code>screen</code> object provides information about the user's screen, such as its resolution, color depth, and available space. This object is particularly useful for understanding the display characteristics of the user's device and can be used to enhance the user experience by tailoring the layout and content accordingly. Here are some key properties the <code>screen</code> object:"},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong><code>screen.width</code> and <code>screen.height</code></strong></li></ul></ul>"},{text:"<ul><ul>These properties return the width and height of the user's screen in pixels.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_1",exampleid:"js_8_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>screen.availWidth</code> and <code>screen.availHeight</code></strong></li></ul></ul>"},{text:"<ul><ul>These provide the width and height of the screen's available space in pixels, excluding interfaces like the Windows Taskbar or the Mac Dock.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_2",exampleid:"js_8_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>screen.colorDepth</code></strong></li></ul></ul>"},{text:"<ul><ul>This returns the number of bits used to display one color. Higher color depth means the screen can display more colors.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_3",exampleid:"js_8_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>screen.pixelDepth</code></strong></li></ul></ul>"},{text:"<ul><ul>Similar to <code>colorDepth</code>, this property returns the color resolution (in bits per pixel) of the screen.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_4",exampleid:"js_8_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Tailoring Content to Screen Size</strong></li></ul></ul>"},{text:"<ul><ul>A website can use <code>screen.width</code> and <code>screen.height</code> to determine if it's being viewed on a mobile device or a desktop, and adjust its content accordingly.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_5",exampleid:"js_8_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Optimizing Graphics for Color Depth</strong></li></ul></ul>"},{text:"<ul><ul>A graphic-intensive application or game might check <code>screen.colorDepth</code> to decide whether to use high-quality images or simpler graphics.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_6",exampleid:"js_8_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Screen Availability for New Windows</strong></li></ul></ul>"},{text:"<ul><ul>When opening a new window, <code>screen.availWidth</code> and <code>screen.availHeight</code> can be used to position it optimally without overlapping system interfaces.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_7",exampleid:"js_8_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, the <code>screen</code> object is a valuable tool in JavaScript for tailoring user experiences based on the physical characteristics of the user's display device. However, its usage should be balanced with considerations for privacy, browser compatibility, and dynamic screen environments."}]},{secid:3,subtitle:"Location Object",paragraphs:[{text:"The <code>location</code> object represents the current URL of the webpage being displayed in that window. It offers various properties and methods that allow you to analyze and manipulate the browser's URL. Understanding and using the location object is crucial for tasks such as page redirection, URL parsing, and retrieving query string parameters."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong><code>href</code></strong></li></ul></ul>"},{text:"<ul><ul>The entire URL. If you change this property, the browser will load the new URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_1",exampleid:"js_8_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>protocol</code></strong></li></ul></ul>"},{text:"<ul><ul> The protocol scheme of the URL (e.g., <code>http:</code>, <code>https:</code>).</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_2",exampleid:"js_8_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>host</code></strong></li></ul></ul>"},{text:"<ul><ul>The hostname and port of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_3",exampleid:"js_8_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>hostname</code></strong></li></ul></ul>"},{text:"<ul><ul>The domain of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_4",exampleid:"js_8_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>port</code></strong></li></ul></ul>"},{text:"<ul><ul>The port number of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_5",exampleid:"js_8_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>pathname</code></strong></li></ul></ul>"},{text:"<ul><ul>The path or segment of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_6",exampleid:"js_8_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>search</code></strong></li></ul></ul>"},{text:"<ul><ul>The query string part of the URL, starting with the question mark.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_7",exampleid:"js_8_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>hash</code></strong></li></ul></ul>"},{text:"<ul><ul>The anchor part of the URL, including the hash symbol (<code>#</code>).</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_8",exampleid:"js_8_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Key Methods</strong></li></ol>'},{text:"<ul><ul><li><strong><code>reload()</code></strong></li></ul></ul>"},{text:"<ul><ul>Reloads the current page.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>replace(url)</code></strong></li></ul></ul>"},{text:"<ul><ul>Replaces the current URL with the new one. Unlike setting <code>href</code>, <code>replace(url)</code> does not create a new record in the browser history.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>assign(url)</code></strong></li></ul></ul>"},{text:"<ul><ul>Loads the new webpage at the provided URL. It's similar to setting <code>href<?code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Redirecting to a Different Webpage</strong></li></ul></ul>"},{text:"<ul><ul>Redirect the user to another page by setting <code>location.href</code> and <code>location.assign(url)</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_12",exampleid:"js_8_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Reloading the Page</strong></li></ul></ul>"},{text:"<ul><ul>Reload the current page by using <code>location.reload()</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_13",exampleid:"js_8_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Getting URL Components</strong></li></ul></ul>"},{text:"<ul><ul>Analyze different parts of the URL for routing logic, authentication, etc.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_14",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>Working with Query Strings</code></strong></li></ul></ul>"},{text:"<ul><ul>Parse query strings for parameters by using <code>location.search</code> and <code>URLSearchParams</code> constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_15",exampleid:"js_8_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Handling Hash Changes</strong></li></ul></ul>"},{text:"<ul><ul>React to changes in the hash for single-page applications or anchor navigation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_16",exampleid:"js_8_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"In summary, the <code>location</code> object is a powerful and essential part of JavaScript, used for navigating and retrieving information about the current browser URL. Its proper use enables effective control over the user's browsing experience."}]},{secid:4,subtitle:"History Object",paragraphs:[{text:"The <code>history</code> object is used to interact with the browser's session history, which is the list of pages visited in the tab or frame in which the current page is loaded. This object enables manipulation of the browser's history in terms of navigation and tracking the number of pages in the history stack. It's important to note that for security and privacy reasons, the history object does not provide direct access to the URLs in the history."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong><code>length</code></strong></li></ul></ul>"},{text:"<ul><ul>Returns the number of pages in the session history, including the currently loaded page.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_1",exampleid:"js_8_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Key Methods</strong></li></ol>'},{text:"<ul><ul><li><strong><code>back()</code></strong></li></ul></ul>"},{text:"<ul><ul>Loads the previous URL in the history list. Equivalent to clicking the back button in the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_2",exampleid:"js_8_4_2_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>forward()</code></strong></li></ul></ul>"},{text:"<ul><ul>Loads the next URL in the history list, if there is one. Equivalent to clicking the forward button in the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_3",exampleid:"js_8_4_3_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>go()</code></strong></li></ul></ul>"},{text:"<ul><ul>Loads a specific URL from the session history. You can pass a positive or negative integer as a parameter, which indicates how many steps forward or backward to move in the history.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_4",exampleid:"js_8_4_4_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>pushState()</code></strong></li></ul></ul>"},{text:"<ul><ul>Adds an entry to the history stack, changing the current URL being viewed without reloading the page. Useful for single-page applications.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_5",exampleid:"js_8_4_5_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>replaceState()</code></strong></li></ul></ul>"},{text:"<ul><ul>Similar to <code>pushState()</code>, but modifies the current history entry instead of creating a new one.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_6",exampleid:"js_8_4_6_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Navigation in Single-Page Applications (SPAs)</strong></li></ul></ul>"},{text:"<ul><ul>SPAs can use <code>pushState()</code> and <code>replaceState()</code> to change the URL without reloading the page, enabling bookmarkable URLs and browser navigation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_7",exampleid:"js_8_4_7_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Handling Back Button</strong></li></ul></ul>"},{text:"<ul><ul>Use <code>history.pushState()</code> to add history entries, and listen for the <code>popstate</code> event to handle back button navigation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_8",exampleid:"js_8_4_8_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Redirecting to a Different Webpage Without Adding to History</strong></li></ul></ul>"},{text:"<ul><ul><code>replaceState()</code> can be used to redirect the user to a new URL without adding an entry to the history stack.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_9",exampleid:"js_8_4_9_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, the <code>history</code> object provides powerful capabilities for managing the browser's session history, crucial for creating dynamic, user-friendly web applications. However, it should be used responsibly to ensure a coherent and intuitive user navigation experience."}]},{secid:5,subtitle:"Navigator Object",paragraphs:[{text:"The JavaScript <code>navigator</code> object provides information about the browser and the environment in which it's running. This object is used for obtaining information about the user's browser, such as the name, version, language, and other details related to the operating system and platform. It's important to note that the <code>navigator</code> object is read-only."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong><code>appName</code></strong></li></ul></ul>"},{text:"<ul><ul>The name of the browser application. However, this is largely deprecated and unreliable for modern browser detection.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_1",exampleid:"js_8_5_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>appVersion</code></strong></li></ul></ul>"},{text:"<ul><ul>Information about the version of the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_2",exampleid:"js_8_5_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>userAgent</code></strong></li></ul></ul>"},{text:"<ul><ul>A string representing the user agent information for the browser, including details about the name, version, and operating system.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_3",exampleid:"js_8_5_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>platform</code></strong></li></ul></ul>"},{text:"<ul><ul>The platform on which the browser is running (e.g., 'Win32', 'Linux', 'MacIntel').</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_4",exampleid:"js_8_5_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>language</code></strong></li></ul></ul>"},{text:"<ul><ul>The current language of the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_5",exampleid:"js_8_5_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>languages</code></strong></li></ul></ul>"},{text:"<ul><ul>An array of the user's preferred languages.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_6",exampleid:"js_8_5_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>onLine</code></strong></li></ul></ul>"},{text:"<ul><ul>Indicates whether the browser is online.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_7",exampleid:"js_8_5_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>cookieEnabled</code></strong></li></ul></ul>"},{text:"<ul><ul>Indicates whether cookies are enabled in the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_8",exampleid:"js_8_5_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong><code>geolocation</code></strong></li></ul></ul>"},{text:"<ul><ul>Provides access to geographical location information.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_9",exampleid:"js_8_5_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Detecting Browser Online Status</strong></li></ul></ul>"},{text:"<ul><ul>You can check if the browser is currently online or offline.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_10",exampleid:"js_8_5_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Getting User's Preferred Languages</strong></li></ul></ul>"},{text:"<ul><ul>Useful for loading content in the user's preferred language.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_11",exampleid:"js_8_5_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Determining Mobile/Desktop Environment</strong></li></ul></ul>"},{text:"<ul><ul>While not foolproof, checking the <code>platform</code> or <code>userAgent</code> can give you an idea if the user is on a mobile device or a desktop.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_12",exampleid:"js_8_5_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Accessing Geolocation Data</strong></li></ul></ul>"},{text:"<ul><ul>With the user's permission, you can get their geographical location.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_13",exampleid:"js_8_5_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, the <code>navigator</code> object offers a way to glean information about the user's browser and operating system, which can be useful for adapting your web application to different environments or user preferences. However, it should be used judiciously and with consideration for user privacy and the variability of the data it provides."}]}]},{category:"js",chid:9,title:"Document Object Model (DOM)",sections:[{secid:1,subtitle:"Understanding the DOM",paragraphs:[{text:"The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree-like structure, where each node in the tree represents a part of the document. The DOM provides methods and properties to interact with and manipulate the document's content, structure, and styling. Understanding the DOM is essential for web development using JavaScript. Here are some key points about the DOM:"},{text:"<ol><li><strong>Tree Structure</strong></li></ol>"},{text:"<ul>The DOM represents an HTML or XML document as a hierarchical tree structure.</ul>"},{text:"<ul>The top-level node in the tree is called the document node, which represents the entire document.</ul>"},{text:"<ul>Other nodes represent elements, text, comments, attributes, and more.</ul>"},{text:"<ul>Elements are represented as element nodes, and they can have child nodes, such as text nodes or other element nodes.</ul>"},{text:'<ol start="2"><li><strong>Document Object</strong></li></ol>'},{text:"<ul>The <code>document</code> object represents the entire HTML document.</ul>"},{text:"<ul>It provides properties and methods to access and manipulate various aspects of the document, such as elements, attributes, styles, and events.</ul>"},{text:"<ul>Common properties and methods of the <code>document</code> object include <code>getElementById()</code>, <code>querySelector()</code>, <code>createElement()</code>, <code>appendChild()</code>, <code>removeChild()</code>, and many more.</ul>"},{text:'<ol start="3"><li><strong>Node Objects</strong></li></ol>'},{text:"<ul>Each part of an HTML or XML document is represented by a node object in the DOM.</ul>"},{text:"<ul>Common node types include element nodes, text nodes, comment nodes, and attribute nodes.</ul>"},{text:"<ul>Node objects have properties and methods to access and manipulate their content, attributes, and relationships with other nodes.</ul>"},{text:'<ol start="4"><li><strong>Selecting Elements</strong></li></ol>'},{text:"<ul>You can select elements in the DOM using various methods, such as <code>getElementById()</code>, <code>getElementsByClassName()</code>, <code>getElementsByTagName()</code>, and <code>querySelector()</code>.</ul>"},{text:"<ul>These methods allow you to retrieve specific elements based on their IDs, classes, tags, or CSS selectors.</ul>"},{text:'<ol start="5"><li><strong>Manipulating Elements</strong></li></ol>'},{text:"<ul>Once you have selected an element, you can manipulate it by accessing its properties and methods.</ul>"},{text:"<ul>You can modify an element's content, attributes, and styles, as well as add or remove elements and apply event handlers.</ul>"},{text:'<ol start="6"><li><strong>Event Handling</strong></li></ol>'},{text:"<ul>The DOM provides mechanisms for handling events, such as clicks, mouse movements, and keyboard interactions.</ul>"},{text:"<ul>You can register event handlers on elements to respond to specific events.</ul>"},{text:"<ul>Event handling methods include <code>addEventListener()</code>, <code>removeEventListener()</code>, and properties like <code>onclick</code>, <code>onload</code>, and more.</ul>"},{text:'<ol start="7"><li><strong>Dynamic Updates</strong></li></ol>'},{text:"<ul>One of the key advantages of the DOM is its ability to dynamically update the web page without reloading.</ul>"},{text:"<ul>You can create, modify, or remove elements and their content based on user interactions or other events.</ul>"},{text:"<ul>This enables dynamic and interactive web applications.</ul>"},{text:"Understanding the DOM allows you to manipulate web pages dynamically and create interactive user experiences. By accessing and modifying the structure and content of the DOM, you can update web pages in response to user actions, modify styles, handle events, and more. JavaScript is commonly used to interact with the DOM, making it an essential aspect of web development."}]},{secid:2,subtitle:"Accessing, Manipulating, and traversing DOM Nodes",paragraphs:[{text:"Accessing, manipulating, and traversing the Document Object Model (DOM) are fundamental aspects of web development that enable developers to dynamically interact with and update the content, structure, and style of a webpage. The DOM represents the page so that programs can change the document structure, style, and content. JavaScript provides various methods to work with the DOM, allowing for dynamic changes to the web pages without needing to reload the page. Here's a detailed look at these processes:"},{text:"<ol><li><strong>Accessing Nodes</strong></li></ol>"},{text:"<ul>Accessing DOM elements is the first step in manipulating the page. JavaScript offers several methods to select elements:</ul>"},{text:"<ul><ul><li>Use <code>getElementById()</code> to select an element by its ID.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_1",exampleid:"js_9_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Use <code>getElementsByClassName()</code> to return a live <code>HTMLCollection</code> of all elements with the specified class name.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_2",exampleid:"js_9_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Use <code>getElementsByTagName()</code> to return a live <code>HTMLCollection</code> of elements with the given tag name.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_3",exampleid:"js_9_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Use <code>querySelector()</code> to return the first element that matches a specified CSS selector(s).</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_4",exampleid:"js_9_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Use <code>querySelectorAll()</code> to return a static NodeList representing a list of the document's elements that match the specified group of selectors.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_5",exampleid:"js_9_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Manipulating Nodes</strong></li></ol>'},{text:"<ul>Once you have accessed the elements, you can manipulate their content, style, and properties:</ul>"},{text:"<ul><ul><li><strong>Changing Content</strong></li></ul></ul>"},{text:"<ul><ul>The <code>innerHTML</code> and <code>textContent</code> properties allow you to get or set the content of an element.</ul></ul>"},{text:"<ul><ul>Use <code>innerHTML</code> when you need to include HTML markup dynamically or you're manipulating templates or updating structures within the DOM.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_6",exampleid:"js_9_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>Use <code>textContent</code> when you only need to update the text content of an element or you want to ensure that any HTML code provided by the user is not parsed and executed, enhancing security.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_7",exampleid:"js_9_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Changing Styles</strong></li></ul></ul>"},{text:"<ul><ul>You can modify an element's style by changing its <code>style</code> property.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_8",exampleid:"js_9_2_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>You can use the <code>classList</code> property to add or remove CSS classes from an element.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_9",exampleid:"js_9_2_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Changing Attributes</strong></li></ul></ul>"},{text:"<ul><ul>Attributes like <code>src</code>, <code>href</code>, and <code>id</code> can be modified using <code>getAttribute()</code>, <code>setAttribute()</code>, and <code>removeAttribute()</code>.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_10",exampleid:"js_9_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Creating Nodes</strong></li></ul></ul>"},{text:"<ul><ul>Use the <code>createElement()</code> method to create a new element, and <code>createTextNode()</code> to create a text node.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_11",exampleid:"js_9_2_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Appending Nodes</strong></li></ul></ul>"},{text:"<ul><ul>After creating a node, you can append it to an existing node in the DOM. There are multiple ways to do this:</ul></ul>"},{text:"<ul><ul>The <code>appendChild()</code> method adds a node as the last child of a parent node. If the node already exists in the document, it is moved from its current position to the new position.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_12",exampleid:"js_9_2_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>This method returns the appended child.</ul></ul>"},{text:"<ul><ul>The <code>append()</code> method is similar to <code>appendChild()</code>, but it allows you to append multiple nodes and strings. Unlike <code>appendChild()</code>, <code>append()</code> does not return the appended child.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_13",exampleid:"js_9_2_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>If you want to insert a node at a specific position within a parent node, rather than simply appending it to the end, you can use the <code>insertBefore()</code> method.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_14",exampleid:"js_9_2_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>This will insert <code>newElement</code> before the first child of <code>parentElement</code>. If the second parameter is null, <code>insertBefore()</code> works like <code>appendChild()</code>.</ul></ul>"},{text:"<ul><ul>The <code>before()</code>, <code>after()</code>, and <code>replaceWith()</code> methods are modern alternatives. These methods allow more direct manipulation of nodes relative to other nodes:</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_15",exampleid:"js_9_2_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"",codeConfig:{codeid:"js_9_2_16",exampleid:"js_9_2_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"",codeConfig:{codeid:"js_9_2_17",exampleid:"js_9_2_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Removing Nodes</strong></li></ul></ul>"},{text:"<ul><ul>You can remove DOM nodes, using <code>removeChild()</code> or <code>remove()</code> methods.</ul></ul>"},{text:"<ul><ul>The <code>removeChild()</code> method is used to remove a child node from the DOM and requires two steps: selecting the parent of the node to be removed and then removing the target child node.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_18",exampleid:"js_9_2_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>remove()</code> method simplifies the removal process by allowing you to directly remove a node without having to explicitly select its parent. This method is part of the modern DOM API and may not be available in very old browsers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_19",exampleid:"js_9_2_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Traversing Nodes</strong></li></ol>'},{text:"<ul>Traversing the DOM involves moving through the hierarchy of elements to select specific elements based on their relationship to a starting element:</ul>"},{text:"<ul><ul><li><strong>Parent Nodes</strong></li></ul></ul>"},{text:"<ul><ul>You can access a parent node with the <code>parentNode</code> or access a parent element node with <code>parentElement</code> property.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_20",exampleid:"js_9_2_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>parentElement</code> property returns the DOM node's parent element, or null if the parent node is not an element node. This means it specifically targets Element nodes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_21",exampleid:"js_9_2_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>parentNode</code> property allows you to access all child nodes of an element, including text nodes and element nodes.</ul></ul>"},{text:"<ul><ul><li><strong>Child Nodes</strong></li></ul></ul>"},{text:"<ul><ul>Access child nodes using <code>childNodes</code>, <code>children</code>, <code>firstChild</code>, <code>lastChild</code>, <code>firstElementChild</code>, and <code>lastElementChild</code> properties.</ul></ul>"},{text:"<ul><ul>The <code>childNodes</code> property returns all child nodes, including text nodes and comment nodes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_22",exampleid:"js_9_2_22_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>children</code> property only returns elements that are HTML element nodes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_23",exampleid:"js_9_2_23_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>firstChild</code> and <code>lastChild</code> properties allow you to access the first and last child nodes of a specified element, respectively. It's important to note that these properties consider all types of nodes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_24",exampleid:"js_9_2_24_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>firstElementChild</code> nad <code>lastElementChild</code> properties allow you to directly access the first and last element children of a specified element, ignoring text nodes and comment nodes, focusing solely on elements.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_25",exampleid:"js_9_2_25_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Sibling Nodes</strong></li></ul></ul>"},{text:"<ul><ul>Siblings are nodes that share the same parent. Use <code>nextSibling</code>, <code>previousSibling</code>, <code>nextElementSibling</code>, and <code>previousElementSibling</code> properties to navigate between them.</ul></ul>"},{text:"<ul><ul>The <code>nextSibling</code> and <code>previousSibling</code> properties allow you to navigate between nodes that are direct siblings of each other, including element nodes, text nodes, and comment nodes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_26",exampleid:"js_9_2_26_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>The <code>nextElementSibling</code> and <code>previousElementSibling</code> properties allow for navigation between element siblings, specifically ignoring text nodes and comment nodes, focusing only on elements.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_27",exampleid:"js_9_2_27_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Understanding how to access, manipulate, and traverse the DOM is crucial for dynamic web development. It allows developers to create interactive and dynamic user experiences by programmatically updating the content, style, and structure of web pages. Through a combination of these techniques, developers can achieve complex behaviors and interactions on the web."}]},{secid:3,subtitle:"Handling DOM Events",paragraphs:[{text:"Handling DOM events is a fundamental aspect of creating interactive web pages. Events are actions or occurrences that happen in the system you are programming, which the system tells you about so you can respond to them in some way if desired. For example, events can be user actions like clicking a button, entering text in a form, moving the mouse, etc., or system-generated events like loading or unloading a page."},{text:"<ol><li><strong>Types of Events</strong></li></ol>"},{text:"<ul><ul><li><strong>Mouse Events</strong></li></ul></ul>"},{text:"<ul><ul>Mouse events are a fundamental part of interacting with web pages. They capture how the user interacts with the page using their mouse, allowing developers to implement interactive and dynamic content.</ul></ul>"},{text:"<ul><ul><ul><li><code>click</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Triggers when the mouse button is pressed and released on a single element.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_1",exampleid:"js_9_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>dblclick</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Triggers when the mouse button is clicked twice on an element quickly.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_2",exampleid:"js_9_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>mouseover</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Occurs when the mouse pointer is moved over an element.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_3",exampleid:"js_9_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>mouseout</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Occurs when the mouse pointer is moved out of an element.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_4",exampleid:"js_9_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>mousemove</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Triggers every time the mouse pointer moves while over an element.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_5",exampleid:"js_9_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>mousedown</code> and <code>mouseup</code></li></ul></ul></ul>"},{text:"<ul><ul><ul><code>mousedown</code> occurs when the mouse button is pressed down over an element, and <code>mouseup</code> occurs when the button is released.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_6",exampleid:"js_9_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><li><strong>Keyboard Events</strong></li></ul></ul>"},{text:"<ul><ul>Keyboard events are essential for capturing user interactions through the keyboard, enabling web applications to respond to user inputs in various ways.</ul></ul>"},{text:"<ul><ul><ul><li><code>keydown</code> and <code>keyup</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>keydown</code> event triggers when a key is pressed down. It's useful for detecting when a user starts pressing a key. The <code>keyup</code> event occurs when a key is released, after the keydown event. It can be used to detect the end of a key press</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_7",exampleid:"js_9_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>keypress</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Triggered when a key that produces a character value is pressed down. Note that this event is deprecated and not recommended for new web applications. Instead, use <code>keydown</code> or <code>keyup</code>.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_8",exampleid:"js_9_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><li><strong>Form Events</strong></li></ul></ul>"},{text:"<ul><ul>Form events play a crucial role in enhancing user interaction and data validation in web applications. Here's an overview of some frequently used form events.</ul></ul>"},{text:"<ul><ul><ul><li><code>submit</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>This event occurs when a form is submitted. It's often used to validate form data before sending it to the server.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_9",exampleid:"js_9_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>change</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Triggered when the value of an <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, or <code>&lt;textarea&gt;</code> element has been changed. It's useful for dynamic form handling or live validation.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_10",exampleid:"js_9_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>focus</code> and <code>blur</code></li></ul></ul></ul>"},{text:"<ul><ul><ul><code>focus</code> is triggered when an element gains focus, while <code>blur</code> occurs when an element loses focus. These events are useful for styling form elements and providing feedback to users.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_11",exampleid:"js_9_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>input</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>This event fires whenever the user types, pastes, or otherwise modifies the value of an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>. It's ideal for implementing real-time search or validation features.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_12",exampleid:"js_9_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><li><strong>Document and Window Events</strong></li></ul></ul>"},{text:"<ul><ul>Document and Window events are essential for managing the lifecycle of a web page, responding to user actions at the browser level, and modifying the page in response to changes in the environment.</ul></ul>"},{text:"<ul><ul><ul><li><code>DOMContentLoaded</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>DOMContentLoaded</code> event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_13",exampleid:"js_9_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>load</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>load</code> event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_14",exampleid:"js_9_3_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>resize</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>resize</code> event is fired when the document view (window) has been resized.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_15",exampleid:"js_9_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>scroll</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>scroll</code> event is fired when the document is being scrolled.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_16",exampleid:"js_9_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>beforeunload</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>beforeunload</code> event is fired when the window, the document and its resources are about to be unloaded.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_17",exampleid:"js_9_3_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><code>unload</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>unload</code> event is fired once a page has unloaded (or the browser window has been closed). This feature is deprecated and is not recommended to use.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_18",exampleid:"js_9_3_18_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:'<ol start="2"><li><strong>Handling Events</strong></i><ol>'},{text:"<ul>There are several ways to handle events in JavaScript:</ul>"},{text:"<ul><ul><li><strong>HTML Event Attributes</strong></li></ul></ul>"},{text:"<ul><ul>You can directly add event handlers in your HTML elements. This method is straightforward but not recommended for larger applications due to poor separation of concerns.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_19",exampleid:"js_9_3_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>When the event handler functions are called, <code>this</code> and <code>event</code> can be passed as arguments. <code>this</code> refers to the button element itself, allowing direct manipulation of its properties. The <code>event</code> object is passed explicitly, allowing access to its properties and methods within the function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_20",exampleid:"js_9_3_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>DOM Properties</strong></li></ul></ul>"},{text:"<ul><ul>Using HTML DOM properties to handle events in JavaScript involves directly setting event handlers on DOM elements within your JavaScript code. This method provides more flexibility and control compared to using HTML event attributes directly in the markup. It allows for cleaner separation of structure (HTML) and behavior (JavaScript), which is beneficial for maintainability and scalability of your code.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_21",exampleid:"js_9_3_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><code>addEventListener()</code> and <code>removeEventListener()</code></li></ul></ul>"},{text:"<ul><ul>The <code>addEventListener</code> method is used to attach an event handler to a specific DOM element. It allows you to specify the type of event to listen for (e.g., <code>click</code>, <code>keydown</code>, <code>resize</code>) and the function that should be executed when the event occurs. This method takes at least two arguments: the name of the event and the event handler function. Optionally, a third argument can be provided to indicate options such as whether the event should be captured or bubbled, or if the event listener should be executed only once.</ul></ul>"},{text:"<ul><ul>The <code>removeEventListener</code> method is used to detach an event handler from a DOM element. To successfully remove an event listener, you must pass the same parameters (event type and handler function reference) that were used to attach the event listener with <code>addEventListener</code>. This method ensures that an element stops reacting to specific events, which is particularly useful for improving performance, preventing unintended side effects, and managing dynamic content that may require event handlers to be added and removed as part of its lifecycle.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_22",exampleid:"js_9_3_22_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Event Object</strong></li></ol>'},{text:"<ul>The Event Object is a fundamental concept within the DOM that provides a way to represent events that take place in the DOM. An event can be anything from a user interaction (such as clicks, keyboard input, resizing the window) to browser-triggered notifications (like the completion of loading a page, or a video playing). The Event Object is passed as an argument to the event handler and contains properties and methods that allow developers to control the flow of events and retrieve information about the event.</ul>"},{text:"<ul><ul><li><strong>Key Properties</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><code>type</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>A string indicating the type of event (e.g., <code>click</code>, <code>keydown</code>, <code>load</code>).</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>target</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The element that triggered the event.</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>currentTarget</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The element that the event listener is currently attached to. This can be useful during event capturing and bubbling.</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>eventPhase</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Indicates the phase of the event flow (capturing, target, bubbling).bubbles: A boolean indicating whether the event bubbles up through the DOM.</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>cancelable</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>A boolean indicating whether the event's default action can be prevented.</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>defaultPrevented</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Indicates whether <code>preventDefault()</code> was called on the event.</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>timeStamp</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The time at which the event was created.</ul><ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_23",exampleid:"js_9_3_23_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><li><strong>Key Methods</strong></li></ul><ul></ul>"},{text:"<ul><ul><ul><li><code>preventDefault()</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Prevents the default action associated with the event (e.g., following a link URL).</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>stopPropagation()</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stops the event from bubbling up the event chain.</ul><ul></ul>"},{text:"<ul><ul><ul><li><code>stopImmediatePropagation()</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>Prevents any remaining event listeners from being called.</ul><ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_24",exampleid:"js_9_3_24_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"7.5rem"}},{text:"<ul><ul><li><strong>Event Flow</strong></li></ul></ul>"},{text:"<ul><ul>Events in the DOM flow through three phases:</ul></ul>"},{text:"<ul><ul><ul><li><strong>Capturing Phase</strong></li><ul></ul></ul>"},{text:"<ul><ul><ul>The event moves from the window to the target element's parent, checking for any capturing event listeners along the way.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Target Phase</strong></li><ul></ul></ul>"},{text:"<ul><ul><ul>The event reaches the target element and triggers any event handlers attached to it.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Bubbling Phase</strong></li><ul></ul></ul>"},{text:"<ul><ul><ul>The event bubbles up from the target element to the window, triggering any bubbling event listeners along the way.</ul></ul></ul>"},{text:"<ul><ul>You can choose to listen for events in either the capturing phase or the bubbling phase by setting the <code>useCapture</code> parameter in <code>addEventListener()</code>. If <code>useCapture</code> is set to true, the event handlers are executed in capturing phase. If <code>useCapture</code> is set to false (or omitted), the event handlers are executed in bubbling phase.</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_25",exampleid:"js_9_3_25_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Event Delegation</strong></li></ul>'},{text:"<ul><ul><li>Event delegation is a technique where you attach a single event listener to a parent element to handle events for its child elements.</li></ul></ul>"},{text:"<ul><ul><li>This approach is useful when you have a large number of dynamically created elements or when elements are added/removed dynamically from the DOM.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_4",exampleid:"js_9_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Handling DOM Events allows you to respond to user interactions, validate user input, trigger actions based on specific events, and create interactive web applications. By attaching event listeners to elements and writing appropriate event handler functions, you can control the behavior and functionality of your web page."}]},{secid:4,subtitle:"Dynamic HTML with JavaScript",paragraphs:[{text:"Dynamic HTML refers to the ability to create, modify, and update the content and structure of a web page dynamically using JavaScript. It allows you to change elements, update styles, manipulate data, and respond to user interactions in real-time. Here are some key techniques for working with dynamic HTML using JavaScript:"},{text:"<ol><li><strong>Maniplating Elements</strong></li></ol>"},{text:"<ul>Use the <code>createElement()</code> method to create new HTML elements programmatically.</ul>"},{text:"<ul>To modify the content of an element, you can use the <code>innerHTML</code> property or the <code>textContent</code> property.</ul>"},{text:"<ul>Use the <code>getAttribute()</code> and <code>setAttribute()</code> methods to get and set attribute values of an element.</ul>"},{text:"<ul>To add a newly created element as a child of another element, use the <code>appendChild()</code> method.</ul>"},{text:"<ul>Use the <code>removeChild()</code> method to remove an element from its parent.</ul>"},{text:"<ul>Use the <code>style</code> property to modify the CSS styles of an element.</ul>"},{text:"<ul>Attach event listeners to elements using the <code>addEventListener()</code> method to respond to user interactions.</ul>"},{text:'<ol start="2"><li><strong>Dynamic Data</strong></li></ol>'},{text:"<ul>JavaScript allows you to fetch data from external sources, such as APIs, and update the content of your web page dynamically.</ul>"},{text:"<ul>You can use AJAX or fetch API to make asynchronous HTTP requests and retrieve data.</ul>"},{text:"<ul>Once the data is retrieved, you can modify the DOM to display the data in the desired format.</ul>"},{text:"<ul>Here is an example:</ul>"},{text:"",codeConfig:{codeid:"js_9_4_1",exampleid:"js_9_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>Template Engines</strong></li></ol>'},{text:"<ul>Template engines like Handlebars, Mustache, or Underscore.js can be used to generate dynamic HTML by combining data and templates.</ul>"},{text:"<ul>These engines provide syntax and functionality to create reusable templates with placeholders that get replaced with actual data at runtime.</ul>"},{text:"By utilizing these techniques, you can create dynamic and interactive web applications that can update content, respond to user actions, fetch and display data dynamically, and provide a more engaging user experience. JavaScript's ability to manipulate the HTML DOM empowers you to build dynamic web pages that adapt and respond to changing requirements and user interactions."}]}]},{category:"js",chid:10,title:"Browser APIs",sections:[{secid:1,subtitle:"Working with Browser APIs",paragraphs:[{text:"Working with browser APIs allows you to access various features and functionalities provided by the web browser. Here are some commonly used browser APIs and how to work with them:"},{text:"<ol><li><strong>Geolocation API</strong></li></ol>"},{text:"<ul><ul><li>The Geolocation API allows you to retrieve the user's current geographical location.</li></ul></ul>"},{text:"<ul><ul><li>To use this API, you can call the <code>navigator.geolocation.getCurrentPosition()</code> method, which takes a success callback and an error callback as arguments.</li></ul></ul>"},{text:"<ul><ul><li>The success callback is invoked with a <code>Position</code> object containing the user's coordinates.<br/><br/>Here's an example of using the Geolocation API:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_1",exampleid:"js_10_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Browser Storage API</strong></li></ol>'},{text:"<ul><ul><li>The Browser Storage API provides a way to store key-value pairs locally in the browser.</li></ul></ul>"},{text:"<ul><ul><li>There are two types of browser storage available: <code>localStorage</code> and <code>sessionStorage</code>.</li></ul></ul>"},{text:"<ul><ul><li><code>localStorage</code> allows you to store data persistently across browser sessions, while <code>sessionStorage</code> stores data for the duration of the session.</li></ul></ul>"},{text:"<ul><ul><li>You can use the <code>setItem()</code>, <code>getItem()</code>, and <code>removeItem()</code> methods to interact with browser storage.<br/><br/>Here's an example of using <code>localStorage</code>:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_2",exampleid:"js_10_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Browser Clipboard API</strong></li></ol>'},{text:"<ul><ul><li>The Browser Clipboard API allows web applications to interact with the user's clipboard, enabling copying, cutting, and pasting content programmatically. This API provides methods and events to read data from the clipboard as well as to write data to it.</li></ul></ul>"},{text:"<ul><ul><li>Please note that clipboard access may have certain security and privacy implications, and browsers may have specific permissions or restrictions to ensure a safe user experience. Therefore, clipboard-related operations are generally only allowed in response to user interactions, such as clicks or keypresses.</li></ul></ul>"},{text:"<ul><ul><li>Copying Text to Clipboard: To copy text to the clipboard, you can use the <code>navigator.clipboard.writeText()</code> method. This method returns a Promise that resolves when the text is successfully copied to the clipboard.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Reading Text from Clipboard: To read text from the clipboard, you can use the <code>navigator.clipboard.readText()</code> method. This method returns a Promise that resolves with the text read from the clipboard. After copying, you can also use CTR+V in Windows or use CMD+V in macOS to past clipboard content to other applications.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_4",exampleid:"js_10_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Here are just a few examples of browser APIs, but there are many more available, such as the Fetch API for making HTTP requests, the Canvas API for drawing graphics, the Audio and Video APIs for working with multimedia, and many others. Each API has its own set of methods and properties, so it's important to refer to the specific documentation for each API to understand how to use them effectively in your applications."}]},{secid:2,subtitle:"Making HTTP Requests with AJAX",paragraphs:[{text:"AJAX (Asynchronous JavaScript and XML) is a technique used in web development to send and receive data from a server asynchronously without reloading the entire web page. It allows for dynamic and interactive web applications by enabling the retrieval and updating of data in the background. Here's an introduction to AJAX:"},{text:"<ol><li><strong>Asynchronous Requests</strong></li></pl>"},{text:"<ul><ul><li>AJAX enables making asynchronous requests to a server, which means that the browser can send a request to the server and continue working with other parts of the web page without waiting for a response.</li></ul></ul>"},{text:"<ul><ul><li>This allows for a smoother user experience as the web page remains responsive while data is being fetched or updated.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Creating and Using <code>XMLHttpRequest</code> Objects</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating an instance</strong>: To create a new <code>XMLHttpRequest</code> object, you can use the <code>new XMLHttpRequest()</code> constructor.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Configuring the request</strong>: After creating the object, you configure the request by specifying the HTTP method, URL, and other optional parameters.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Setting Headers (Optional)</strong>: If your request requires custom headers, you can set them using the <code>setRequestHeader</code> method.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Handling the Response</strong>: You need to set up a function to handle the response when the server responds. This function is assigned to the <code>onreadystatechange</code> event, and it will be called whenever the <code>readyState</code> of the request changes.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Sending the Request</strong>: After setting up the request and response handling, you send the request to the server.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_5",exampleid:"js_10_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Handling Errors</strong></li></ol>'},{text:"<ul><ul><li><strong>Creation and Initialization</strong>: When creating a new <code>XMLHttpRequest</code> object, it's essential to handle any potential errors during initialization. The initialization can fail due to security restrictions or if the browser does not support the <code>XMLHttpRequest</code> object. To handle this, you can use a <code>try-catch</code> block when creating the <code>XMLHttpRequest</code> instance.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Network Errors</strong>: During the request's execution, various network-related errors can occur, such as the server being unreachable, a timeout, or a failed connection. You can listen for the <code>onerror</code> event to catch these types of errors.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>HTTP Errors</strong>: After the request is sent and the server responds, there might be HTTP errors like 404 Not Found or 500 Internal Server Error. These errors are considered successful requests but unsuccessful responses. You can handle these errors by checking the status code of the response.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Timeout Handling</strong>: To avoid infinite waiting for a response, you can set a timeout for the request. If the timeout is exceeded, you can handle it as an error.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>Here is a complete example of error handling:</ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_10",exampleid:"js_10_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Updating Web Page Content</strong></li></pl>'},{text:"<ul><ul><li>AJAX enables you to update specific parts of a web page without reloading the entire page.</li></ul></ul>"},{text:"<ul><ul><li>You can use JavaScript to manipulate the DOM and update the content based on the received data.</li></ul></ul>"},{text:"<ul><ul><li>This allows for dynamic and interactive user interfaces, such as updating a list of items, live search suggestions, or real-time chat messages.</li></ul></ul>"},{text:"",codeConfig:{codeid:"",exampleid:"js_10_2_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"",exampleTitle:"Example",codeLangs:"",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"AJAX has revolutionized web development by providing a way to create more interactive and responsive web applications. It allows for data retrieval and updates in the background, reducing the need for full page reloads. The <code>XMLHttpRequest</code> object and Fetch API are commonly used to implement AJAX functionality in JavaScript applications."}]},{secid:3,subtitle:"Making HTTP Requests with the Fetch API",paragraphs:[{text:"The Fetch API is a modern JavaScript API that provides a built-in mechanism for making HTTP requests in the browser. It offers a more flexible and powerful alternative to traditional methods like <code>XMLHttpRequest</code>. Here's an overview of how to make HTTP requests using the Fetch API:"},{text:"<ol><li><strong>Basic Fetch Request</strong></li></ol>"},{text:"<ul><ul><li>To make a simple GET request, you can use the <code>fetch()</code> function and pass the URL as an argument.</li></ul></ul>"},{text:"<ul><ul><li>The <code>fetch()</code> function returns a Promise that resolves to the <code>Response</code> object representing the server's response.</li></ul></ul>"},{text:"<ul><ul><li>You can then use the <code>Response</code> object to process the response data.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_3_1",exampleid:"js_10_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Fetch Request Options</strong></li></ol>'},{text:"<ul><ul><li>The <code>fetch()</code> function accepts a second parameter for additional request options, such as the HTTP method, headers, and request body.</li></ul></ul>"},{text:"<ul><ul><li>You can pass an object with these options to customize the request. Here's a look at the properties often used within this object:</li></ul></ul>"},{text:"<ul><ul><ul><li><code>method</code></li></ul></ul></ul>"},{text:'<ul><ul><ul>The <code>method</code> property specifies the HTTP method the request will use. Common methods include GET for retrieving data, <code>"POST"</code> for submitting data to the server, <code>"PUT"</code> for updating resources, and <code>"DELETE"</code> for removing resources. The method you choose should correspond to the operation you\'re performing according to RESTful principles and the API\'s requirements.</ul></ul></ul>'},{text:"<ul><ul><ul><li><code>headers</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>headers</code> property lets you specify additional information for the request and response. This can include content type (<code>Content-Type: application/json</code>), authorization tokens (<code>Authorization: Bearer &lt;token&gt;</code>), and other metadata about the request. Headers can be defined as a simple object or using the <code>Headers</code> constructor for more complex scenarios, such as appending multiple values for the same header.</ul></ul></ul>"},{text:"<ul><ul><ul><li><code>body</code></li></ul></ul></ul>"},{text:"<ul><ul><ul>The <code>body</code> property contains the data you want to send to the server. Its format and content depend on the operation you're performing. For instance, when sending JSON data, you'd stringify an object and set the appropriate <code>Content-Type</code> header. The <code>body</code> is ignored for GET and HEAD requests, as they do not include a body.</ul></ul></ul>"},{text:"<ul><ul><ul><li><code>mode</code></li></ul></ul></ul>"},{text:'<ul><ul><ul>The mode property is crucial for handling CORS (Cross-Origin Resource Sharing) requests. It defines whether the request can be made across different origins. <code>"cors"</code> allows cross-origin requests with proper CORS headers; <code>"no-cors"</code> is used for opaque responses from cross-origin requests without CORS headers; <code>"same-origin"</code> restricts requests to the same origin, preventing cross-origin requests.</ul></ul></ul>'},{text:"<ul><ul><ul><li><code>credentials</code></li></ul></ul></ul>"},{text:'<ul><ul><ul>The property <code>credentials</code> controls how cookies and other credentials are included with the request. <code>"omit"</code> excludes credentials, <code>"same-origin"</code> includes them for requests to the same domain, and <code>"include"</code> sends credentials even for cross-origin requests. This setting is vital for ensuring that user sessions and authentication tokens are correctly handled.</ul></ul></ul>'},{text:"<ul><ul><ul><li><code>cache</code></li></ul></ul></ul>"},{text:'<ul><ul><ul>Caching strategies dictate how the browser caches the response. <code>"default"</code> lets the browser decide the best caching strategy; <code>"no-store"</code> forces the request not to be cached; <code>"reload"</code> bypasses the cache; <code>"no-cache"</code> forces validation of the cached response; <code>"force-cache"</code> uses the cache even if the response is stale; <code>"only-if-cached"</code> uses the cache but doesn\'t initiate a network request.</ul></ul></ul>'},{text:"<ul><ul><ul><li><code>redirect</code></li></ul></ul></ul>"},{text:'<ul><ul><ul>Redirect handling lets you specify how to handle HTTP redirects. <code>"follow"</code> automatically follows redirects (up to 20 by default), <code>"error"</code> throws an error if a redirect occurs, and <code>"manual"</code> lets you handle redirects manually, useful in certain security-sensitive applications.</ul></ul></ul>'},{text:"",codeConfig:{codeid:"js_10_3_2",exampleid:"js_10_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:'<ol start="3"><li><strong>Handling the Response</strong></li></ol>'},{text:"<ul><ul><li>The <code>Response</code> object provides several methods to access and process the response data.</li></ul></ul>"},{text:"<ul><ul><li>You can use methods like <code>json()</code> to parse the response as JSON, <code>text()</code> to get the response as plain text, and <code>blob()</code> to retrieve the response as a Blob object.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Handling Errors</strong></li></ol>'},{text:"<ul><ul><li>If the server responds with an error status code (e.g., 404, 500), the <code>fetch()</code> Promise will still resolve successfully.</li></ul></ul>"},{text:"<ul><ul><li>You can check the <code>ok</code> property of the <code>Response</code> object to determine if the request was successful.</li></ul></ul>"},{text:"<ul><ul><li>If the request was not successful, you can throw an error or handle it as needed.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_3_3",exampleid:"js_10_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"The Fetch API provides a powerful and flexible way to make HTTP requests in JavaScript. It supports a variety of request options, handles responses in different formats, and allows for error handling. It is widely supported in modern browsers and is a recommended approach for performing HTTP requests in client-side JavaScript applications."}]}]},{category:"js",chid:11,title:"Debugging and Error Handling",sections:[{secid:1,subtitle:"Debugging Techniques and Tools",paragraphs:[{text:"Debugging is an essential skill in software development, including JavaScript. It involves identifying and resolving issues or bugs in your code. Here are some common debugging techniques and tools that can help you in the process:"},{text:"<ol><li><strong>Console Logging</strong></li></ol>"},{text:"<ul>Console logging is a basic but effective debugging technique.</ul>"},{text:"<ul>Use <code>console.log()</code> to output values or messages to the browser's console.</ul>"},{text:"<ul>You can log variables, function outputs, or any other relevant information to track the flow of your code and identify potential issues.</ul>"},{text:'<ol start="2"><li><strong>Debugging with breakpoints</strong></li></ol>'},{text:"<ul>Most modern web browsers come with built-in developer tools that include debugging capabilities.</ul>"},{text:"<ul>You can set breakpoints directly in your code, which pauses the execution when reached, allowing you to inspect variables, step through code, and analyze the program state.</ul>"},{text:"<ul>By using breakpoints, you can narrow down the problematic sections of your code and understand how it executes.</ul>"},{text:'<ol start="3"><li><strong>Step-by-step Execution</strong></li></ol>'},{text:"<ul>Debugging tools provide options to step through your code line by line.</ul>"},{text:'<ul>You can use features like "step over" to move to the next line of code, "step into" to enter a function call and debug its execution, and "step out" to complete the current function and return to its caller.</ul>'},{text:"<ul>Stepping through the code can help you understand the flow and identify any unexpected behavior or errors.</ul>"},{text:'<ol start="4"><li><strong>Inspecting Variables and Objects</strong></li></ol>'},{text:"<ul>Debugging tools allow you to inspect the values of variables and objects at any given point during program execution.</ul>"},{text:"<ul>You can add variables to the watch list to track their values as you step through the code.</ul>"},{text:"<ul>Inspecting variables can help you identify incorrect values, unexpected changes, or null/undefined values that might be causing issues.</ul>"},{text:'<ol start="5"><li><strong>Error Messages and Stack Traces</strong></li></ol>'},{text:"<ul>When an error occurs, JavaScript throws an error object with a descriptive message and a stack trace.</ul>"},{text:"<ul>Pay attention to error messages as they often provide valuable information about the cause of the problem.</ul>"},{text:"<ul>The stack trace shows the sequence of function calls that led to the error, allowing you to trace back the issue to its origin.</ul>"},{text:'<ol start="6"><li><strong>Debugging Tools</strong></li></ol>'},{text:"<ul>Modern web browsers, such as Chrome, Firefox, and Safari, provide developer tools that include comprehensive debugging capabilities.</ul>"},{text:"<ul>These tools offer a range of features, including breakpoints, step-by-step execution, console logging, network monitoring, and DOM inspection.</ul>"},{text:"<ul>Familiarize yourself with the debugging features available in your preferred browser's developer tools.</ul>"},{text:"<ul>You can also put the <code>debugger</code> statement before the code to be checked. It works as setting a breakpoint and triggers any available debugging functionality. The statement has no effect if debugging functionality is unavailable.</ul>"},{text:'<ol start="7"><li><strong>Linting and Code Analysis</strong></li></ol>'},{text:"<ul>Utilize linting tools and code analysis tools like ESLint, JSLint, or JSHint.</ul>"},{text:"<ul>These tools can help identify potential issues in your code, such as syntax errors, unused variables, or code style violations, before even running the code.</ul>"},{text:'<ol start="8"><li><strong>Logging and Error Handling</strong></li></ol>'},{text:"<ul>Implement proper logging and error handling mechanisms in your code.</ul>"},{text:"<ul>Use <code>try-catch</code> blocks to catch and handle errors gracefully.</ul>"},{text:"<ul>Log errors and relevant information to aid in troubleshooting and debugging in production environments.</ul>"},{text:"Remember that debugging is a skill that improves with practice. By utilizing these techniques and tools effectively, you can efficiently identify and fix issues in your JavaScript code, leading to more robust and reliable applications."}]},{secid:2,subtitle:"Common JavaScript Errors and How to Handle Them",paragraphs:[{text:"JavaScript code can encounter various errors during execution. Here are some common JavaScript errors and how to handle them:"},{text:"<ol><li><strong>Syntax Errors</strong></li></ol>"},{text:"<ul>Syntax errors occur when there is a mistake in the syntax of your code.</ul>"},{text:"<ul>JavaScript engines will throw a syntax error and halt the execution of the code.</ul>"},{text:"<ul>To handle syntax errors, carefully review your code for typos, missing brackets, semicolons, or incorrect function parameters.</ul>"},{text:'<ol start="2"><li><strong>Reference Errors</strong></li></ol>'},{text:"<ul>Reference errors occur when you try to access a variable or function that is not defined.</ul>"},{text:"<ul>To handle reference errors, ensure that all variables and functions are properly declared and in scope.</ul>"},{text:"<ul>You can use conditional statements or <code>try-catch</code> blocks to handle cases where certain variables may be undefined or null.</ul>"},{text:'<ol start="3"><li><strong>Type Errors</strong></li></ol>'},{text:"<ul>Type errors occur when you perform an operation on a value of an incorrect type.</ul>"},{text:"<ul>Common type errors include trying to call a non-function, accessing a property of an undefined or null value, or using an operator on incompatible types.</ul>"},{text:"<ul>To handle type errors, check the types of values before performing operations and use conditional statements or <code>try-catch</code> blocks to handle exceptions.</ul>"},{text:'<ol start="4"><li><strong>Range Errors</strong></li></ol>'},{text:"<ul>Range errors occur when you use an invalid value within an acceptable range.</ul>"},{text:"<ul>For example, using an invalid index to access an array element or providing an invalid argument to a function.</ul>"},{text:"<ul>To handle range errors, validate input values and use conditional statements or <code>try-catch</code> blocks to handle out-of-range cases.</ul>"},{text:'<ol start="5"><li><strong>Network Errors</strong></li></ol>'},{text:"<ul>Network errors occur when there is a problem with network connectivity or when making HTTP requests.</ul>"},{text:"<ul>These errors can include failed requests, timeouts, or CORS (Cross-Origin Resource Sharing) issues.</ul>"},{text:'<ul>To handle network errors, please refer to Sections "Making HTTP requests with AJAX" and "Making HTTP requests with the Fetch API" in Chapter 10.</ul>'},{text:'<ol start="6"><li><strong>Error Objects</strong></li></ol>'},{text:"<ul>JavaScript provides built-in error objects like <code>Error</code>, <code>TypeError</code>, <code>ReferenceError</code>, etc., that can be used to catch and handle specific types of errors.</ul>"},{text:"<ul>You can use the <code>try-catch-finally</code> statement to catch errors and handle them gracefully.</ul>"},{text:"<ul>The <code>catch</code> block can include code to handle the error, log error messages, or display user-friendly error messages.</ul>"},{text:"<ul>The <code>finally</code> block is executed regardless whether an exception is thrown or caught. This block is optional.</ul>"},{text:"<ul>Example of handling errors using <code>try-catch-finally</code>:</ul>"},{text:"",codeConfig:{codeid:"js_11_2_1",exampleid:"js_11_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"It's important to handle errors gracefully in your JavaScript code to prevent application crashes and provide a better user experience. Proper error handling includes logging errors for debugging purposes, displaying meaningful error messages to users, and implementing fallback mechanisms when necessary. By understanding and effectively handling common JavaScript errors, you can improve the robustness and reliability of your code."}]}]},{category:"js",chid:12,title:"JavaScript Best Practices",sections:[{secid:1,subtitle:"Code Organization and Modularization",paragraphs:[{text:"Code organization and modularization are crucial for writing maintainable, scalable, and reusable JavaScript applications. They help improve code readability, reduce complexity, and facilitate collaboration among team members. Here are some guidelines for code organization and modularization:"},{text:"<ol><li><strong>File and Directory Structure</strong></li></ol>"},{text:"<ul>Start by organizing your code into logical directories and files based on functionality or modules.</ul>"},{text:"<ul>Separate different concerns, such as UI components, data models, utility functions, or API interactions, into separate files or directories.</ul>"},{text:"<ul>Consider using a consistent naming convention, such as lowercase filenames or kebab-case, to make it easier to navigate and find files.</ul>"},{text:'<ol start="2"><li><strong>Modular JavaScript</strong></li></ol>'},{text:"<ul>Break your code into modules, which are self-contained units that encapsulate related functionality.</ul>"},{text:"<ul>Each module should have a clear purpose and responsibility.</ul>"},{text:"<ul>Encapsulate related variables, functions, and classes within a module and export only the necessary interface.</ul>"},{text:"<ul>Use the module pattern (e.g., using functions or classes) to encapsulate code and prevent polluting the global namespace.</ul>"},{text:'<ol start="3"><li><strong>Dependency Management</strong></li></ol>'},{text:"<ul>Use a dependency management system or module bundler, such as npm (Node Package Manager) or webpack, to manage external dependencies and package your code.</ul>"},{text:"<ul>Define dependencies in a separate file (e.g., <code>package.json</code>) and use tools to install and manage them automatically.</ul>"},{text:"<ul>This allows you to easily add, update, and remove dependencies without manually managing files.</ul>"},{text:'<ol start="4"><li><strong>Separation of Concerns</strong></li></ol>'},{text:"<ul>Follow the principle of separation of concerns, which promotes dividing your code into distinct sections that handle different aspects of your application.</ul>"},{text:"<ul>Keep your UI, business logic, and data management separate.</ul>"},{text:"<ul>For example, separate HTML, CSS, and JavaScript code into their respective files or directories.</ul>"},{text:'<ol start="5"><li><strong>Use Modules or Module Systems</strong></li></ol>'},{text:"<ul>Utilize JavaScript module systems like CommonJS or ES modules (import/export) to encapsulate and organize your code into reusable modules.</ul>"},{text:"<ul>Modules allow you to declare dependencies and import/export specific parts of the code.</ul>"},{text:"<ul>This promotes code reuse, maintainability, and testability.</ul>"},{text:'<ol start="6"><li><strong>Modular Development Frameworks</strong></li></ol>'},{text:"<ul>Consider using modular development frameworks/libraries like React, Vue.js, or Angular, which provide built-in mechanisms for organizing and modularizing code.</ul>"},{text:"<ul>These frameworks typically encourage component-based development, where UI components encapsulate their own logic and can be easily reused.</ul>"},{text:'<ol start="7"><li><strong>Documentation and Comments</strong></li></ol>'},{text:"<ul>Document your code to provide clear explanations of its purpose, usage, and any dependencies.</ul>"},{text:"<ul>Use meaningful variable and function names to improve code readability.</ul>"},{text:"<ul>Include comments where necessary to provide additional context or explanations for complex code sections.</ul>"},{text:'<ol start="8"><li><strong>Code Linting</strong></li></ol>'},{text:"<ul>Use a code linter like ESLint to enforce consistent code style and catch potential errors or anti-patterns.</ul>"},{text:"<ul>Linting rules can help maintain a clean and standardized codebase, improving readability and reducing the chance of bugs.</ul>"},{text:"Remember, the specific organization and modularization techniques may vary depending on the project's size, complexity, and development environment. Adapt and adopt best practices based on the specific requirements and guidelines of your project or development team. Consistency and readability should be key considerations when organizing and modularizing your JavaScript code."}]},{secid:2,subtitle:"Naming Conventions and Coding Style",paragraphs:[{text:"Naming conventions and coding style are important aspects of writing clean, readable, and maintainable JavaScript code. Consistent naming and coding style make it easier for developers to understand and collaborate on a project. While different teams or projects may have their specific conventions, here are some common guidelines:"},{text:"<ol><li><strong>Variable and Function Names</strong></li></ol>"},{text:"<ul>Use descriptive and meaningful names that accurately represent the purpose or content of the variable or function.</ul>"},{text:"<ul>Favor readability over brevity. Avoid overly abbreviated or cryptic names that can be confusing.</ul>"},{text:"<ul>Use camelCase for variables and functions (e.g., <code>myVariable</code>, <code>calculateSum</code>).</ul>"},{text:"<ul>Be consistent with naming conventions throughout your codebase.</ul>"},{text:'<ol start="2"><li><strong>Constants</strong></li></ol>'},{text:"<ul>Use uppercase letters and underscores for constants (e.g., <code>MAX_COUNT</code>, <code>API_URL</code>).</ul>"},{text:"<ul>Constants should represent values that are not intended to be changed.</ul>"},{text:'<ol start="3"><li><strong>Classes and Constructor Functions</strong></li></ol>'},{text:"<ul>Use PascalCase (also known as UpperCamelCase) for class names (e.g., <code>Person</code>, <code>Car</code>).</ul>"},{text:"<ul>Use descriptive names that accurately represent the class's purpose or functionality.</ul>"},{text:'<ol start="4"><li><strong>Functions and Methods</strong></li></ol>'},{text:"<ul>Use camelCase for function and method names.</ul>"},{text:"<ul>Choose verbs or verb phrases that describe the action performed by the function or method (e.g., <code>getUser</code>, <code>calculateTotal</code>).</ul>"},{text:'<ol start="5"><li><strong>Comments</strong></li></ol>'},{text:"<ul>Use comments to provide explanations, clarify complex code sections, or document the purpose and usage of functions or classes.</ul>"},{text:"<ul>Write comments that add value and improve code understanding, avoiding redundant or obvious comments.</ul>"},{text:"<ul>Use consistent formatting for comments across your codebase.</ul>"},{text:'<ol start="6"><li><strong>Indentation and Formatting</strong></li></ol>'},{text:"<ul>Use consistent indentation (e.g., two spaces or four spaces) for blocks of code within functions, loops, conditionals, etc.</ul>"},{text:"<ul>Choose a consistent code formatting style for elements like curly braces, line breaks, and spacing.</ul>"},{text:"<ul>Consistent formatting helps improve code readability and maintainability.</ul>"},{text:'<ol start="7"><li><strong>Line Length and Wrapping</strong></li></ol>'},{text:"<ul>Limit lines to a reasonable length (e.g., 80-120 characters) for improved readability.</ul>"},{text:"<ul>Wrap long lines by breaking them into multiple lines.</ul>"},{text:"<ul>Break lines at logical points (e.g., after a comma or operator) to maintain readability.</ul>"},{text:'<ol start="8"><li><strong>Parentheses and Brackets</strong></li></ol>'},{text:"<ul>Use parentheses and brackets consistently and place them in a readable manner.</ul>"},{text:"<ul>Avoid unnecessary or redundant parentheses or brackets.</ul>"},{text:'<ol start="9"><li><strong>Operator Spacing</strong></li></ol>'},{text:"<ul>Add spaces around operators to improve readability (e.g., <code>x = 5 + 2;</code>, <code>if (condition) { ... }</code>).</ul>"},{text:"<ul>However, don't overuse spaces to the extent that it hampers readability.</ul>"},{text:'<ol start="10"><li><strong>Consistency and Team Guidelines</strong></li></ol>'},{text:"<ul>Consistency is key. Follow the established coding conventions and style guidelines of your project or team.</ul>"},{text:"<ul>If working with a team, agree on a set of coding style guidelines and adhere to them for consistent code across the project.</ul>"},{text:"Remember, these guidelines are not set in stone, and different projects or teams may have their own preferences. The most important aspect is to be consistent within your codebase and collaborate with your team to establish and follow agreed-upon conventions."}]},{secid:3,subtitle:"Performance Optimization Tips",paragraphs:[{text:"When it comes to performance optimization in JavaScript, there are several techniques and best practices that can help improve the speed and efficiency of your code. Here are some performance optimization tips:"},{text:"<ol><li><strong>Minimize and Bundle Code</strong></li></ol>"},{text:"<ul>Minify and bundle your JavaScript code using tools like UglifyJS or Webpack.</ul>"},{text:"<ul>Minification removes unnecessary characters (whitespace, comments) to reduce file size.</ul>"},{text:"<ul>Bundling combines multiple files into a single file, reducing the number of HTTP requests required.</ul>"},{text:'<ol start="2"><li><strong>Avoid Global Variables</strong></li></ol>'},{text:"<ul>Minimize the use of global variables as they can lead to naming conflicts and hinder performance.</ul>"},{text:"<ul>Declare variables with appropriate scope (e.g., local to functions or modules) to reduce global namespace pollution.</ul>"},{text:'<ol start="3"><li><strong>Optimize Loops</strong></li></ol>'},{text:"<ul>Optimize loops by reducing the number of iterations and avoiding unnecessary operations within the loop.</ul>"},{text:"<ul>Consider using techniques like loop unrolling or loop inversion to optimize specific scenarios.</ul>"},{text:'<ol start="4"><li><strong>Use Efficient Data Structures and Algorithms</strong></li></ol>'},{text:"<ul>Choose appropriate data structures and algorithms for your specific use case.</ul>"},{text:"<ul>Use efficient data structures like arrays or maps for fast element access or lookup.</ul>"},{text:"<ul>Employ algorithms with optimal time complexity to ensure efficient processing.</ul>"},{text:'<ol start="5"><li><strong>Cache DOM Queries</strong></li></ol>'},{text:"<ul>Minimize the number of DOM queries, as they can be expensive operations.</ul>"},{text:"<ul>Cache repeated DOM queries in variables to avoid redundant lookups.</ul>"},{text:"<ul>Use techniques like event delegation to reduce the number of event listeners attached to individual elements.</ul>"},{text:'<ol start="6"><li><strong>Debouncing and Throttling</strong></li></ol>'},{text:"<ul>Implement debouncing and throttling techniques to optimize event handling and reduce unnecessary function calls.</ul>"},{text:"<ul>Debouncing limits the frequency of a function call to improve performance in scenarios like resizing or scrolling events.</ul>"},{text:"<ul>Throttling limits the number of function invocations within a specific time frame, especially for events like mouse movement or keyboard input.</ul>"},{text:'<ol start="7"><li><strong>Use Efficient Selectors</strong></li></ol>'},{text:"<ul>When selecting elements using JavaScript libraries like jQuery, use efficient selectors to minimize the search time.</ul>"},{text:"<ul>Prefer ID selectors (<code>#id</code>) or class selectors (<code>.class</code>) over complex CSS selectors.</ul>"},{text:'<ol start="8"><li><strong>Asynchronous Operations</strong></li></ol>'},{text:"<ul>Offload time-consuming tasks or operations to asynchronous functions or workers.</ul>"},{text:"<ul>Use asynchronous techniques like Promises, async/await, or Web Workers to prevent blocking the main thread and improve responsiveness.</ul>"},{text:'<ol start="9"><li><strong>Optimize Network Requests</strong></li></ol>'},{text:"<ul>Minimize the number of network requests by combining resources, using caching techniques, or lazy loading.</ul>"},{text:"<ul>Optimize the size of transferred data by compressing files (e.g., using Gzip) and optimizing images.</ul>"},{text:'<ol start="10"><li><strong>Profiling and Benchmarking</strong></li></ol>'},{text:"<ul>Use profiling and benchmarking tools to identify performance bottlenecks in your code.</ul>"},{text:"<ul>Tools like Chrome DevTools, Lighthouse, or performance profiling libraries can help pinpoint areas that require optimization.</ul>"},{text:'<ol start="11"><li><strong>Memory Management</strong></li></ol>'},{text:"<ul>Be mindful of memory usage and manage memory efficiently.</ul>"},{text:"<ul>Avoid memory leaks by properly releasing resources, removing event listeners to deallocate memory when no longer needed.</ul>"},{text:"<ul>Use techniques like object pooling or memory reuse for performance-critical scenarios.</ul>"},{text:'<ol start="12"><li><strong>Use Web Workers</strong></li></ol>'},{text:"<ul>Utilize Web Workers to offload heavy computations or operations to separate threads, allowing the main thread to remain responsive.</ul>"},{text:"Remember, before optimizing code for performance, it's important to identify the specific areas that require optimization through profiling and testing. Optimize where it matters most and focus on improving the critical parts of your application rather than prematurely optimizing every line of code."}]},{secid:4,subtitle:"Security Considerations",paragraphs:[{text:"When developing JavaScript applications, it's essential to consider security aspects to protect user data, prevent vulnerabilities, and ensure a secure user experience. Here are some important security considerations for JavaScript development:"},{text:"<ol><li><strong>Input Validation and Sanitization</strong></li></ol>"},{text:"<ul>Validate and sanitize all user input to prevent injection attacks and other security vulnerabilities.</ul>"},{text:"<ul>Use server-side validation in addition to client-side validation to ensure data integrity.</ul>"},{text:'<ol start="2"><li><strong>Cross-Site Scripting (XSS) Prevention</strong></li></ol>'},{text:"<ul>Guard against XSS attacks by properly encoding and escaping user-generated content before rendering it in HTML templates or dynamically updating the DOM.</ul>"},{text:"<ul>Avoid using <code>innerHTML</code> or similar methods when injecting user-generated content.</ul>"},{text:'<ol start="3"><li><strong>Cross-Site Request Forgery (CSRF) Protection</strong></li></ol>'},{text:"<ul>Implement measures to prevent CSRF attacks by adding CSRF tokens to forms and validating them on the server-side.</ul>"},{text:"<ul>Ensure that sensitive operations, such as modifying user data or performing financial transactions, require additional authentication and authorization.</ul>"},{text:'<ol start="4"><li><strong>Secure Communication</strong></li></ol>'},{text:"<ul>Use secure communication protocols (HTTPS) to encrypt data transmitted between the client and server, preventing eavesdropping and tampering.</ul>"},{text:"<ul>Avoid transmitting sensitive information, such as passwords or authentication tokens, over insecure channels.</ul>"},{text:'<ol start="5"><li><strong>Secure Authentication and Authorization</strong></li></ol>'},{text:"<ul>Implement secure authentication mechanisms, such as using industry-standard hashing algorithms (e.g., bcrypt) to store and verify user passwords.</ul>"},{text:"<ul>Use strong session management practices, including securely storing session tokens and implementing session expiration.</ul>"},{text:"<ul>Apply appropriate authorization checks to ensure that users can access only the resources they are authorized to access.</ul>"},{text:'<ol start="6"><li><strong>Secure Storage and Data Handling</strong></li></ol>'},{text:"<ul>Handle sensitive data carefully, using encryption and secure storage mechanisms to protect user information, such as passwords or personal data.</ul>"},{text:"<ul>Avoid storing sensitive information in client-side storage mechanisms, such as cookies or local storage, unless necessary.</ul>"},{text:"<ul>Follow best practices for data protection and adhere to relevant data protection regulations, such as GDPR.</ul>"},{text:'<ol start="7"><li><strong>Secure Third-Party Libraries and APIs</strong></li></ol>'},{text:"<ul>Check and regularly update third-party libraries and APIs used in your application to address security vulnerabilities.</ul>"},{text:"<ul>Only use trusted and well-maintained libraries from reputable sources.</ul>"},{text:'<ol start="8"><li><strong>Regular Security Updates and Patches</strong></li></ol>'},{text:"<ul>Stay informed about security vulnerabilities and updates related to JavaScript libraries, frameworks, and tools used in your project.</ul>"},{text:"<ul>Regularly update your dependencies and apply security patches to protect against known vulnerabilities.</ul>"},{text:'<ol start="9"><li><strong>Error Handling and Logging</strong></li></ol>'},{text:"<ul>Implement proper error handling and logging mechanisms to monitor and identify potential security issues.</ul>"},{text:"<ul>Be cautious about exposing sensitive error information to prevent information leakage.</ul>"},{text:'<ol start="10"><li><strong>Access Control and Privilege Escalation</strong></li></ol>'},{text:"<ul>Implement appropriate access controls and permissions to restrict user actions and prevent unauthorized access to resources.</ul>"},{text:"<ul>Be mindful of privilege escalation vulnerabilities, where an attacker gains higher privileges than intended.</ul>"},{text:'<ol start="11"><li><strong>Security Auditing and Penetration Testing</strong></li></ol>'},{text:"<ul>Conduct security audits and penetration testing to identify vulnerabilities and weaknesses in your application.</ul>"},{text:"<ul>Regularly review and assess the security of your codebase and infrastructure.</ul>"},{text:'<ol start="12"><li><strong>User Education and Security Best Practices</strong></li></ol>'},{text:"<ul>Educate your users about security best practices, such as using strong passwords, avoiding sharing sensitive information, and being cautious of phishing attacks.</ul>"},{text:"<ul>Implement security features like two-factor authentication (2FA) to enhance user account security.</ul>"},{text:"Remember, security is an ongoing process, and it's crucial to stay updated on the latest security practices, vulnerabilities, and mitigation techniques. Follow secure coding practices, regularly review and test your application's security, and seek professional guidance when necessary."}]}]}];var l=n(4650),Ln=n(4214);let Tn=(()=>{class t{constructor(o){this.coreService=o}ngOnInit(){this.coreService.sentBookData(Sn)}ngOnDestroy(){}}return t.\u0275fac=function(o){return new(o||t)(l.Y36(Ln.p))},t.\u0275cmp=l.Xpm({type:t,selectors:[["app-js-book"]],decls:1,vars:0,template:function(o,jn){1&o&&l._UZ(0,"router-outlet")},dependencies:[p.lC]}),t})();function e(t){return`<!DOCTYPE html>\n  <html>\n  <head>\n    <style>\n      :root { font-size: 16px; }\n      a { text-decoration: none; }\n    </style>\n    <script src="assets/js/utils.js"><\/script>\n  </head>\n  <body>\n    <script>\n      ${t}\n    <\/script>\n  </body>\n  </html>`}const y="// Log a greeting message\nconsole.log('Hello, world!');",On=e(y),Cn="// Declare a variable named 'x' and initialize it with the value 5\nlet x = 5;",En="// This is a single-line comment",kn="/* This is a\nmulti-line comment */",Jn="// Declare a variable message and initialize it with the string 'Hello' \nlet message = 'Hello'; \n\n// Declare a constant PI and initialize it with the numeric value 3.14 \nconst PI = 3.14;",In="// Declare a variable number and initialize it with the numeric value 10 \nlet number = 10;        // number \n\n// Declare a variable name and initialize it with the string value 'Jane' \nlet name = 'Jane';      //string \n\n// Declare a variable isActive and initialize it with the boolean value true \nlet isActive = true;    // boolean \n\n// Declare a variable x without initializing it, resulting in an undefined value \nlet x;                  // undefined \n\n// Declare a variable y and initialize it with the null value to represent the absence of any object value \nlet y = null;           // null",Dn="// Declare an object obj with two properties: name with the value 'John' and age with the value 30 \nlet obj = { name: 'John', age: 30 }; // Object \n\n// Declare an array array containing three numeric elements: 1, 2, and 3 \nlet array = [1, 2, 3];               // Array",b="// Declare a constant userAge and initialize it with the numeric value 25 \nconst userAge = 25; \n\n// Check if userAge is greater than or equal to 18 \nif (userAge >= 18) { \n  // If the condition is true, log 'User is an adult.' \n  console.log('User is an adult.'); \n} else { \n  // If the condition is false, log 'User is a minor.' \n  console.log('User is a minor.'); \n}",An=e(b),v="// Start a for loop with the initialization of a variable i set to 0 \nfor (let i = 0; i < 5; i++) { \n  // For each iteration, check if i is less than 5; if true, execute the loop body \n  console.log(i); // Log the current value of i \n  // After each iteration, increment i by 1 using i++ \n}",Pn=e(v),j="// Define a function named greet that takes one parameter name \nfunction greet(name) { \n  // Return a greeting string concatenated with the name parameter \n  return 'Hello ' + name; \n}",w="console.log(greet('Alice')); // Output: Hello Alice",Rn=e(`${j} ${w}`),Nn="document.getElementById('myBtn').onclick = function() {\n  // Action to perform on button click\n};",S="// Define a function named func \nfunction func() { \n  'use strict'; // Enable strict mode for this function scope \n  \n  // Attempt to assign a value to x without declaring it first \n  x = 3.14; // This will cause an error because x is not declared \n} \n\n// Call the function func, which will attempt to execute its body \nfunc();",Mn=e(`try {\n  ${S}\n} catch (err) {\n  console.error(err)\n}`),Bn="// Declare a variable age and initialize it with the numeric value 35 \nlet age = 35;",Hn="// Declare a variable name and initialize it with the string value 'John' \nlet name = 'John';",Un="// Declare a variable isActive and initialize it with the boolean value true \nlet isActive = true;",zn="// Declare a variable car and initialize it with the null value \nlet car = null;",qn="// Declare a variable address and initialize it with the undefined value \nlet address = undefined;",Fn="// Declare a variable id and initialize it with a unique symbol \nlet id = Symbol();",Wn="// Declare an object person with properties name set to 'John' and age set to 25 \nlet person = { name: 'John', age: 25 };",Yn="// Declare a variable bigNumber and initialize it with a BigInt representation of 123456789 \nlet bigNumber = BigInt(123456789);",Vn="// Declare a variable age and initialize it with the numeric value 25 \nlet age = 25; \n\n// Declare a variable str and initialize it with a concatenated string that includes the age variable \nlet str = 'John is ' + age + ' years old.' // return 'John is 25 years old.'",$n="// Declare a variable age and initialize it with the numeric value 25 \nlet age = 25; \n\n// Declare a variable typeOfAge and use the typeof operator to get the data type of the age variable \nlet typeOfAge = typeof age; // return 'number'",Gn="// Declare an object person with properties name set to 'John' and age set to 25 \nlet person = { name: 'John', age: 25 }; \n\n// Declare a variable isInstance and use the instanceof operator to check if person is an instance of Object \nlet isInstance = person instanceof Object; // return true",L="// Use the assignment operator (=) to assign a value to the variable x \nlet x = 5; \n\n// Log the initial value of x \nconsole.log('Initial value of x: ', x); // Output: Initial value of x: 5",Xn=e(L),T="// Use the assignment operator (=) to assign the value 5 to the variable x \nlet x = 5; \n\n// Additional assignment operators: +=, -=, *=, /=, and %= \n\n// Add 3 to x and update x with the new value \nx += 3; // x is now x + 3 \nconsole.log('x += 3: ', x); // Output: x += 3: 8 \n\n// Subtract 2 from x and update x with the new value \nx -= 2; // x is now x - 2 \nconsole.log('x -= 2: ', x); // Output: x -= 2: 6 \n\n// Multiply x by 4 and update x with the new value \nx *= 4; // x is now x * 4 \nconsole.log('x *= 4: ', x); // Output: x *= 4: 24 \n\n// Divide x by 3 and update x with the new value \nx /= 3; // x is now x / 3 \nconsole.log('x /= 3: ', x); // Output: x /= 3: 8 \n\n// Calculate x modulo 5 (remainder of x divided by 5) and update x with the new value \nx %= 5; // x is now x % 5 \nconsole.log('x %= 5: ', x); // Output: x %= 5: 3",Kn=e(T),O="// Initialize two variables a and b with numeric values 10 and 4, respectively \nlet a = 10; \nlet b = 4; \n\n// Addition: Calculate the sum of a and b \nlet sum = a + b; \nconsole.log('Addition: ', sum); // Output: Addition: 14 \n\n// Subtraction: Calculate the difference between a and b \nlet difference = a - b; \nconsole.log('Subtraction: ', difference); // Output: Subtraction: 6 \n\n// Multiplication: Calculate the product of a and b \nlet product = a * b; \nconsole.log('Multiplication: ', product); // Output: Multiplication: 40 \n\n// Division: Calculate the quotient of a divided by b \nlet quotient = a / b; \nconsole.log('Division: ', quotient); // Output: Division: 2.5",Qn=e(O),C="// Initialize two variables a and b with numeric values 10 and 4, respectively \nlet a = 10; \nlet b = 4; \n\n// Modulo: Calculate the remainder of a divided by b \nlet remainder = a % b; \nconsole.log('Modulo: ', remainder); // Output: Modulo: 2",Zn=e(C),E="// Increment operation \n// Initialize a variable x with the numeric value 5 \nlet x = 5; \nx++; // Increment the value of x by 1 \nconsole.log('Increment: ', x); // Output: Increment: 6 \n\n// Decrement operation \n// Initialize a variable y with the numeric value 8 \nlet y = 8; \ny--; // Decrement the value of y by 1 \nconsole.log('Decrement: ', y); // Output: Decrement: 7",el=e(E),k="// Equal to (==) comparison \n// Initialize variables a with 5 and b with '5' (string) \nlet a = 5; \nlet b = '5'; \n// Check if a is equal to b (type conversion allowed) \nlet isEqual = a == b; \nconsole.log('Equal to (==): ', isEqual); // Output: Equal to (==): true \n\n// Not equal to (!=) comparison \n// Initialize variables c with 10 and d with 7 \nlet c = 10; \nlet d = 7; \n// Check if c is not equal to d \nlet notEqual = c != d; \nconsole.log('Not equal to (!=): ', notEqual); // Output: Not equal to (!=): true \n\n// Strict equal to (===) comparison \n// Initialize variables e and f both with the numeric value 5 \nlet e = 5; \nlet f = 5; \n// Check if e is strictly equal to f (no type conversion) \nlet isStrictEqual = e === f; \nconsole.log('Strict equal to (===): ', isStrictEqual); // Output: Strict equal to (===): true \n\n// Strict not equal to (!==) comparison \n// Initialize variables g with 10 and h with '10' (string) \nlet g = 10; \nlet h = '10'; \n// Check if g is strictly not equal to h (considering type) \nlet isStrictNotEqual = g !== h; \nconsole.log('Strict not equal to (!==): ', isStrictNotEqual); // Output: Strict not equal to (!==): true",tl=e(k),J="// Greater than (>) comparison \n// Initialize variables i with 8 and j with 5 \nlet i = 8; \nlet j = 5; \n// Check if i is greater than j \nlet isGreater = i > j; \nconsole.log('Greater than (>): ', isGreater); // Output: Greater than (>): true \n\n// Less than (<) comparison \n// Initialize variables k with 3 and l with 6 \nlet k = 3; \nlet l = 6; \n// Check if k is less than l \nlet isLess = k < l; \nconsole.log('Less than (<): ', isLess); // Output: Less than (<): true \n\n// Greater than or equal to (>=) comparison \n// Initialize variables m and n both with the numeric value 7 \nlet m = 7; \nlet n = 7; \n// Check if m is greater than or equal to n \nlet isGreaterOrEqual = m >= n; \nconsole.log('Greater than or equal to (>=): ', isGreaterOrEqual); // Output: Greater than or equal to (>=): true \n\n// Less than or equal to (<=) comparison \n// Initialize variables o with 9 and p with 12 \nlet o = 9; \nlet p = 12; \n// Check if o is less than or equal to p \nlet isLessOrEqual = o <= p; \nconsole.log('Less than or equal to (<=): ', isLessOrEqual); // Output: Less than or equal to (<=): true",ol=e(J),I="// Logical AND (&&) operation \n// Initialize variables a and b both with the boolean value true \nlet a = true; \nlet b = true; \n// Use the logical AND operator to determine the conjunction of a and b \nlet resultAND = a && b; \nconsole.log('Logical AND (&&): ', resultAND); // Output: Logical AND (&&): true",nl=e(I),D="// Logical OR (||) operation \n// Initialize variables c with the boolean value true and d with false \nlet c = true; \nlet d = false; \n// Use the logical OR operator to determine the disjunction of c and d \nlet resultOR = c || d; \nconsole.log('Logical OR (||): ', resultOR); // Output: Logical OR (||): true",ll=e(D),A="// Logical NOT (!) operation \n// Initialize variable e with the boolean value true \nlet e = true; \n// Use the logical NOT operator to negate the value of e \nlet resultNOT = !e; \nconsole.log('Logical NOT (!): ', resultNOT); // Output: Logical NOT (!): false",al=e(A),P="// Initialize a variable num with the numeric value 10 \nlet num = 10; \n\n// Use the ternary operator to check if num is even. If num % 2 equals 0, return 'Even'; otherwise, return 'Odd' \nlet result = num % 2 === 0 ? 'Even' : 'Odd'; \n\n// Log the result of the ternary operation \nconsole.log(result); // Output: Even",sl=e(P),R="// Without using the grouping operator \nlet result1 = 10 + 5 * 2; // 10 + (5 * 2) due to operator precedence, multiplication before addition \nconsole.log('Result 1: ', result1); // Output: Result 1: 20 \n\n// Use the grouping operator \nlet result2 = (10 + 5) * 2; // (10 + 5) * 2, addition inside parentheses performed first, then multiplication \nconsole.log('Result 2: ', result2); // Output: Result 2: 30",il=e(R),N="// Bitwise AND (&) \nlet a = 5; // Binary: 0101 \nlet b = 3; // Binary: 0011 \nlet resultAND = a & b; // Perform bitwise AND on a and b, result in binary: 0001 (Decimal: 1) \nconsole.log('Bitwise AND (&): ', resultAND); // Output: Bitwise AND (&): 1 \n\n// Bitwise OR (|) \nlet c = 5; // Binary: 0101 \nlet d = 3; // Binary: 0011 \nlet resultOR = c | d; // Perform bitwise OR on c and d, result in binary: 0111 (Decimal: 7) \nconsole.log('Bitwise OR (|): ', resultOR); // Output: Bitwise OR (|): 7 \n\n// Bitwise XOR (^) \nlet e = 5; // Binary: 0101 \nlet f = 3; // Binary: 0011 \nlet resultXOR = e ^ f; // Perform bitwise XOR on e and f, result in binary: 0110 (Decimal: 6) \nconsole.log('Bitwise XOR (^): ', resultXOR); // Output: Bitwise XOR (^): 6 \n\n// Bitwise NOT (~) \nlet g = 5; // Binary: 0101 \nlet resultNOT = ~g; // Perform bitwise NOT on g, result in binary: 1010 (Decimal: -6) \nconsole.log('Bitwise NOT (~): ', resultNOT); // Output: Bitwise NOT (~): -6 \n\n// Bitwise left shift (<<) \nlet h = 5; // Binary: 0101 \nlet resultLeftShift = h << 2; // Shift h left by 2, result in binary: 010100 (Decimal: 20) \nconsole.log('Bitwise left shift (<<): ', resultLeftShift); // Output: Bitwise left shift (<<): 20 \n\n// Bitwise right shift (>>) \nlet i = 16; // Binary: 0001 0000 \nlet resultRightShift = i >> 2; // Shift i right by 2, preserving sign, result in binary: 0000 0100 (Decimal: 4) \nconsole.log('Bitwise right shift (>>): ', resultRightShift); // Output: Bitwise right shift (>>): 4 \n\n// Bitwise unsigned right shift (>>>) \nlet j = -16; // Two's complement binary: 1111 1111 1111 1111 1111 1111 1111 0000 \nlet resultUnsignedRightShift = j >>> 2; // Shift j right by 2, filling with zeros, result in binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820) \nconsole.log('Bitwise unsigned right shift (>>>): ', resultUnsignedRightShift); // Output: Bitwise unsigned right shift (>>>): 1073741820",rl=e(N),cl="if (condition) {\n  // Code to execute if condition is true\n}",M="// Initialize a variable score with the numeric value 75 \nlet score = 75; \n\n// Check if score is greater than 70 \nif (score > 70) { \n  // If the condition is true, log 'Pass' \n  console.log('Pass'); \n}",ul=e(M),dl="if (condition) {\n  // Code to execute if condition is true\n} else {\n  // Code to execute if condition is false\n}",B="// Initialize a variable score with the numeric value 65 \nlet score = 65; \n\n// Check if score is greater than 70 \nif (score > 70) { \n  // If the condition is true, log 'Pass' \n  console.log('Pass'); \n} else { \n  // If the condition is false, log 'Fail' \n  console.log('Fail'); \n}",pl=e(B),ml="if (condition1) {\n  // Code to execute if condition1 is true\n} else if (condition2) {\n  // Code to execute if condition2 is true\n} else {\n  // Code to execute if both condition1 and condition2 are false\n}",H="// Initialize a variable score with the numeric value 85 \nlet score = 85; \n\n// Check if score is greater than or equal to 90 \nif (score >= 90) { \n  // If the condition is true, log 'Grade A' \n  console.log('Grade A'); \n} else if (score >= 80) { \n  // If score is less than 90 but greater than or equal to 80, log 'Grade B' \n  console.log('Grade B'); \n} else { \n  // If score is less than 80, log 'Grade below C' \n  console.log('Grade below C'); \n}",hl=e(H),gl="switch(expression) {\n  case x:\n    // Code to execute if expression equals x\n    break;\n  case y:\n    // Code to execute if expression equals y\n    break;\n  default:\n    // Code to execute if expression doesn't match any case\n}",U="// Initialize a variable fruit with the string value 'Apple' \nlet fruit = 'Apple'; \n\n// Use a switch statement to perform different actions based on the value of fruit \nswitch(fruit) { \n  case 'Banana': // If fruit is 'Banana' \n    console.log('Yellow fruit'); // Output: Yellow fruit \n    break; // Exit the switch statement \n  case 'Apple': // If fruit is 'Apple' \n    console.log('Red or green fruit'); // Output: Red or green fruit \n    break; // Exit the switch statement \n  default: // If fruit does not match any case \n    console.log('Unknown fruit'); // Output: Unknown fruit \n} \n\n// Since fruit is 'Apple', will log 'Red or green fruit'",_l=e(U),xl="condition ? expressionIfTrue : expressionIfFalse;",z="// Initialize a variable age with the numeric value 20 \nlet age = 20; \n\n// Use the ternary operator to assign 'Adult' to role if age is 18 or older, otherwise 'Child' \nlet role = age >= 18 ? 'Adult' : 'Child'; \n\n// Log the value of role \nconsole.log(role); // Output: Adult",fl=e(z),yl="// Access property prop of obj if obj is not null/undefined\nobj?.prop;\n\n// Access property named by expr of obj if obj is not null/undefined\nobj?.[expr];\n\n// Correct syntax to call func with arguments ...args if obj is not null/undefined\nobj?.func(...args);",q="// Initialize an object user with a name property set to 'Alice' and an address property set to null \nlet user = { \n  name: 'Alice', \n  address: null \n}; \n\n// Use optional chaining to safely access street property of address within user \n// If user or address is nullish (null or undefined), streetName will be undefined without causing an error \nlet streetName = user?.address?.street; // No error, return undefined \n\n// Log the value of streetName, which is undefined \nconsole.log(streetName); // Output: undefined",bl=e(q),vl="leftExpr ?? rightExpr;",F="// Initialize a variable inputName with the value null \nlet inputName = null; \n\n// Use the nullish coalescing operator to assign inputName to userName if inputName is not null or undefined, \n// otherwise assign 'Anonymous' \nlet userName = inputName ?? 'Anonymous'; // Since inputName is null, userName will be 'Anonymous' \n\n// Log the value of userName, which is 'Anonymous' \nconsole.log(userName); // Output: Anonymous",jl=e(F),wl="for (initialization; condition; increment) {\n  // Code to be executed\n}",W="// Initialize a for loop with a variable i starting at 0 \nfor (let i = 0; i < 5; i++) { \n  // For each iteration, check if i is less than 5 \n  // Log the current value of i \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment i by 1 after each iteration \n}",Sl=e(W),Ll="while (condition) {\n  // Code to be executed\n}",Y="// Initialize a variable i with the value 0 \nlet i = 0; \n\n// Start a while loop that continues as long as i is less than 5 \nwhile (i < 5) { \n  // Log the current value of i \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment i by 1 after each iteration to avoid an infinite loop \n  i++; \n}",Tl=e(Y),Ol="do {\n  // Code to be executed\n} while (condition);",V="// Initialize a variable i with the value 0 \nlet i = 0; \n\n// Start a 'do-while' loop \ndo { \n  // Log the current value of i \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment i by 1 after logging \n  i++; \n} while (i < 5); // Continue the loop as long as i is less than 5",Cl=e(V),El="for (key in object) {\n  // Code to be executed\n}",$="// Define a constant object person with properties firstName and lastName \nconst person = {firstName: 'John', lastName: 'Doe'}; \n\n// Start a 'for...in' loop to iterate over each property (key) in the person object \nfor (let key in person) { \n  // Concatenate the key and its corresponding value from the person object and log it \n  console.log(key + ': ' + person[key]); // This will log 'firstName: John' and 'lastName: Doe' on separate lines \n}",kl=e($),Jl="for (value of iterable) {\n  // Code to be executed\n}",G="// Define an array colors with the elements 'Red', 'Green', and 'Blue' \nlet colors = ['Red', 'Green', 'Blue']; \n\n// Start a 'for...of' loop to iterate over each element in the colors array \nfor (let color of colors) { \n  // Log the current element (color) \n  console.log(color); // This will log 'Red', 'Green', and 'Blue' on separate lines \n}",Il=e(G),m="// Define a function named greet that takes one parameter name \nfunction greet(name) { \n  // Return a greeting string concatenated with the name parameter \n  return 'Hello ' + name; \n}",X="// Define a constant square assigned to an anonymous function that takes one parameter number \nconst square = function(number) { \n  // Return the square of number by multiplying it by itself \n  return number * number; \n};",K="// Define a constant sum as an arrow function that takes two parameters a and b \nconst sum = (a, b) => \n  a + b; // Return the sum of 'a' and 'b'",Q="// Define sum to accumulate total of any number of arguments \nfunction sum(...numbers) { \n  // Sum up numbers using reduce method \n  return numbers.reduce((total, num) => total + num, 0); \n}",Z="// Define greet function with object destructuring for name and age from the parameter object \nfunction greet({ name, age }) { \n  // Use template literals to return a personalized greeting message \n  return `Hello, my name is ${name} and I am ${age} years old.`; \n}",ee="// Define setCoordinates function with array destructuring for x and y from the parameter array \nfunction setCoordinates([x, y]) { \n  // Use template literals to return formatted coordinates \n  return `X: ${x}, Y: ${y}`; \n}",te="// Call the greet function with 'Alice' as an argument and log the greeting message \nconsole.log(greet('Alice')); // Output: Hello Alice \n\n// Call the square function with 4 as an argument and log the squared result \nconsole.log(square(4)); // Output: 16 \n\n// Call the sum function with 5 and 10 as arguments and log the sum of the two numbers \nconsole.log(sum(5, 10)); // Output: 15",Dl=e(`${m} ${X} ${K} ${te}`),oe="// Call the sum function with 1, 2, 3, and 4 as arguments and log the sum of these numbers \nconsole.log(sum(1, 2, 3, 4)); // Output: 10",Al=e(`${Q} ${oe}`),ne="// Call the greet function with an object containing name and age properties and log the greeting message \nconsole.log(greet({ name: 'Alice', age: 30 })); // Output: Hello, my name is Alice and I am 30 years old.",Pl=e(`${Z} ${ne}`),le="// Call the setCoordinates function with an array containing two elements [10, 20] and log the formatted coordinates \nconsole.log(setCoordinates([10, 20])); // Output: X: 10, Y: 20",Rl=e(`${ee} ${le}`),ae="// Define processUserInput with callback parameter \nfunction processUserInput(callback) { \n  // Prompt user for name \n  let name = prompt('Please enter your name.'); \n  // Execute callback with name \n  console.log(callback(name)); \n} \n\n// Invoke processUserInput with greet callback \nprocessUserInput(greet);",Nl=e(`${m} ${ae}`),se="// Define and immediately invoke an anonymous function to create a private scope \n(function() { \n  // Declare a variable privateVar within the function's scope, making it private \n  let privateVar = 'I am private'; \n  // Log the value of privateVar, accessible only within this function \n  console.log(privateVar); // Output: I am private \n})(); // The function is invoked immediately after being defined",Ml=e(se),ie="// Declare a global variable globalVar \nlet globalVar = 'I am global'; \n\n// Define a function testScope \nfunction testScope() { \n  // Log the value of globalVar, demonstrating it's accessible within this function \n  console.log(globalVar); // Output: I am global \n} \n\n// Call testScope, which will access and log the value of globalVar \ntestScope(); \n\n// Log the value of globalVar, demonstrating it's also accessible outside the function \nconsole.log(globalVar); // Output: I am global",Bl=e(ie),re="// Define testFunctionScope function \nfunction testFunctionScope() { \n  // Declare local variable localVar \n  var localVar = 'I am local to testFunctionScope'; \n  // Log localVar within its function scope \n  console.log(localVar); // Output: I am local to testFunctionScope \n} \n\n// Invoke testFunctionScope to log localVar \ntestFunctionScope(); \n\n// Try accessing localVar outside its scope \ntry { \n  console.log(localVar); // Cause ReferenceError \n} catch (err) { \n  // Handle error when localVar is accessed outside scope \n  console.error(err); // Output: ReferenceError: localVar is not defined \n}",Hl=e(re),ce="// Use an if statement to create a block scope \nif (true) { \n  // Declare a block-scoped variable blockScopedVar using let \n  let blockScopedVar = 'I am block-scoped'; \n  // Log the value of blockScopedVar, showing it's accessible within this block \n  console.log(blockScopedVar); // Output: I am block-scoped \n} \n\n// Attempt to access blockScopedVar outside its block, expecting a ReferenceError \ntry { \n  console.log(blockScopedVar); // Attempt to log blockScopedVar outside its block \n} catch (err) { \n  // Catch and log the error \n  console.error(err); // Expected error: blockScopedVar is not defined \n}",Ul=e(ce),ue="// Define outerFunction with one parameter \nfunction outerFunction(outerVariable) { \n  // Return a closure innerFunction with one parameter \n  return function innerFunction(innerVariable) { \n    // Log outerVariable, accessible due to closure \n    console.log('Outer Variable: ' + outerVariable); \n    // Log innerVariable, local to innerFunction \n    console.log('Inner Variable: ' + innerVariable); \n  } \n} \n\n// Create newFunction by calling outerFunction with 'outside' \nconst newFunction = outerFunction('outside'); \n// Invoke newFunction (closure) with 'inside', accessing both variables \nnewFunction('inside');",zl=e(ue),de="// Define an object person with a name property and a greet method \nconst person = { \n  name: 'Alice', \n  // Define greet method that logs a greeting using 'this.name' \n  greet: function() { \n    console.log('Hello, ' + this.name); \n  } \n}; \n\n// Invoke the greet method of person. this within greet refers to the person object \nperson.greet(); // Output: Hello, Alice",ql=e(de),pe="// Declare a global variable hello \nvar hello = 'Hello'; \n\n// Define a function showThis to log 'this.hello' \nfunction showThis() { \n  console.log(this.hello); \n} \n\n// Invoke showThis, where this refers to the global object, or undefined in strict mode \nshowThis(); // Output: Hello",Fl=e(pe),me="// Define a constructor function Person with a name parameter \nfunction Person(name) { \n  this.name = name; // Assign the name parameter to the name property of the new object \n} \n\n// Create a new instance of Person named bob \nconst bob = new Person('Bob'); \n\n// Log the name property of bob. this within Person refers to the new object. \nconsole.log(bob.name); // Output: Bob",Wl=e(me),he="// Define a function greet that logs a greeting message \nfunction greet() { \n  console.log('Hello, ' + this.name); // this will refer to the object passed to call \n} \n\n// Create an object user with a name property \nconst user = { name: 'Sarah' }; \n\n// Use 'greet.call(user)' to invoke 'greet with this set to user \ngreet.call(user); // Output: Hello, Sarah",Yl=e(he),ge="// Define a team object with properties members and name, and a greet method \nconst team = { \n  members: ['Jane', 'Bill'], \n  teamName: 'Super Squad', \n  teamGreet: function() { \n    // Use forEach to iterate over members array \n    this.members.forEach((member) => { \n      // Inside arrow function, this still refers to team object \n      console.log(member + ' is part of ' + this.teamName); \n    }); \n  } \n}; \n\n// Call teamGreet method of team object \nteam.teamGreet(); // Log each member's name with the teamName, demonstrating this refers to team",Vl=e(ge),_e="// Define a function sum without defined parameters \nfunction sum() { \n  let total = 0; // Initialize total to accumulate the sum \n  // Iterate over arguments object which contains all passed arguments \n  for (let i = 0; i < arguments.length; i++) { \n    total += arguments[i]; // Add each argument to total \n  } \n  return total; // Return the sum of all arguments \n} \n\n// Call sum with four numbers and log the result \nconsole.log(sum(1, 2, 3, 4)); // Output: 10",$l=e(_e),xe="// Define a function greet with parameters for greeting and sign-off messages \nfunction greet(greeting, signOff) { \n  // Log a message using the parameters and 'this.name' \n  console.log(greeting + ', ' + this.name + '. ' + signOff); \n} \n\n// Create an object user with a name property \nconst user = { name: 'Alice' }; \n\n// Use 'greet.call(user, 'Hello', 'Have a nice day')' to invoke greet with user as this \n// and 'Hello' and 'Have a nice day' as arguments \ngreet.call(user, 'Hello', 'Have a nice day'); // Output: Hello, Alice. Have a nice day",Gl=e(xe),fe="// Define a function sum without defined parameters \nfunction sum() { \n  // Use reduce with call to iterate over arguments, accumulating a total sum \n  return Array.prototype.reduce.call(arguments, (acc, num) => acc + num, 0); \n} \n\n// Create an array of numbers \nconst numbers = [1, 2, 3, 4, 5]; \n\n// Use 'sum.apply(null, numbers)' to invoke sum with an array of numbers as arguments \nconsole.log(sum.apply(null, numbers)); // Output: 15",Xl=e(fe),ye="// Define a function multiply that takes two parameters and returns their product \nfunction multiply(a, b) { \n  return a * b; \n} \n\n// Use bind to create a new function double by fixing the first argument of multiply to 2 \nconst double = multiply.bind(null, 2); // null is used for the this context, which multiply doesn't use \n\n// Call double with 5 as the argument, which acts as the second parameter to multiply \nconsole.log(double(5)); // Output: 10",Kl=e(ye),Ql="const functionName = (parameters) => {\n  // Function body\n};",be="// Define an arrow function greet that returns 'Hello' \nconst greet = () => 'Hello'; \n\n// Log the result of calling greet \nconsole.log(greet()); // Output: Hello",Zl=e(be),ve="// Define an arrow function square that takes one parameter and returns its square \nconst square = number => number * number; \n\n// Log the result of calling square with 3 \nconsole.log(square(3)); // Output: 9",ea=e(ve),je="// Define an arrow function add that takes two parameters and returns their sum \nconst add = (a, b) => a + b; \n\n// Log the result of calling add with 1 and 2 \nconsole.log(add(1, 2)); // Output: 3",ta=e(je),we="// Define an arrow function multiply that takes two parameters and returns their product \nconst multiply = (a, b) => a * b; \n\n// Log the result of calling multiply with 2 and 3 \nconsole.log(multiply(2, 3)); // Output: 6",oa=e(we),Se="// Define an arrow function complexFunction that calculates the sum of a and b, then doubles it \nconst complexFunction = (a, b) => { \n  const result = a + b; // Calculate the sum of a and b \n  return result * 2; // Return the doubled sum \n}; \n\n// Log the result of calling complexFunction with 1 and 2 \nconsole.log(complexFunction(1, 2)); // Output: 6",na=e(Se),Le="// Define a Timer class with a constructor that increments seconds after 1 second \nclass Timer { \n  constructor() { \n    this.seconds = 0; // Initialize seconds to 0 \n    setTimeout(() => { \n      this.seconds += 100; // Use arrow function to ensure this refers to Timer instance \n    }, 1000); // Increment after 1 second \n  } \n} \n\n// Create a new Timer instance \nlet timer = new Timer(); \n\n// Log the seconds property of the timer instance after 2 seconds \nsetTimeout(() => { \n  console.log(timer.seconds); // Expected output: 100 \n}, 2000);",la=e(Le),Te="// Define an arrow function showArgs that takes a variable number of arguments and returns them as an array \nconst showArgs = (...args) => args; \n\n// Log the array returned by calling showArgs with multiple arguments \nconsole.log(showArgs(1, 2, 3, 4, 5)); // Output: [1, 2, 3, 4, 5]",aa=e(Te),Oe="// Define an array of numbers and use map to calculate their squares\nconst numbers = [1, 2, 3, 4, 5];\nconst squares = numbers.map(number => number * number);\n\n// Log the array of squared numbers\nconsole.log(squares); // Output: [1, 4, 9, 16, 25]",sa=e(Oe),Ce="// Declare a string primitive using single quotes \nlet stringPrimitive1 = 'This is a string'; \n\n// Declare a string primitive using double quotes \nlet stringPrimitive2 = \"This is also a string\"; \n\n// Declare a string primitive using backticks for template literals \nlet stringPrimitive3 = `This is a string using template literals`;",Ee="// Declare a string object using the String constructor \nlet stringObject = new String('This is a string object');",ke="// Log the type of a string primitive\nconsole.log(typeof stringPrimitive1); // Output: string\n\n// Log the type of a string object\nconsole.log(typeof stringObject); // Output: object",ia=e(`${Ce} ${Ee} ${ke}`),Je="// Compare two string primitives for equality\nconsole.log('Hello' === 'Hello'); // Output: true\n\n// Compare two string objects for equality\nconsole.log(new String('Hello') === new String('Hello')); // Output: false",ra=e(Je),Ie="// Log the length of the string 'Hello'\nconsole.log('Hello'.length); // Output: 5",ca=e(Ie),De="// Log the character at index 1 of the string 'Hello'\nconsole.log('Hello'.charAt(1)); // Output: e",ua=e(De),Ae="// Concatenate 'Hello ' with 'World!' and log the result\nconsole.log('Hello '.concat('World!')); // Output: Hello World!",da=e(Ae),Pe="// Check if 'Hello' includes the substring 'ell' and log the result\nconsole.log('Hello'.includes('ell')); // Output: true",pa=e(Pe),Re="// Find the index of 'e' in the string 'Hello' and log the result\nconsole.log('Hello'.indexOf('e')); // Output: 1",ma=e(Re),Ne="// Use the slice method to extract and log the substring from index 1 to 3 of 'Hello' \nconsole.log('Hello'.slice(1, 3)); // Output: el",ha=e(Ne),Me="// Split the string 'a,b,c' by ',' and log the resulting array\nconsole.log('a,b,c'.split(',')); // Output: ['a', 'b', 'c']",ga=e(Me),Be="// Convert 'Hello' to lowercase and log the result \nconsole.log('Hello'.toLowerCase()); // Output: hello",_a=e(Be),He="// Convert 'Hello' to uppercase and log the result\nconsole.log('Hello'.toUpperCase()); // Output: HELLO",xa=e(He),Ue="// Remove whitespace from both ends of '  Hello  ' and log the result\nconsole.log('  Hello  '.trim()); // Output: Hello",fa=e(Ue),ze="// Concatenate 'Hello, ' and 'world!' into a single string greeting \nlet hello = 'Hello, '; \nlet world = 'world!'; \nlet greeting = hello + world; \n\n// Log the concatenated string \nconsole.log(greeting); // Output: Hello, world!",ya=e(ze),qe="// Initialize message with 'Hello, ' and then append 'world!' using += operator \nlet message = 'Hello, '; \nmessage += 'world!'; \n\n// Log the concatenated message \nconsole.log(message); // Output: Hello, world!",ba=e(qe),Fe="// Define a variable name with the value 'Alice' \nlet name = 'Alice'; \n// Create a greeting message using template literals and embed the name variable \nlet greeting = `Hello, ${name}!`; \n\n// Log the greeting \nconsole.log(greeting); // Output: Hello, Alice!",va=e(Fe),We="// Iterate over each character of the string text using a 'for...of' loop \nlet text = 'Hello'; \n\nfor (const char of text) { \n  // Log each character of text \n  console.log(char); \n}",ja=e(We),Ye="// Destructure the string greeting into individual characters \nlet greeting = 'Hello'; \nlet [firstChar, secondChar, thirdChar, fourthChar, fifthChar] = greeting; \n\n// Log each character obtained through destructuring \nconsole.log(firstChar);  // Output: H \nconsole.log(secondChar); // Output: e \nconsole.log(thirdChar);  // Output: l \nconsole.log(fourthChar); // Output: l \nconsole.log(fifthChar);  // Output: o",wa=e(Ye),Ve="// Destructure the string str into its first two characters and the rest of the characters \nlet str = 'Hello, world!'; \nlet [firstChar, secondChar, ...restOfChars] = str; \n\n// Log the first and second characters \nconsole.log(firstChar);  // Output: H \nconsole.log(secondChar); // Output: e \n// Log the array containing the rest of the characters \nconsole.log(restOfChars); // Output: ['l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!']",Sa=e(Ve),$e="// Declare an array fruits with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n// Declare an array numbers with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n// Declare an empty array emptyArray \nlet emptyArray = []; \n\n// Log the contents of the fruits array \nconsole.log(fruits); // Output: ['apple', 'banana', 'cherry'] \n// Log the contents of the numbers array \nconsole.log(numbers); // Output: [1, 2, 3, 4, 5] \n// Log the contents of the emptyArray, showing it's empty \nconsole.log(emptyArray); // Output: []",La=e($e),Ge="// Declare an array colors using the Array constructor with three string elements \nlet colors = new Array('red', 'green', 'blue'); \n\n// Log the contents of the colors array \nconsole.log(colors); // Output: ['red', 'green', 'blue']",Ta=e(Ge),Xe="// Declare an array arrayOfUndefined with 3 empty slots using the Array constructor \nlet arrayOfUndefined = new Array(3); \n\n// Log the contents of the arrayOfUndefined array, which are uninitialized (thus undefined) \nconsole.log(arrayOfUndefined); // Output: [undefined, undefined, undefined]",Oa=e(Xe),Ke="// Declare an array mixedArray containing mixed data types: number, string, object, and another array \nlet mixedArray = [1, 'hello', { a: 1, b: 2 }, [2, 3, 4]]; \n\n// Log the contents of the mixedArray \nconsole.log(mixedArray); // Output: [1, 'hello', { a: 1, b: 2 }, [2, 3, 4]]",Ca=e(Ke),Qe="// Declare a 2D array matrix representing a 3x3 matrix \nlet matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; \n\n// Access the element at the first row and first column of matrix \nlet firstRowFirstCol = matrix[0][0]; // 1 \n\n// Log the entire matrix \nconsole.log(matrix); // Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \n// Log the element from the first row and first column \nconsole.log(firstRowFirstCol); // Output: 1",Ea=e(Qe),Ze="// Declare an array fruits and calculate its length \nlet fruits = ['apple', 'banana', 'cherry']; \nlet length = fruits.length; // Retrieve the length of the fruits array \n\n// Log the length of the fruits array \nconsole.log(length); // Output: 3",ka=e(Ze),et="// Declare an array fruits with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Access the first element of the array \nlet firstFruit = fruits[0]; // 'apple' \n\n// Access the second element of the array \nlet secondFruit = fruits[1]; // 'banana' \n\n// Access the last element using the array's length \nlet lastFruit = fruits[fruits.length - 1]; // 'cherry' \n\n// Log the accessed elements \nconsole.log(firstFruit, secondFruit, lastFruit); // Output: apple banana cherry",Ja=e(et),tt="// Declare an array fruits with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Iterate over fruits using a traditional for loop \nfor (let i = 0; i < fruits.length; i++) { \n  console.log(fruits[i]); // Log each fruit in the array \n} \n\n// Iterate over fruits using a 'for...of' loop \nfor (let fruit of fruits) { \n  console.log(fruit); // Log each fruit in the array \n} \n\n// Iterate over fruits using the forEach method \nfruits.forEach(fruit => console.log(fruit)); // Log each fruit in the array",Ia=e(tt),ot="// Declare an array fruits with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array into individual variables \nlet [firstFruit, secondFruit, thirdFruit] = fruits; \n\n// Log each variable to show the result of destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(secondFruit); // Output: banana \nconsole.log(thirdFruit); // Output: cherry",Da=e(ot),nt="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array, skipping the second element \nlet [firstFruit, , thirdFruit] = fruits; \n\n// Log the variables to show the result of selective destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(thirdFruit); // Output: cherry",Aa=e(nt),lt="// Define an array of fruits\nlet fruits = ['apple', 'banana', 'cherry'];\n\n// Destructure the array: assign the first element to firstFruit and the rest to restFruits\nlet [firstFruit, ...restFruits] = fruits;\n\n// Log the first fruit\nconsole.log(firstFruit); // Output: apple\n// Log the array of remaining fruits\nconsole.log(restFruits); // Output: ['banana', 'cherry']",Pa=e(lt),at="// Declare an array colors with one element \nlet colors = ['red']; \n\n// Destructure colors array, providing a default value for the second element \nlet [firstColor, secondColor = 'green'] = colors; \n\n// Log firstColor to show the first element from the array \nconsole.log(firstColor);  // Output: red \n// Log secondColor to show the default value, as the second element does not exist in the array \nconsole.log(secondColor); // Output: green",Ra=e(at),st="// Declare an array fruits with two elements \nlet fruits = ['apple', 'banana']; \n\n// Use the push method to add 'orange' to the end of fruits and store the new length \nlet newLength = fruits.push('orange'); \n\n// Log the new length of the fruits array \nconsole.log(newLength); // Output: 3 \n// Log the updated fruits array \nconsole.log(fruits); // Output: ['apple', 'banana', 'orange']",Na=e(st),it="// Declare an array fruits with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the pop method to remove the last element from fruits and store it in lastFruit \nlet lastFruit = fruits.pop(); // Remove 'cherry' \n\n// Log the removed element \nconsole.log(lastFruit); // Output: cherry \n// Log the updated fruits array \nconsole.log(fruits); // Output: ['apple', 'banana']",Ma=e(it),rt="// Declare an array fruits with two elements \nlet fruits = ['apple', 'banana']; \n\n// Use the unshift method to add 'strawberry' to the beginning of fruits and store the new length \nlet newLength = fruits.unshift('strawberry'); \n\n// Log the new length of the fruits array \nconsole.log(newLength); // Output: 3 \n// Log the updated fruits array \nconsole.log(fruits); // Output: ['strawberry', 'apple', 'banana']",Ba=e(rt),ct="// Declare an array fruits with four elements \nlet fruits = ['strawberry', 'apple', 'banana', 'cherry']; \n\n// Use the shift method to remove the first element from fruits and store it in firstFruit \nlet firstFruit = fruits.shift(); // Remove 'strawberry' \n\n// Log the removed element \nconsole.log(firstFruit); // Output: strawberry \n// Log the updated fruits array \nconsole.log(fruits); // Output: ['apple', 'banana', 'cherry']",Ha=e(ct),ut="// Declare an array numbers with three numeric elements \nlet numbers = [1, 2, 3]; \n\n// Use the map method to create a new array squared by squaring each element of numbers \nlet squared = numbers.map(num => num * num); // The result is [1, 4, 9] \n\n// Log the squared array \nconsole.log(squared); // Output: [1, 4, 9]",Ua=e(ut),dt="// Declare an array numbers with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the filter method to create a new array evenNumbers containing only even numbers from numbers \nlet evenNumbers = numbers.filter(num => num % 2 === 0); // The result is [2, 4] \n\n// Log the evenNumbers array \nconsole.log(evenNumbers); // Output: [2, 4]",za=e(dt),pt="// Declare an array numbers with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the reduce method to calculate the sum of all elements in numbers \nlet sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0); // The result is 15 \n\n// Log the calculated sum \nconsole.log(sum); // Output: 15",qa=e(pt),mt="// Declare an array numbers with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the find method to locate the first even number in numbers \nlet firstEven = numbers.find(num => num % 2 === 0); // The result is 2 \n\n// Log the first even number found \nconsole.log(firstEven); // Output: 2",Fa=e(mt),ht="// Declare an array fruits with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the indexOf method to find the index of 'banana' in the fruits array \nlet index = fruits.indexOf('banana'); // The result is 1 \n\n// Log the index of 'banana' \nconsole.log(index); // Output: 1",Wa=e(ht),gt="// Declare an array fruits with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the reverse method to reverse the order of elements in fruits \nlet reversedFruits = fruits.reverse(); // The fruits array itself is reversed \n\n// Log the reversed array \nconsole.log(reversedFruits); // Output: ['cherry', 'banana', 'apple']",Ya=e(gt),_t="// Declare an array fruits with four string elements \nlet fruits = ['strawberry', 'banana', 'apple', 'cherry']; \n\n// Use the sort method to sort the elements of fruits alphabetically \nlet sortedFruits = fruits.sort(); // The fruits array itself is sorted \n\n// Log the sorted array \nconsole.log(sortedFruits); // Output: ['apple', 'banana', 'cherry', 'strawberry']",Va=e(_t),xt="// Declare an array people with objects containing name and age properties \nlet people = [ \n  { name: 'John', age: 30 }, \n  { name: 'Anna', age: 24 }, \n  { name: 'Mike', age: 28 } \n]; \n\n// Use the sort method with a compare function to sort people by age \npeople.sort((a, b) => a.age - b.age); \n\n// Log the sorted array, now ordered by age from youngest to oldest \nconsole.log(people); // Output: [{ name: 'Anna', age: 24 }, { name: 'Mike', age: 28 }, { name: 'John', age: 30 }]",$a=e(xt),ft="// Declare an array fruits with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the slice method to create a new array someFruits from index 1 to 2 of fruits \nlet someFruits = fruits.slice(1, 3); \n\n// Log the new array, which includes elements from index 1 to 2 of the original fruits array \nconsole.log(someFruits); // Output: ['banana', 'cherry']",Ga=e(ft),yt="// Declare an array fruits with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the splice method to insert 'kiwi' at index 1 without removing any elements \nfruits.splice(1, 0, 'kiwi'); // Arguments: start index, number of elements to remove, element(s) to add \n\n// Log the updated fruits array, showing 'kiwi' added at index 1 \nconsole.log(fruits); // Output: ['apple', 'kiwi', 'banana', 'cherry']",Xa=e(yt),bt="// Declare an array fruits with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the join method to concatenate all elements of fruits into a single string, separated by ', ' \nlet fruitsString = fruits.join(', '); \n\n// Log the string created from the fruits array \nconsole.log(fruitsString); // Output: apple, banana, cherry",Ka=e(bt),vt="// Declare two arrays array1 and array2 with numeric elements \nlet array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6]; \n\n// Use the concat method to merge array1 and array2 into combinedArray \nlet combinedArray = array1.concat(array2); \n\n// Log the merged array, showing elements from both array1 and array2 \nconsole.log(combinedArray); // Output: [1, 2, 3, 4, 5, 6]",Qa=e(vt),jt="// Declare two arrays array1 and array2 with string elements \nlet array1 = ['a', 'b', 'c']; \nlet array2 = ['d', 'e', 'f']; \n\n// Use the spread operator to combine array1 and array2 into combinedArray \nlet combinedArray = [...array1, ...array2]; \n\n// Log the combined array, showing elements from both array1 and array2 \nconsole.log(combinedArray); // Output: ['a', 'b', 'c', 'd', 'e', 'f']",Za=e(jt),wt="// Declare an object person with properties name, age, and a method greet \nlet person = { \n  name: 'Alice', \n  age: 30, \n  greet: function() { \n    return 'Hello!'; \n  } \n}; \n\n// Log the name property of person \nconsole.log(person.name); // Output: Alice \n// Log the age property of person \nconsole.log(person.age); // Output: 30 \n// Call the greet method of person and log the returned greeting \nconsole.log(person.greet()); // Output: Hello!",es=e(wt),St="// Declare an object person with properties name and age \nlet person = { \n  name: 'Alice', \n  age: 30 \n}; \n\n// Add a new property job to the person object \nperson.job = 'Developer'; \n// Log the newly added property \nconsole.log(person.job); // Output: Developer \n\n// Modify the existing age property of person \nperson.age = 31; \n// Log the modified age property \nconsole.log(person.age); // Output: 31 \n\n// Delete the age property from person \ndelete person.age; \n// Log the deleted age property, which now is undefined \nconsole.log(person.age); // Output: undefined",ts=e(St),Lt="// Define a person object with firstName, lastName, and fullName getter and setter \nlet person = { \n  firstName: 'Alice', \n  lastName: 'Smith', \n  // Getter for fullName returns the full name by concatenating firstName and lastName \n  get fullName() { \n    return `${this.firstName} ${this.lastName}`; \n  }, \n  // Setter for fullName splits the name into firstName and lastName \n  set fullName(name) { \n    let parts = name.split(' '); \n    this.firstName = parts[0]; \n    this.lastName = parts[1]; \n  } \n}; \n\n// Log the fullName using the getter \nconsole.log(person.fullName); // Output: Alice Smith \n// Set a new fullName, which updates firstName and lastName \nperson.fullName = 'John Doe'; // Reset fullName \n// Log the updated fullName using the getter \nconsole.log(person.fullName); // Output: John Doe",os=e(Lt),Tt="// Define variables name and age \nlet name = 'Alice'; \nlet age = 25; \n\n// Create a person object using shorthand property names \nlet person = { name, age }; \n\n// Log properties of the person object \nconsole.log(person.name); // Output: Alice \nconsole.log(person.age); // Output: 25",ns=e(Tt),Ot="// Define a variable for dynamic property name \nlet propName = 'status'; \n\n// Create a person object with properties and use computed property name for status \nlet person = { \n  name: 'Alice', \n  age: 25, \n  [propName]: 'active' // status property is set dynamically using propName variable \n}; \n\n// Log the value of the status property \nconsole.log(person.status); // Output: active",ls=e(Ot),Ct="// Define an object person with properties and a method \nlet person = { \n  name: 'Alice', \n  age: 30, \n  greet: function() { \n    return 'Hello!'; // Method that returns a greeting \n  } \n}; \n\n// Call the greet method of the person object and log the result \nconsole.log(person.greet()); // Output: Hello!",as=e(Ct),Et="// Define an object person with a name property and a greet method \nlet person = { \n  name: 'Alice', \n  greet: function() { \n    return `Hello ${this.name}`; // Use template literals to include the name property in the greeting \n  } \n} \n\n// Call the greet method of the person object and log the greeting \nconsole.log(person.greet()); // Output: Hello Alice",ss=e(Et),kt="// Define an object person with properties name, age, and isEmployed \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Log the person object \nconsole.log(person);",is=e(kt),Jt="// Initialize a new object person using the Object constructor \nlet person = new Object(); \n// Assign properties name, age, and isEmployed to the person object \nperson.name = 'John Doe'; \nperson.age = 30; \nperson.isEmployed = true; \n\n// Log the person object \nconsole.log(person);",rs=e(Jt),It="// Define a constructor function Person to create an object with name, age, and isEmployed properties \nfunction Person(name, age, isEmployed) { \n  this.name = name; \n  this.age = age; \n  this.isEmployed = isEmployed; \n} \n\n// Instantiate a new Person object with specific properties \nlet person = new Person('John Doe', 30, true); \n\n// Log the newly created person object \nconsole.log(person);",cs=e(It),Dt="// Define a prototype object personProto with a greet method \nlet personProto = { \n  greet: function() { \n    return `Hello, ${this.name}`; \n  } \n}; \n\n// Create a new object person that inherits from personProto \nlet person = Object.create(personProto); \n// Assign properties name, age, and isEmployed to the person object \nperson.name = 'John Doe'; \nperson.age = 30; \nperson.isEmployed = true; \n\n// Log the person object \nconsole.log(person);",us=e(Dt),At="// Define a Person class with a constructor and a greet method \nclass Person { \n  constructor(name, age, isEmployed) { \n    this.name = name; // Initialize name property \n    this.age = age; // Initialize age property \n    this.isEmployed = isEmployed; // Initialize isEmployed property \n  } \n  \n  greet() { \n    return `Hello, ${this.name}`; // Method to return a greeting \n  } \n} \n\n// Instantiate a new Person object with specific properties \nlet person = new Person('John Doe', 30, true); \n// Log the newly created person object \nconsole.log(person);",ds=e(At),Pt="// Declare an object person with properties name and age \nlet person = { \n  name: 'John Doe', \n  age: 30 \n}; \n\n// Log the name property of the person object \nconsole.log(person.name); // Output: John Doe \n// Log the age property of the person object \nconsole.log(person.age); // Output: 30",ps=e(Pt),Rt="// Declare an object person with properties name and age \nlet person = { \n  name: 'John Doe', \n  age: 30 \n}; \n\n// Access and log the name property using bracket notation \nconsole.log(person['name']); // Output: John Doe \n// Store the property name age in a variable key \nlet key = 'age'; // When the property name is stored in a variable \n// Access and log the property using the variable key with bracket notation \nconsole.log(person[key]); // Output: 30",ms=e(Rt),Nt="// Declare an object person with properties name, age, and isEmployed \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Destructure person to extract name, age, and isEmployed properties into variables \nlet { name, age, isEmployed } = person; \n\n// Log the values of the extracted variables \nconsole.log(name); // Output: John Doe \nconsole.log(age); // Output: 30 \nconsole.log(isEmployed); // Output: true",hs=e(Nt),Mt="// Declare an object person with properties name, age, and isEmployed \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Iterate over each property in the person object \nfor (let key in person) { \n  // Log the key and its corresponding value \n  console.log(key + ': ' + person[key]); \n}",gs=e(Mt),Bt="// Declare an object person with properties name, age, and isEmployed \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use Object.keys to get an array of the object's property names \nlet keys = Object.keys(person); \n\n// Log the array of keys \nconsole.log(keys); // Output: ['name', 'age', 'isEmployed']",_s=e(Bt),Ht="// Declare an object person with properties name, age, and isEmployed \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use 'Object.values' to get an array of the object's property values \nlet values = Object.values(person); \n\n// Log the array of values \nconsole.log(values); // Output: ['John Doe', 30, true]",xs=e(Ht),Ut="// Declare an object person with properties name, age, and isEmployed \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use 'Object.entries' to get an array of the object's property '[key, value]' pairs \nlet entries = Object.entries(person); \n\n// Log the array of entries \nconsole.log(entries); // Output: [['name', 'John Doe'], ['age', 30], ['isEmployed', true]]",fs=e(Ut),zt="// Initialize an object person with a property name \nlet person = { name: 'Alice' }; \n\n// Define a new property age on person with specific property descriptors \nObject.defineProperty(person, 'age', { \n  value: 25,          // Set the initial value of age \n  writable: false,    // Prevent the property from being changed \n  enumerable: true,   // Allow the property to be listed in object enumerations \n  configurable: false // Prevent the property from being deleted or reconfigured \n}); \n\n// Log the age property of person \nconsole.log(person.age); // Output: 25 \n\n// Attempt to modify the age property \nperson.age = 30; // This will not change the age because writable is false \n// Log the age property again to show it remains unchanged \nconsole.log(person.age); // Output: 25",ys=e(zt),qt="// Initialize an empty object person \nlet person = {}; \n\n// Define multiple properties on person with specific descriptors \nObject.defineProperties(person, { \n  'firstName': { \n    value: 'Alice',       // Set the initial value of firstName \n    writable: true,       // Allow firstName to be changed \n    enumerable: true      // Include firstName in object enumerations \n  }, \n  'lastName': { \n    value: 'Johnson',     // Set the initial value of lastName \n    writable: false,      // Prevent lastName from being changed \n    enumerable: true      // Include lastName in object enumerations \n  } \n}); \n\n// Log the person object to show defined properties \nconsole.log(person); // Output: { firstName: 'Alice', lastName: 'Johnson' }",bs=e(qt),Ft="// Initialize an object person with a property name \nlet person = { name: 'Alice' }; \n\n// Define a new property age on person with specific descriptors \nObject.defineProperty(person, 'age', { \n  value: 25,          // Set the initial value of age \n  writable: false,    // Make age read-only \n  enumerable: true,   // Allow age to appear in object enumerations \n  configurable: false // Prevent the property from being deleted or reconfigured \n}); \n\n// Retrieve the property descriptor for age on person \nlet descriptor = Object.getOwnPropertyDescriptor(person, 'age'); \n\n// Log the property descriptor of age \nconsole.log(descriptor); // Output: { value: 25, writable: false, enumerable: true, configurable: false }",vs=e(Ft),Wt="// Initialize an object original with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a shallow copy of original using spread syntax \nlet copy = { ...original }; \n\n// Modify the top-level property a in the copy \ncopy.a = 3; \n// Modify a nested property in the copy, which also affects the original due to shared reference \ncopy.b.c = 4; \n\n// Log the original object to show that its nested property was affected \nconsole.log(original); // Output: { a: 1, b: { c: 4 } } \n// Log the copy object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",js=e(Wt),Yt="// Initialize an object original with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a shallow copy of original using 'Object.assign' \nlet copy = Object.assign({}, original); \n\n// Modify the top-level property a in the copy \ncopy.a = 3; \n// Modify a nested property in the copy, which also affects the original due to shared reference \ncopy.b.c = 4; \n\n// Log the original object to show that its nested property was affected \nconsole.log(original); // Output: { a: 1, b: { c: 4 } } \n// Log the copy object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",ws=e(Yt),Vt="// Initialize an object original with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a deep copy of original using 'JSON.parse' and 'JSON.stringify' \nlet copy = JSON.parse(JSON.stringify(original)); \n\n// Modify the top-level property a in the copy \ncopy.a = 3; \n// Modify a nested property 'b.c' in the copy \ncopy.b.c = 4; \n\n// Log the original object to show it remains unchanged \nconsole.log(original); // Output: { a: 1, b: { c: 2 } } \n// Log the copy object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",Ss=e(Vt),s="// Initialize a new empty Map \nlet map = new Map();",i="// Set string keys with corresponding values \nmap.set('key1', 'value1'); \nmap.set('key2', 'value2'); \n// Set a numeric key with its corresponding value. Keys can be of any type \nmap.set(123, 'numeric key');",$t="// Retrieve and log the number of key-value pairs in the map \nlet size = map.size; \nconsole.log(size); // Output: 3",Ls=e(`${s} ${i} \n ${$t}`),Gt="// Use the get method to retrieve values based on their keys \nlet value1 = map.get('key1'); // Retrieve 'value1' \nlet value2 = map.get('key2'); // Retrieve 'value2' \nlet numericValue = map.get(123); // Retrieve 'numeric key' \n\n// Log the retrieved values \nconsole.log(value1, value2, numericValue); // Output: value1 value2 numeric key",Ts=e(`${s} ${i} \n ${Gt}`),Xt="// Iterate over the map using forEach, logging both key and value \nmap.forEach((value, key) => { \n  console.log(key, value); \n});",Os=e(`${s} ${i} \n ${Xt}`),Kt="// Iterate over the map using a 'for...of' loop on 'map.entries()' \nfor (let [key, value] of map.entries()) { \n  // Log the key and value of each entry \n  console.log(key, value); \n}",Cs=e(`${s} ${i} \n ${Kt}`),Qt="// Iterate over keys \nfor (let key of map.keys()) { \n  // Log each key in the map \n  console.log(key); \n} \n\n// Iterate over values \nfor (let value of map.values()) { \n  // Log each value in the map \n  console.log(value); \n}",Es=e(`${s} ${i} \n ${Qt}`),r="// Initialize a new empty set \nlet set = new Set();",c="// Add unique values to the set \nset.add('value1'); \nset.add('value2'); \nset.add('value3');",Zt="// Check for the presence of 'value1' in the set \nlet hasValue1 = set.has('value1'); // Return true because 'value1' is in the set \n// Check for the presence of 'value4' in the set \nlet hasValue4 = set.has('value4'); // Return false because 'value4' is not in the set \n\n// Log the results of the checks \nconsole.log(hasValue1, hasValue4); // Output: true false",ks=e(`${r} ${c} ${Zt}`),eo="// Remove 'value1' from the set \nset.delete('value1'); \n\n// Check if 'value1' is present in the set after deletion \nlet hasValue1 = set.has('value1'); // Expected to be false since 'value1' was deleted \n\n// Log the result of the check \nconsole.log(hasValue1); // Output: false",Js=e(`${r} ${c} ${eo}`),to="// Iterate over each element in the set \nset.forEach(value => { \n  // Log the current value \n  console.log(value); \n});",Is=e(`${r} ${c} ${to}`),oo="// Iterate over each element in the set using a 'for...of' loop \nfor (let value of set) { \n  // Log the current element's value \n  console.log(value); \n}",Ds=e(`${r} ${c} ${oo}`),no="// Store the number of elements in the set in the variable size \nlet size = set.size;  \n\n// Log the number of elements in the set \nconsole.log(size); // Output: 3",As=e(`${r} ${c} ${no}`),h="// Initialize a new WeakMap object \nlet weakMap = new WeakMap();",g="// Create an empty object to be used as a key \nlet objKey = {}; \n\n// Associate 'some value' with objKey in the weakMap \nweakMap.set(objKey, 'some value');",lo="// Retrieve the value associated with objKey from the weakMap \nlet value = weakMap.get(objKey); // Return 'some value' \n\n// Log the retrieved value \nconsole.log(value); // Output: some value",Ps=e(`${h} ${g} ${lo}`),ao="// Remove the key-value pair where the key is objKey from the weakMap \nweakMap.delete(objKey); // Remove the key-value pair where the key is objKey \n\n// Retrieve the value associated with objKey after deletion, which is undefined \nlet value = weakMap.get(objKey); // Return undefined \n\n// Log the retrieved value \nconsole.log(value); // Output: undefined",Rs=e(`${h} ${g} ${ao}`),_="// Create a new WeakSet instance \nlet weakSet = new WeakSet();",x="// Create empty objects to be used as keys \nlet obj1 = {}; \nlet obj2 = {}; \n\n// Add obj1 to the weakSet \nweakSet.add(obj1); \n// Add obj2 to the weakSet \nweakSet.add(obj2);",so="// Retrieve whether obj1 is in the weakSet \nlet hasObj1 = weakSet.has(obj1); // true if obj1 is in the weakSet \n\n// Retrieve whether a new object {} is in the weakSet, which is false \nlet hasObj3 = weakSet.has({}); // false, as this is a new object \n\n// Log the results \nconsole.log(hasObj1, hasObj3); // Output: true false",Ns=e(`${_} ${x} ${so}`),io="// Remove obj1 from the weakSet \nweakSet.delete(obj1); // Remove obj1 from the weakSet \n\n// Retrieve whether obj1 is in the weakSet after deletion, which is false \nlet hasObj1 = weakSet.has(obj1); \n\n// Log the result \nconsole.log(hasObj1); // Output: false",Ms=e(`${_} ${x} ${io}`),Bs='{\n  "name": "John",\n  "occupation": "Engineer"\n}',Hs='[\n  "Apple",\n  "Banana",\n  "Cherry"\n]',Us='{\n  "name": "Jane",\n  "age": 30,\n  "address": {\n    "street": "123 Main St",\n    "city": "Anytown"\n  },\n  "hobbies": ["Reading", "Hiking", "Coding"]\n}',ro='// Define a person object with name, age, and hobbies properties \nlet person = { \n  name: \'Alice\', \n  age: 30, \n  hobbies: [\'reading\', \'cycling\'] \n}; \n\n// Convert the person object to a JSON string \nlet jsonString = JSON.stringify(person); \n\n// Log the JSON string, outputting the stringified version of person \nconsole.log(jsonString); // Output: {"name":"Alice","age":30,"hobbies":["reading","cycling"]}',zs=e(ro),co='// Define a JSON string representing a person with name, age, and hobbies \nlet jsonString = \'{"name":"Alice","age":30,"hobbies":["reading","cycling"]}\'; \n\n// Parse the JSON string back into a JavaScript object \nlet person = JSON.parse(jsonString); \n\n// Log the person object \nconsole.log(person); // Output: { name: \'Alice\', age: 30, hobbies: [\'reading\', \'cycling\'] }',qs=e(co),uo="// Define the Person constructor function with a name parameter \nfunction Person(name) { \n  this.name = name; // Assign the name parameter to the name property of the instance \n} \n\n// Add a greet method to the 'Person.prototype' \nPerson.prototype.greet = function() { \n  // Return a greeting string using the name property of the instance \n  return `Hello, my name is ${this.name}`; \n}; \n\n// Create a new instance of Person named alice \nlet alice = new Person('Alice'); \n\n// Call the greet method on the alice instance and log the result \nconsole.log(alice.greet()); // Output: Hello, my name is Alice",Fs=e(uo),po="// Define the Vehicle constructor function with a type parameter \nfunction Vehicle(type) { \n  this.type = type; // Assign the type parameter to the type property of the instance \n} \n\n// Add a describe method to the 'Vehicle.prototype' \nVehicle.prototype.describe = function() { \n  // Return a description string using the type property of the instance \n  return `This is a ${this.type}.`; \n};",mo="// Define the Car constructor function with name and type parameters \nfunction Car(name, type) { \n  Vehicle.call(this, type); // Call the Vehicle constructor function to inherit type property \n  this.name = name; // Assign the name parameter to the name property of the Car instance \n} \n\n// Inherit from Vehicle \nCar.prototype = Object.create(Vehicle.prototype); // Establish 'Car.prototype' as an object created from 'Vehicle.prototype' for inheritance purposes \nCar.prototype.constructor = Car; // Restore the constructor property on 'Car.prototype' to refer to Car",ho="// Add a showDetails method to the Car prototype for displaying detailed information about the car \nCar.prototype.showDetails = function() { \n  return `This car is a ${this.name} and is a type of ${this.type}.`; \n}; \n\n// Overriding the describe method from Vehicle prototype for Car instances \nCar.prototype.describe = function() { \n  // Provide a custom description specific to Car instances \n  return `This is a car named ${this.name}.`; \n};",go="// Create a new instance of Car with name as 'Tesla Model 3' and type as 'electric car' \nconst myCar = new Car('Tesla Model 3', 'electric car'); \n\n// Call the overridden describe method on myCar instance and log the output \nconsole.log(myCar.describe()); // Output: This is a car named Tesla Model 3. \n\n// Call the showDetails method on myCar instance to get a detailed description and log the output \nconsole.log(myCar.showDetails()); // Output: This car is a Tesla Model 3 and is a type of electric car.",Ws=e(`${po} ${mo} ${ho} ${go}`),Ys="class Person {\n  // Class body goes here\n}",Vs="class Person {\n  constructor(name, age) {\n    // Code goes here\n  }\n}",_o="// Define a class named Person \nclass Person { \n  // Declare a public class field name and initialize it with 'Default Name' \n  name = 'Default Name'; \n  // Declare another public class field age without initializing it \n  age; \n  \n  // Constructor function that initializes a new instance of the Person class \n  constructor(age) { \n    this.age = age; // Set the age field to the value passed to the constructor \n  } \n} \n\n// Create a new instance of the Person class with age set to 30 \nconst bob = new Person(30); \n\n// Log the name property of the bob instance \nconsole.log(bob.name); // Output: Default Name",$s=e(_o),xo="// Define a class named Person \nclass Person { \n  // Initialize a public class field name with a default value \n  name = 'Default Name'; \n  // Declare another public class field age without initializing it \n  age; \n  \n  // Constructor function for creating a new instance of Person \n  constructor(name, age) { \n    this.name = name; // Assign the name argument to the name field \n    this.age = age; // Assign the age argument to the age field \n  }  \n  \n  // Define a method greet to generate a greeting message \n  greet() { \n    // Return a greeting message using the name and age fields \n    return `Hello, my name is ${this.name}, I am ${this.age} years old.`; \n  } \n} \n\n// Create a new instance of Person with 'Bob' as name and 30 as age \nconst bob = new Person('Bob', 30); \n// Call the greet method on the bob instance and log the output \nconsole.log(bob.greet()); // Output: Hello, my name is Bob, I am 30 years old.",Gs=e(xo),fo="// Define a class named Person \nclass Person { \n  // Define a static field species with the value 'Humans' \n  static species = 'Humans'; // Static field means it belongs to the class itself, not to instances of the class \n  \n  // Define a static method getSpecies \n  static getSpecies() { \n    // This method returns the value of the static field species \n    return Person.species; \n  } \n} \n\n// Call the static method getSpecies on the Person class and log the result \nconsole.log(Person.getSpecies()); // Output: Humans",Xs=e(fo),yo="// Define a class named Person \nclass Person { \n  // Declare a private-like field _name to store the person's name \n  _name; \n  \n  // Constructor to initialize a new instance of Person with a name \n  constructor(name) { \n    this._name = name; // Set the private-like field _name to the provided name \n  } \n  \n  // Getter for name that allows reading the private-like _name field \n  get name() { \n    return this._name; // Return the value of _name \n  } \n  \n  // Setter for name that allows writing to the private-like _name field \n  set name(value) { \n    this._name = value; // Set the value of _name to the new value \n  } \n} \n\n// Create a new instance of Person named bob with the name 'Bob' \nconst bob = new Person('Bob'); \nconsole.log(bob.name);  // Use the getter to output: Bob \n\n// Change 'bob.name' to 'Robert' using the setter \nbob.name = 'Robert'; \nconsole.log(bob.name);  // Use the getter again to output: Robert",Ks=e(yo),bo="// Define a class named Person \nclass Person { \n  // Declare a private field #secret initialized with a string \n  #secret = 'I have a secret.'; \n  \n  // Define a private method #privateMethod that uses the private field #secret \n  #privateMethod() { \n    // Return a string that incorporates the private field #secret \n    return `The secret is: ${this.#secret}`; \n  } \n  \n  // Define a public method revealSecret that calls the private method #privateMethod \n  revealSecret() { \n    // Call and return the result of the private method #privateMethod \n    return this.#privateMethod(); \n  }  \n}  \n\n// Create an instance of Person named alice \nconst alice = new Person(); \n// Call the public method revealSecret on alice and log the output \nconsole.log(alice.revealSecret()); // Output: The secret is: I have a secret. \n// Attempting to access the private field #secret directly outside the class body will result in a SyntaxError \n// console.log(alice.#secret); // Syntax Error: Private field '#secret' must be declared in an enclosing class",Qs=e(bo),Zs="class Vehicle {\n  // Class body goes here\n}\n\nclass Car extends Vehicle {\n  // Class body goes here\n}",ei="class Car extends Vehicle {\n  ...\n\n  constructor(...) {\n    super(...); // Call the parent's constructor\n    ...\n  }\n\n  ...\n}",vo="// Define a class named Vehicle \nclass Vehicle { \n  // Constructor that initializes a new instance of Vehicle with a brand \n  constructor(brand) { \n    this.brand = brand; // Assign the brand argument to the brand field \n  } \n  \n  // Define a method start to simulate starting the vehicle \n  start() { \n    // Return a message indicating the vehicle is starting, including its brand \n    return `Starting the ${this.brand}`; \n  } \n}",ti="// Define a subclass Car that inherits from the Vehicle class \nclass Car extends Vehicle { \n  // Constructor that initializes a new instance of Car with brand and model \n  constructor(brand, model) { \n    super(brand); // Call the parent class Vehicle constructor with brand \n    this.model = model; // Assign the model argument to the model field \n  } \n  \n  // Define a method display to show information about the car \n  display() { \n    // Return a message indicating the brand and model of the car \n    return `This is a ${this.brand} ${this.model}`; \n  } \n}",jo="// Define a subclass Car that inherits from the Vehicle class \nclass Car extends Vehicle { \n  // Constructor that initializes a new instance of Car with brand and model \n  constructor(brand, model) { \n    super(brand); // Call the parent class Vehicle constructor with brand \n    this.model = model; // Assign the model argument to the model field \n  } \n  \n  // Define a method display to show information about the car \n  display() { \n    // Return a message indicating the brand and model of the car \n    return `This is a ${this.brand} ${this.model}`; \n  } \n  \n  // Override the start method to add custom behavior for Car \n  start() { \n    // Call the parent's start method and add additional text specific to Car \n    return `${super.start()}. The ${this.model} is ready to go!`; \n  } \n}",wo="// Create a new instance of the Car class with 'Toyota' as the brand and 'Corolla' as the model \nconst myCar = new Car('Toyota', 'Corolla'); \n\n// Call the display method on myCar to output a description of the car \nconsole.log(myCar.display()); // Output: This is a Toyota Corolla \n\n// Call the start method on myCar to simulate starting the car and append additional information \nconsole.log(myCar.start()); // Output: Starting the Toyota. The Corolla is ready to go!",oi=e(`${vo} ${jo} ${wo}`),So="// Create an object using the Object constructor \nlet myObject = new Object(); \nmyObject.name = 'Alice'; // Assign property name \nmyObject.age = 30; // Assign property age \n\n// Create an object using object literal syntax \nlet myObjectLiteral = { \n  name: 'Alice', \n  age: 30 \n}; \n\n// Log the object created by the constructor \nconsole.log('Created by constructor:', myObject); // Output: Created by constructor: { name: 'Alice', age: 30 } \n// Log the object created by literal syntax \nconsole.log('Created by literal:', myObjectLiteral); // Output: Created by literal: { name: 'Alice', age: 30 }",ni=e(So),Lo="// Create an object by calling Object() as a function, equivalent to using new Object() \nlet myObject = Object(); \nmyObject.name = 'Alice'; // Assign property name \nmyObject.age = 30; // Assign property age \n\n// Log the object \nconsole.log('Created by calling the constructor as a function:', myObject); // Output: Created by calling the constructor as a function: { name: 'Alice', age: 30 }",li=e(Lo),To="// Create an array using the Array constructor, assigning elements 'apple', 'banana', 'cherry' \nlet myArray = new Array('apple', 'banana', 'cherry'); \n\n// Create an array using array literal syntax, initializing with elements 'apple', 'banana', 'cherry' \nlet myArrayLiteral = ['apple', 'banana', 'cherry']; \n\n// Log the array created by the constructor \nconsole.log('Created by constructor:', myArray); // Output: Created by constructor: ['apple', 'banana', 'cherry'] \n// Log the array created by literal syntax \nconsole.log('Created by literal:', myArrayLiteral); // Output: Created by literal: ['apple', 'banana', 'cherry']",ai=e(To),Oo="// Create an array by calling Array() as a function, equivalent to using new Array() \nlet myArray = Array('apple', 'banana', 'cherry'); \n\n// Log the array with details on its creation method \nconsole.log('Created by calling the constructor as a function:', myArray); // Output: Created by calling the constructor as a function: ['apple', 'banana', 'cherry']",si=e(Oo),Co="// Create a string object using the String constructor \nlet myString = new String('Hello world'); \n\n// Use the valueOf method to get the string primitive from the string object \nlet myStringPrimitive = myString.valueOf(); \n\n// Concatenate a string to the string object, which returns a string primitive \nlet myStringResult = myString.concat('!'); \n\n// It's generally recommended to use string literals for simplicity and performance \nlet myStringLiteral = 'Hello world'; \n\n// Log the primitive string value obtained from the string object \nconsole.log('Created by constructor:', myStringPrimitive); // Output: Created by constructor: Hello world \n// Log the type of the result from concatenating a string object with a string primitive (which is 'string') \nconsole.log('Type of concatenation of a string object with a string primitive:', typeof myStringResult); // Output: Type of concatenation of a string object with a string primitive: string \n// Log the string created by literal \nconsole.log('Created by literal:', myStringLiteral); // Output: Created by literal: Hello world",ii=e(Co),Eo="// Convert the number 123 to a string '123' by calling the String() function \nlet stringFromNumber = String(123); \n\n// Convert the boolean value true to a string 'true' by calling the String() function \nlet stringFromBoolean = String(true); \n\n// Log the string representation of the number \nconsole.log('Created by calling the constructor as a function:', stringFromNumber); // Output: Created by calling the constructor as a function: 123 \n// Log the string representation of the boolean \nconsole.log('Created by calling the constructor as a function:', stringFromBoolean); // Output: Created by calling the constructor as a function: true \n// Log the type of the variable 'stringFromNumber' to demonstrate it's a string \nconsole.log('Type of created string:', typeof stringFromNumber); // Output: Type of created string: string",ri=e(Eo),ko="// Create a Number object with the value 123 \nlet myNumber = new Number(123); \n\n// Use the valueOf method to get the number primitive from the Number object \nlet myNumberPrimitive = myNumber.valueOf(); \n\n// Perform an operation on a number primitive and a number object, adding 123 and 456 \n// Note: new Number(456) creates a Number object, but the operation converts it to a primitive \nlet myNumberResult = myNumberPrimitive + new Number(456); \n\n// Use a number literal, which is the preferred way to work with numbers in JavaScript \nlet myNumberLiteral = 123; \n\n// Log the primitive number obtained from the Number object \nconsole.log('Created by constructor:', myNumberPrimitive); // Output: Created by constructor: 123 \n// Log the type of the result from adding a number literal and a number object to demonstrate it's a number \nconsole.log('Type of sum of a number literal and a number object:', typeof myNumberResult); // Output: Type of sum of a number literal and a number object: number \n// Log the number created by literal \nconsole.log('Created by literal:', myNumberLiteral); // Output: Created by literal: 123",ci=e(ko),Jo="// Convert the string '123' to the number 123 by calling the Number() as a function \nlet numberFromString = Number('123'); \n\n// Convert the boolean value false to the number 0 by calling the Number() as a function \nlet numberFromBoolean = Number(false); \n\n// Log the number obtained from converting a string \nconsole.log('Created by calling the constructor as a function:', numberFromString); // Output: Created by calling the constructor as a function: 123 \n// Log the number obtained from converting a boolean \nconsole.log('Created by calling the constructor as a function:', numberFromBoolean); // Output: Created by calling the constructor as a function: 0 \n// Log the type of the variable 'numberFromString' to demonstrate it's a number \nconsole.log('Type of created number:', typeof numberFromString); // Output: Type of created number: number",ui=e(Jo),Io="// Create a Boolean object with the value true \nlet myBoolean = new Boolean(true); \n\n// Use the valueOf method to get the boolean primitive from the Boolean object \nlet myBooleanPrimitive = myBoolean.valueOf(); \n\n// Use a boolean literal, which is the preferred way to work with booleans in JavaScript \nlet myBooleanLiteral = true; \n\n// Log the primitive boolean obtained from the Boolean object \nconsole.log('Created by constructor:', myBooleanPrimitive); // Output: Created by constructor: true \n// Log the boolean created by literal \nconsole.log('Created by literal:', myBooleanLiteral); // Output: Created by literal: true",di=e(Io),Do="// Convert the number 1 to a boolean true by calling the Boolean() as a function \nlet boolFromNumber = Boolean(1); \n\n// Log the boolean value obtained from converting a number \nconsole.log('Created by calling the constructor as a function:', boolFromNumber); // Output: Created by calling the constructor as a function: true \n// Log the type of the variable 'boolFromNumber' to demonstrate it's a boolean \nconsole.log('Type of created boolean value:', typeof boolFromNumber); // Output: Type of created boolean value: boolean",pi=e(Do),Ao="// Create a function using the Function constructor, which takes argument names followed by the function body as strings \nlet sum = new Function('a', 'b', 'return a + b'); \n\n// Define a function using a function expression, which is the more common and recommended approach \nlet sumLiteral = function(a, b) { \n  return a + b; \n}; \n\n// Log the result of calling the function created by the Function constructor with arguments 2 and 6 \nconsole.log('Created by constructor:', sum(2, 6)); // Output: Created by constructor: 8 \n// Log the type of the sum variable to show it's recognized as a function \nconsole.log('Type of created function:', typeof sum); // Output: Type of created function: function \n// Log the result of calling the function defined by the function expression with arguments 2 and 6 \nconsole.log('Using function declaration:', sumLiteral(2, 6)); // Output: Using function declaration: 8",mi=e(Ao),Po="// Create a sum function by calling the Function constructor directly \nlet sum = Function('a', 'b', 'return a + b'); // Equivalent to using new Function() \n\n// Log the result of the sum function with 2 and 6 as arguments \nconsole.log('Created by calling the constructor as a function:', sum(2, 6)); // Output: Created by calling the constructor as a function: 8 \n// Log the type of the sum variable to show it's recognized as a function \nconsole.log('Type of created function:', typeof sum); // Output: Type of created function: function",hi=e(Po),Ro="// Create a new Date object to represent the current date and time \nlet now = new Date(); \n\n// Log the current date and time \nconsole.log(now); // Output current date and time",gi=e(Ro),No="// Call the Date() function without new to return a string representing the current date and time \nlet now = Date(); \n\n// Log the string representation of the current date and time \nconsole.log('Created by calling the constructor as a function:', now); // Output will be the current date and time in string format \n// Log the type of the now variable to demonstrate it's a string \nconsole.log('Type of created date:', typeof now); // Output: Type of created date: string",_i=e(No),Mo="// Create a RegExp object using the constructor with a string for word boundaries and word characters \nlet regex = new RegExp('\\\\b\\\\w+\\\\b'); \n\n// Create the same regular expression using literal syntax, preferred for readability \nlet regexLiteral = /\\b\\w+\\b/; \n\n// Log the regular expression created by the constructor \nconsole.log('Created by constructor:', regex); // Output: Created by constructor: /\\b\\w+\\b/ \n// Log the regular expression created by the literal syntax \nconsole.log('Created by literal:', regexLiteral); // Output: Created by literal: /\\b\\w+\\b/",xi=e(Mo),Bo="// Create a RegExp object for matching words bounded by word boundaries\nlet regex = RegExp('\\\\b\\\\w+\\\\b'); // Equivalent to using new RegExp() \n\n// Log the created regular expression \nconsole.log('Created by calling the constructor as a function:', regex); // Output: Created by calling the constructor as a function: /\\b\\w+\\b/ \n// Log the type of the created regular expression, which is 'object' \nconsole.log('Type of created regular expression:', typeof regex); // Output: Type of created regular expression: object",fi=e(Bo),yi="let element = document.getElementById('elementId');",bi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Element By Id Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by ID Example</h1>\n  <div id=\"elementId\">This is the selected element.</div>\n  <br/>\n\n  <script>\n    // Retrieve the element with the specific ID 'elementId' from the document\n    let element = document.getElementById('elementId');\n    \n    // Log the inner text of the retrieved element to the console\n    console.log('This is the inner text of the selected element: ' + element.innerText); // The 'innerText' property gets or sets the text content of the specified element\n  <\/script>\n</body>\n</html>",vi="let elements = document.getElementsByClassName('className');",ji='<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements By Class Name Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Class Name Example</h1>\n  <div class="className">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    // Retrieve all elements that have the class name \'className\'\n    let elements = document.getElementsByClassName(\'className\');\n    \n    // Iterate over the array-like object of collected elements\n    for (let i = 0; i < elements.length; i++) {\n      // Log the inner text of each element\n      console.log(\'This is the selected element: \' + elements[i].innerText); // The innerText property of each element is accessed to obtain its textual content\n    };  \n  <\/script>\n</body>\n</html>',wi="let elements = document.getElementsByTagName('tagName');",Si="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements By Tag Name Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Tag Name Example</h1>\n  <div>Element 1</div>\n  <p>Element 2</p>\n  <span>Element 3</span>\n  <br/>\n  <br/>\n\n  <script>\n    // Retrieve all <div> elements from the document and store them in elements\n    let elements = document.getElementsByTagName('div');\n    \n    // Loop through each element in the elements NodeList\n    let length = elements.length;\n    for (let i = 0; i < elements; i++) {\n      // Log the inner text of the current <div> element\n      console.log('This is the selected element: ' + elements[i].innerText);\n    };  \n  <\/script>\n</body>\n</html>",Li="let element = document.querySelector('selector');",Ti='<!DOCTYPE html>\n<html>\n<head>\n  <title>Query Selector Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id="elementId">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    // Use \'document.querySelector\' to select the first element with the specified ID\n    let element = document.querySelector(\'#elementId\');\n    \n    // Output the inner text of the selected element\n    console.log(\'This is the selected element by id: \' + element.innerText);\n  <\/script>\n</body>\n</html>',Oi="let elements = document.querySelectorAll('selector');",Ci='<!DOCTYPE html>\n<html>\n<head>\n  <title>Query Selector All Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id="elementId">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    // Use \'document.querySelectorAll\' to select all elements with the specified class name\n    let elements = document.querySelectorAll(\'.className\');\n    \n    // Iterate over the NodeList of selected elements\n    for (let i = 0; i < elements.length; i++) {\n      // Log the inner text of each element\n      console.log(\'This is the selected element by class name: \' + elements[i].innerText);\n    };  \n  <\/script>\n</body>\n</html>',Ei="element.innerHTML = '<span>New HTML content</span>';",ki="<!DOCTYPE html>\n<html>\n<head>\n  <title>Inner HTML Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <h1 id=\"elementId\">Initial Content</h1>\n\n  <script>\n    // Retrieve an element by its ID and store it in element\n    let element = document.getElementById('elementId');\n\n    // Set the HTML content inside the retrieved element to a new <span> element\n    element.innerHTML = '<span>New HTML content</span>'; \n  <\/script>\n</body>\n</html>",Ji="element.textContent = 'New text content';",Ii="<!DOCTYPE html>\n<html>\n<head>\n  <title>Inner HTML Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p>Some paragraph with initial content</p>\n\n  <script>\n    // Select the first <p> element in the document\n    let paragraph = document.querySelector('p');\n    \n    // Update the text content of the selected paragraph\n    paragraph.textContent = 'New text content';\n  <\/script>\n</body>\n</html>",Di="element.style.property = 'value';",Ai="<!DOCTYPE html>\n<html>\n<head>\n  <title>Set CSS Properties Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    // Select the HTML element with the ID 'myElement'\n    let element = document.getElementById('myElement');\n    \n    // Set the CSS property values for the selected element\n    element.style.color = 'blue'; // Change the text color to blue\n    element.style.backgroundColor = 'yellow'; // Change the background color to yellow\n    element.style.fontSize = '20px'; // Set the font size to 20 pixels\n    element.style.padding = '10px'; // Add padding of 10 pixels on all sides\n  <\/script>\n</body>\n</html>",Pi="element.classList.add('className');\nelement.classList.remove('className');",Ri="<!DOCTYPE html>\n<html>\n<head>\n  <title>Class Manipulation on Hover Example</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight {\n      background-color: yellow;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    // Select the HTML element with the ID myElement\n    let element = document.getElementById('myElement');\n    \n    // Add an event listener for the mouseover event\n    element.addEventListener('mouseover', function() {\n      // When the mouse hovers over the element, add the highlight class to it\n      element.classList.add('highlight');\n    });\n    \n    // Add an event listener for the mouseout event\n    element.addEventListener('mouseout', function() {\n      // When the mouse moves out of the element, remove the highlight class from it\n      element.classList.remove('highlight');\n    });  \n  <\/script>\n</body>\n</html>",Ni="let value = element.getAttribute('attributeName');\nelement.setAttribute('attributeName', 'attributeValue');\nelement.removeAttribute('attributeName')",Mi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get, Set, and Remove Attribute Examples</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <img id=\"myImage\" src=\"assets/images/cute_cat.jpg\" alt=\"My Image\">\n  <br/>\n\n  <script>\n    // Select the HTML element (image) with the ID myImage\n    let element = document.getElementById('myImage');\n    \n    // Get the value of the src (source) attribute of the image\n    let src = element.getAttribute('src');\n    console.log(src); // Log the source URL of the image\n    \n    // Set the value of the alt (alternative text) attribute for the image\n    element.setAttribute('alt', 'New Alt Text');\n    // Get the new value of the alt attribute to verify it was set correctly\n    let alt = element.getAttribute('alt');\n    console.log(alt); // Log the new alternative text of the image\n    \n    // Remove the alt attribute from the image\n    element.removeAttribute('alt');\n    // Attempt to get the value of the alt attribute after removal\n    alt = element.getAttribute('alt'); \n    console.log(alt); // This will log null, indicating alt attribute is no longer present\n  <\/script>\n</body>\n</html>",Bi="let newElement = document.createElement('tagName');\nlet newText = document.createTextNode('Text content');",Hi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Create Element and Create Text Node Method Examples</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"container\"></div>\n\n  <script>\n    // Select the container element by its ID\n    let container = document.getElementById('container');\n    \n    // Create a new paragraph <p> element\n    let newElement = document.createElement('p');\n    \n    // Create a new text node containing the string 'Text content'\n    let newText = document.createTextNode('Text content');\n    \n    // Append the text node to the newly created paragraph <p> element\n    newElement.appendChild(newText);\n    \n    // Append the new paragraph element, now containing the text, to the container element\n    container.appendChild(newElement);\n  <\/script>\n</body>\n</html>",Ui="parentNode.appendChild(newNode);",zi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Append Child Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"parent\"></div>\n\n  <script>\n    // Get the parent element by its ID\n    let parentElement = document.getElementById('parent');\n\n    // Create a new element\n    let newElement = document.createElement('span');\n    newElement.textContent = 'New Child Element';\n\n    // Append the new element to the parent\n    parentElement.appendChild(newElement);\n  <\/script>\n</body>\n</html>",qi="parentNode.append(...childNodes /* including strings to create text nodes */);",Fi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Append Method Example</title>\n  <style>\n    :root { font-size: 16px; }\n    #contentContainer > div {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n  </style>\n</head>\n<body>\n  <div>\n    <input type=\"text\" id=\"titleInput\" placeholder=\"Enter title\" />\n    <input type=\"text\" id=\"descriptionInput\" placeholder=\"Enter description\" />\n    <button onclick=\"onAddItem()\">Add Content</button>\n  </div>\n  <div id=\"contentContainer\"></div>\n\n  <script>\n    function onAddItem() {\n      // Get titleInput and descriptionInput values\n      let title = document.getElementById('titleInput').value;\n      let description = document.getElementById('descriptionInput').value;\n\n      // Only proceed if both title and description are not empty\n      if (title.trim() !== '' && description.trim() !== '') {\n        // Create a new div to hold the title and description\n        let newItem = document.createElement('div');\n        \n        // Create h2 and p node for the title and description\n        let titleNode = document.createElement('h2');\n        titleNode.textContent = title;\n        let descriptionNode = document.createElement('p');\n        descriptionNode.textContent = description;\n        \n        // Append titleNode, a line break, and descriptionNode to the new div\n        newItem.append(titleNode, ' - ', descriptionNode);\n\n        // Append the new div to the contentContainer\n        document.getElementById('contentContainer').append(newItem);\n\n        // Clear the input fields for the next item\n        document.getElementById('titleInput').value = '';\n        document.getElementById('descriptionInput').value = '';\n      } else {\n        // If either input is empty, alert the user\n        alert('Please enter both a title and a description!');\n      }\n    }\n  <\/script>\n</body>\n</html>",Wi="parentNode.insertBefore(newNode, referenceNode);",Yi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Insert Before Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"container\">\n    <p>Initial Paragraph</p>\n  </div>\n  <button onclick=\"onAddNewParagraph()\">Add New Paragraph above 'Initial Paragraph'</button>\n\n  <script>\n    function onAddNewParagraph() {\n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'New Paragraph';\n\n      // Get the container element and its first child\n      let container = document.getElementById('container');\n      let firstChild = container.firstChild;\n\n      // Insert the new paragraph before the first child in the container element\n      container.insertBefore(newParagraph, firstChild);\n    }\n  <\/script>\n</body>\n</html>",Vi="existingNode.before(newNode);",$i="<!DOCTYPE html>\n<html>\n<head>\n  <title>Before Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"existingParagraph\">This is an existing paragraph.</p>\n  <button onclick=\"onAddParagraphBefore()\">Add New Paragraph Before</button>\n\n  <script>\n    function onAddParagraphBefore() {\n      // Select the existingParagraph element\n      let existingParagraph = document.getElementById('existingParagraph');\n      \n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'I am a new paragraph added before the existing one.';\n      \n      // Use the before() method to insert the new paragraph before the existing one\n      existingParagraph.before(newParagraph);\n    }\n  <\/script>\n</body>\n</html>",Gi="existingNode.after(newNode);",Xi="<!DOCTYPE html>\n<html>\n<head>\n  <title>After Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"existingParagraph\">This is an existing paragraph.</p>\n  <button onclick=\"onAddParagraphAfter()\">Add New Paragraph After</button>\n\n  <script>\n    function onAddParagraphAfter() {\n      // Select the existingParagraph element\n      let existingParagraph = document.getElementById('existingParagraph');\n      \n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'I am a new paragraph added after the existing one.';\n      \n      // Use the after() method to insert the new paragraph after the existing one\n      existingParagraph.after(newParagraph);\n    }\n  <\/script>\n</body>\n</html>",Ki="nodeToReplace.replaceWith(newNode);",Qi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Replace With Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"paragraphToReplace\">This paragraph will be replaced.</p>\n  <button onclick=\"onReplaceParagraph()\">Replace Paragraph</button>\n\n  <script>\n    function onReplaceParagraph() {\n      // Select the paragraphToReplace element\n      let paragraphToReplace = document.getElementById('paragraphToReplace');\n      \n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'This is the new paragraph, replacing the old one.';\n      \n      // Use the replaceWith() method to replace the old paragraph with the new one\n      paragraphToReplace.replaceWith(newParagraph);\n    }\n  <\/script>\n</body>\n</html>",Zi="parentNode.removeChild(childNode);",er='<!DOCTYPE html>\n<html>\n<head>\n    <title>Remove Child Method Example</title>\n    <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="listContainer">\n    <ul>\n      <li id="item1">Item 1 <button onclick="onRemoveItem(\'item1\')">Remove</button></li>\n      <li id="item2">Item 2 <button onclick="onRemoveItem(\'item2\')">Remove</button></li>\n      <li id="item3">Item 3 <button onclick="onRemoveItem(\'item3\')">Remove</button></li>\n    </ul>\n  </div>\n\n  <script>\n    function onRemoveItem(itemId) {\n      // Select the item to be removed by its ID\n      let item = document.getElementById(itemId);\n      \n      // Select the parent of the item, which is the <ul> element\n      let parent = item.parentNode;\n      \n      // Remove the selected item from the parent\n      parent.removeChild(item);\n    }\n  <\/script>\n</body>\n</html>',tr="node.remove();",or='<!DOCTYPE html>\n<html>\n<head>\n  <title>Remove Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="listContainer">\n    <ul>\n      \x3c!-- Each list item <li> contains text and a button. When the button is clicked, it triggers an inline onclick event handler. --\x3e\n      \x3c!-- The button\'s onclick attribute calls \'this.parentNode.remove()\'. this refers to the button itself, so \'this.parentNode\' is the <li> element that contains the button. --\x3e\n      \x3c!-- The remove() method is called on the parent node <li>, which removes the entire list item from the document. This action dynamically alters the DOM to no longer include the clicked item. --\x3e\n      <li>Item 1 <button onclick="this.parentNode.remove()">Remove</button></li>\n      <li>Item 2 <button onclick="this.parentNode.remove()">Remove</button></li>\n      <li>Item 3 <button onclick="this.parentNode.remove()">Remove</button></li>\n    </ul>\n  </div>\n</body>\n</html>',nr="let parentNode = node.parentNode;",lr='<!DOCTYPE html>\n<html>\n<head>\n  <title>Parent Node Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="parentDiv" style="padding: 20px; background-color: #f0f0f0;">\n    This is the parent div.\n    <button onclick="onChangeParentBackgroundColor(this)">Change Parent Background Color</button>\n  </div>\n\n  <script>\n    function onChangeParentBackgroundColor(element) {\n      // Use the parentNode property to access the parent element of the button\n      let parentDiv = element.parentNode;\n      \n      // Change the background color of the parent element\n      parentDiv.style.backgroundColor = \'#a0e0a0\';\n    }\n  <\/script>\n</body>\n</html>',ar="let parentElement = element.parentElement",sr='<!DOCTYPE html>\n<html>\n<head>\n  <title>Parent Element Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="parentDiv" style="padding: 20px; border: 2px solid #0000ff;">\n    This is the parent div. Click the button to change my border style.\n    <button onclick="onChangeParentBorder(this)">Change Border Style</button>\n  </div>\n\n  <script>\n    function onChangeParentBorder(element) {\n      // Use the parentElement property to access the direct parent element of the button\n      let parentDiv = element.parentElement;\n      \n      // Change the border style of the parent element\n      parentDiv.style.border = "3px dashed #ff0000";\n    }\n  <\/script>\n</body>\n</html>',ir="let childNodes = parentNode.childNodes;",rr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Child Nodes Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"myDiv\">\n    <p>First Paragraph</p>\n    \x3c!-- This is a comment node --\x3e\n    <p>Second Paragraph</p>\n    Text node here\n    <p>Third Paragraph</p>\n  </div>\n  <button onclick=\"onChangeChildNodes()\">Change All Child Nodes</button>\n\n  <script>\n    function onChangeChildNodes() {\n      // Access the <div> element and its child nodes\n      let div = document.getElementById('myDiv');\n      let children = div.childNodes;\n      \n      // Iterate over all child nodes\n      for (let i = 0; i < children.length; i++) {\n        // Check if the child node is an element node (nodeType === 1)\n        if (children[i].nodeType === 1) {\n          // Change the text content of element nodes\n          children[i].textContent = 'Modified Element Node';\n        } else if (children[i].nodeType === 3) {\n          // Filter out text nodes that their values contain only '\\n' and empty chars\n          if (children[i].nodeValue.trim() !== '') { \n            // Change the content of text nodes\n            children[i].nodeValue = 'Modified Text Node';\n          }\n        }\n        // Comment nodes (nodeType === 8) and other types are not modified in this example\n      }\n    }\n  <\/script>\n</body>\n</html>",cr="let children = parentElement.children",ur='<!DOCTYPE html>\n<html>\n<head>\n  <title>Children Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <h2>List of Items</h2>\n  <ul id="itemList">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n  <button onclick="onCountChildElements()">Count Child Elements</button>\n  <p id="countResult"></p>\n\n  <script>\n    function onCountChildElements() {\n      // Access the <ul> element and its child elements\n      let list = document.getElementById(\'itemList\');\n      let children = list.children;\n\n      // Count and display the number of child elements\n      let resultText = "Number of child elements: " + children.length;\n      document.getElementById(\'countResult\').textContent = resultText;\n    }\n  <\/script>\n</body>\n</html>',dr="let firstNode = parentNode.firstChild;\nlet lastNode = parentNode.lastChild;",pr="<!DOCTYPE html>\n<html>\n<head>\n  <title>First Child and Last Child Property Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: yellow; }\n  </style>\n</head>\n<body>\n  <h2>Shopping List</h2>\n  <ul id=\"shoppingList\">\n    \x3c!-- Possible whitespace or comment node --\x3e\n    <li>Milk</li>\n    <li>Bread</li>\n    <li>Eggs</li>\n    \x3c!-- Possible whitespace or comment node --\x3e\n  </ul>\n  <button onclick=\"onHighlightFirst()\">Highlight First Item</button>\n  <button onclick=\"onHighlightLast()\">Highlight Last Item</button>\n\n  <script>\n    function onHighlightFirst() {\n      let list = document.getElementById('shoppingList');\n      // firstChild might be a text node (whitespace), so we check and move to the next element sibling if it is\n      let firstItem = list.firstChild.nodeType !== 1 ? list.firstChild.nextElementSibling : list.firstChild;\n      firstItem.classList.add('highlight');\n    }\n\n    function onHighlightLast() {\n      let list = document.getElementById('shoppingList');\n      // lastChild might be a text node (whitespace), so we check and move to the previous element sibling if it is\n      let lastItem = list.lastChild.nodeType !== 1 ? list.lastChild.previousElementSibling : list.lastChild;\n      lastItem.classList.add('highlight');\n    }\n  <\/script>\n</body>\n</html>",mr="let firstElement = parentElement.firstElementChild;\nlet lastElement = parentElement.lastElementChild;",hr="<!DOCTYPE html>\n<html>\n<head>\n  <title>First Element Child and Last Element Child Property Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: lightgreen; }\n  </style>\n</head>\n<body>\n  <h2>Task List</h2>\n  <ul id=\"taskList\">\n    <li>Task 1</li>\n    <li>Task 2</li>\n    <li>Task 3</li>\n  </ul>\n  <button onclick=\"onHighlightFirstElement()\">Highlight First Task</button>\n  <button onclick=\"onHighlightLastElement()\">Highlight Last Task</button>\n\n  <script>\n    function onHighlightFirstElement() {\n      // Retrieve the list by its ID\n      let list = document.getElementById('taskList');\n      // Access the first element child\n      let firstElement = list.firstElementChild;\n      // Add the highlight class to the first element child\n      firstElement.classList.add('highlight');\n    }\n\n    // Function to highlight the last element child of the list\n    function onHighlightLastElement() {\n      // Retrieve the list by its ID\n      let list = document.getElementById('taskList');\n      // Access the last element child\n      let lastElement = list.lastElementChild;\n      // Add the highlight class to the last element child\n      lastElement.classList.add('highlight');\n    }\n  <\/script>\n</body>\n</html>",gr="let nextNode = currentNode.nextSibling;\nlet previousNode = currentNode.previousSibling;",_r='<!DOCTYPE html>\n<html>\n<head>\n  <title>Next Sibling and Previous Sibling Property Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: #ffff99; }\n  </style>\n</head>\n<body>\n  <ul id="itemList">\n    <li>Item 1 <button onclick="onHighlightNext(this)">Next</button></li>\n    <li>Item 2 <button onclick="onHighlightPrevious(this)">Previous</button> <button onclick="onHighlightNext(this)">Next</button></li>\n    <li>Item 3 <button onclick="onHighlightPrevious(this)">Previous</button></li>\n  </ul>\n\n  <script>\n    function onHighlightNext(element) {\n      // Get the next sibling of the parent <li> element\n      let nextItem = element.parentElement.nextSibling;\n      // Check if the next sibling is an element node and highlight it. If not, find the next element sibling.\n      while(nextItem && nextItem.nodeType !== 1) {\n        nextItem = nextItem.nextSibling;\n      }\n      if (nextItem) {\n        nextItem.classList.add(\'highlight\');\n      }\n    }\n\n    function onHighlightPrevious(element) {\n      // Get the previous sibling of the parent <li> element\n      let previousItem = element.parentElement.previousSibling;\n      // Check if the previous sibling is an element node and highlight it. If not, find the previous element sibling.\n      while(previousItem && previousItem.nodeType !== 1) {\n        previousItem = previousItem.previousSibling;\n      }\n      if (previousItem) {\n        previousItem.classList.add(\'highlight\');\n      }\n    }\n  <\/script>\n</body>\n</html>',xr="let nextSibling = currentElement.nextElementSibling;\nlet previousSibling = currentElement.previousElementSibling;",fr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Next Element Sibling and Previous Element Sibling Property Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: lightcoral; }\n    .highlighted { background-color: lightblue; }\n  </style>\n</head>\n<body>\n  <h2>Interactive List</h2>\n  <ul id=\"interactiveList\">\n    <li>Item 1 <button onclick=\"onHighlightSibling(this, 'next')\">Next</button></li>\n    <li>Item 2 <button onclick=\"onHighlightSibling(this, 'prev')\">Previous</button><button onclick=\"onHighlightSibling(this, 'next')\">Next</button></li>\n    <li>Item 3 <button onclick=\"onHighlightSibling(this, 'prev')\">Previous</button></li>\n  </ul>\n\n  <script>\n    function onHighlightSibling(buttonElement, direction) {\n      // Remove existing elements with highlighted class\n      document.querySelectorAll('.highlighted').forEach(function(item) {\n        item.classList.remove('highlighted');\n      });\n\n      let currentLi = buttonElement.parentNode; // The <li> element\n      let targetLi = null; // Target <li> element to highlight\n      \n      if (direction === 'next') {\n        targetLi = currentLi.nextElementSibling; // Get the next element sibling\n      } else if (direction === 'prev') {\n        targetLi = currentLi.previousElementSibling; // Get the previous element sibling\n      }\n\n      if (targetLi) {\n        targetLi.classList.add('highlighted'); // Add highlighted class to the target\n      }\n    }\n  <\/script>\n</body>\n</html>",yr="element.addEventListener('click', () => { /* Code goes here */ });",br="<!DOCTYPE html>\n<html>\n<head>\n  <title>Click Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Paragraph that will have its text changed --\x3e\n  <p id=\"message\">Click the button to change this text!</p>\n  \x3c!-- Button that will trigger the click event --\x3e\n  <button id=\"changeTextBtn\">Click Me!</button>\n\n  <script>\n    // Handle the click event\n    document.getElementById('changeTextBtn').addEventListener('click', () => {\n      // Change the text of the paragraph with id=\"message\"\n      document.getElementById('message').textContent = 'The text has been changed!';\n    });\n  <\/script>\n</body>\n</html>",vr="element.addEventListener('dbclick', () => { /* Code goes here */ });",jr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Double Click Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Paragraph that will have its text color changed on double click --\x3e\n  <p id=\"message\">Double-click me to change my text color to red!</p>\n\n  <script>\n    // Access the paragraph element by its ID \n    let message = document.getElementById('message');\n\n    // Handle the dblclick event\n    message.addEventListener('dblclick', () => {\n      // Change the text color of the paragraph with id=\"message\"\n      message.style.color = 'red';\n    });\n  <\/script>\n</body>\n</html>",wr="element.addEventListener('mouseover', () => { /* Code goes here */ });",Sr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mouseover Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    #hoverDiv {\n      width: 200px;\n      height: 100px;\n      background-color: lightgrey;\n      text-align: center;\n      line-height: 100px;\n      margin-top: 20px;\n    }\n  </style>\n</head>\n<body>\n  \x3c!-- Div that will change background color on mouseover --\x3e\n  <div id=\"hoverDiv\">Hover over me!</div>\n\n  <script>\n    // Access the <div> element by its ID\n    let hoverDiv = document.getElementById('hoverDiv');\n\n    // Handle the mouseover event\n    hoverDiv.addEventListener('mouseover', () => {\n      // Change the background color of the <div> element with id=\"hoverDiv\"\n      hoverDiv.style.backgroundColor = 'blue';\n    });\n  <\/script>\n</body>\n</html>",Lr="element.addEventListener('mouseout', () => { /* Code goes here */ });",Tr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mouseout Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    #colorfulDiv {\n      width: 200px;\n      height: 100px;\n      background-color: blue;\n      text-align: center;\n      line-height: 100px;\n      margin-top: 20px;\n      color: white;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"colorfulDiv\">Move your mouse away!</div>\n\n  <script>\n    // Access the <div> element by its ID\n    let colorfulDiv = document.getElementById('colorfulDiv');\n\n    // Handle the mouseout event\n    colorfulDiv.addEventListener('mouseout', () => {\n      // Change the background color of the <div> element to lightgrey when mouse moves away\n      colorfulDiv.style.backgroundColor = 'lightgrey';\n    });\n  <\/script>\n</body>\n</html>",Or="element.addEventListener('mousemove', event => { /* Code goes here */ });",Cr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mousemove Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    #trackingDiv {\n      width: 300px;\n      height: 150px;\n      background-color: lightblue;\n      text-align: center;\n      line-height: 150px;\n      margin-top: 20px;\n      position: relative; /* Allow for more accurate coordinate tracking */\n    }\n  </style>\n</head>\n<body>\n  <div id=\"trackingDiv\">Move your mouse here!</div>\n\n  <script>\n    // Access the <div> element by its ID\n    let trackingDiv = document.getElementById('trackingDiv');\n\n    // Handle the mousemove event\n    trackingDiv.addEventListener('mousemove', event => {\n      // Calculate mouse coordinates relative to the divelement\n      let mouseX = event.clientX - trackingDiv.getBoundingClientRect().left;\n      let mouseY = event.clientY - trackingDiv.getBoundingClientRect().top;\n      \n      // Display the coordinates within the div element\n      trackingDiv.textContent = 'Mouse Position: X: ' + mouseX + ', Y: ' + mouseY;\n    });\n  <\/script>\n</body>\n</html>",Er="element.addEventListener('mousedown', () => { /* Code goes here */ });\nelement.addEventListener('mouseup', () => { /* Code goes here */ });",kr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mousedown and Mouseup Event Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    #pressButton {\n      padding: 10px 20px;\n      background-color: lightblue;\n      border: none;\n      cursor: pointer;\n      font-size: 16px;\n    }\n  </style>\n</head>\n<body>\n  <button id=\"pressButton\">Press Me</button>\n\n  <script>\n    // Access the button element by its ID\n    let button = document.getElementById('pressButton');\n\n    // Add event listener for the mousedown event\n    button.addEventListener('mousedown', () => {\n      // Change the button's style when it's pressed\n      button.style.backgroundColor = 'darkblue'; // Make the background darkblue\n      button.style.color = 'white'; // Change the text color to white for contrast\n    });\n\n    // Add event listener for the mouseup event\n    button.addEventListener('mouseup', () => {\n      // Revert the button's style back to its original state when the mouse button is released\n      button.style.backgroundColor = 'lightblue'; // Change the background back to lightblue\n      button.style.color = 'black'; // Revert the text color back to black\n    });\n  <\/script>\n</body>\n</html>",Jr="element.addEventListener('keydown', event => { /* Code goes here */ });\nelement.addEventListener('keyup', event => { /* Code goes here */ });",Ir="<!DOCTYPE html>\n<html>\n<head>\n  <title>Keydown and Keyup Event Examples</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputField\" placeholder=\"Press and release 'Enter' key\">\n\n  <script>\n    // Access the input field by its ID\n    let inputField = document.getElementById('inputField');\n\n    // Add event listener for the keydown event\n    inputField.addEventListener('keydown', event => {\n      // Check if the key pressed is the Enter key\n      if (event.key === 'Enter') {\n        // Change the input field's background color when Enter key is pressed\n        inputField.style.backgroundColor = 'lightgreen';\n      }\n    });\n\n    // Add event listener for the keyup event\n    inputField.addEventListener('keyup', event => {\n      // Check if the key released is the Enter key\n      if (event.key === 'Enter') {\n        // Revert the input field's background color when Enter key is released\n        inputField.style.backgroundColor = '';\n      }\n    });\n  <\/script>\n</body>\n</html>",Dr="element.addEventListener('keypress', event => { /* Code goes here */ });",Ar="<!DOCTYPE html>\n<html>\n<head>\n  <title>Keypress Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputField\" placeholder=\"Type something here\">\n  <p id=\"message\"></p>\n\n  <script>\n    // Access the input field and message paragraph by their IDs\n    let inputField = document.getElementById('inputField');\n    let message = document.getElementById('message');\n\n    // Add event listener for the keypress event\n    inputField.addEventListener('keypress', event => {\n      // Display a message including the key pressed using its key property\n      message.textContent = 'Key pressed: ' + event.key;\n    });\n  <\/script>\n</body>\n</html>",Pr="form.addEventListener('submit', event => { /* Code goes here */ });",Rr='<!DOCTYPE html>\n<html>\n<head>\n  <title>Submit Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <form id="myForm">\n    <label for="textInput">Enter something:</label>\n    <input type="text" id="textInput" name="textInput">\n    <button type="submit">Submit</button>\n  </form>\n  <p id="message"></p>\n\n  <script>\n    // Access the form by its ID\n    let form = document.getElementById(\'myForm\');\n\n    // Add event listener for the submit event\n    form.addEventListener(\'submit\', event => {\n      // Prevent the default form submission\n      event.preventDefault();\n      \n      // Access the text input by its name within the form\n      let inputText = form.textInput.value;\n      \n      // Display an alert with the inputted text\n      //alert(\'Form submitted with input: \' + inputText);\n\n      // Display the message below the form as well\n      document.getElementById(\'message\').textContent = \'Form submitted with input: \' + inputText;\n    });\n  <\/script>\n</body>\n</html>',Nr="element.addEventListener('change', event => { /* Code goes here */ });",Mr='<!DOCTYPE html>\n<html>\n<head>\n  <title>Change Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <select id="mySelect">\n    <option value="Option 1">Option 1</option>\n    <option value="Option 2">Option 2</option>\n    <option value="Option 3">Option 3</option>\n  </select>\n  <p id="message">Please select an option.</p>\n\n  <script>\n    // Access the select element by its ID\n    let selectElement = document.getElementById(\'mySelect\');\n    let message = document.getElementById(\'message\');\n\n    // Add event listener for the change event\n    selectElement.addEventListener(\'change\', () => {\n      // Display a message with the currently selected option\n      let selectedOption = selectElement.options[selectElement.selectedIndex].text; // Get the text of the selected option\n      message.textContent = \'You selected: \' + selectedOption; // Update the message below the select menu\n    });\n  <\/script>\n</body>\n</html>',Br="// Function to handle focus event\nfunction onFocus(event) { /* Code goes here */ }\n\n// Function to handle blur event\nfunction onBlur(event) { /* Code goes here */ }\n\n// Add focus event listener\nelement.addEventListener('focus', onFocus);\n// Add blur event listener\nelement.addEventListener('blur', onBlur);",Hr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Focus and Blur Event Examples</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputField1\" placeholder=\"Focus on me\">\n  <input type=\"text\" id=\"inputField2\" placeholder=\"Focus on me too\">\n\n  <script>\n    function onFocus(event) {\n      // Change the background color when the field is focused\n      event.target.style.backgroundColor = 'lightblue';\n    }\n\n    function onBlur(event) {\n      Revert the background color when the field loses focus\n      event.target.style.backgroundColor = 'white';\n    }\n\n    // Access the input fields by their IDs\n    let inputField1 = document.getElementById('inputField1');\n    let inputField2 = document.getElementById('inputField2');\n\n    // Add focus event listeners to the input fields\n    inputField1.addEventListener('focus', onFocus);\n    inputField2.addEventListener('focus', onFocus);\n\n    // Add blur event listeners to the input fields\n    inputField1.addEventListener('blur', onBlur);\n    inputField2.addEventListener('blur', onBlur);\n  <\/script>\n</body>\n</html>",Ur="element.addEventListener('input', event => { /* Code goes here */ });",zr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Input Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <input type=\"text\" id=\"textInput\" placeholder=\"Start typing...\">\n  <p id=\"feedback\">You type, I display!</p>\n\n  <script>\n    // Access the text input field by its ID\n    let textInput = document.getElementById('textInput');\n    // Access the paragraph where the input text will be displayed\n    let feedback = document.getElementById('feedback');\n\n    // Add an event listener for the input event on the text input field\n    textInput.addEventListener('input', () => {\n      // Update the paragraph's text content with the current value of the text input field\n      feedback.textContent = 'You typed: ' + textInput.value;\n    });\n  <\/script>\n</body>\n</html>",qr="document.addEventListener('DOMContentLoaded', () => { /* Code goes here */ });",Fr="<!DOCTYPE html>\n<html>\n<head>\n  <title>DOMContentLoaded Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"message\">Waiting for document to load...</p>\n\n  <script>\n    // Event listener for the DOMContentLoaded event\n    document.addEventListener('DOMContentLoaded', () => {\n      // Access the paragraph by its ID\n      let message = document.getElementById('message');\n      // Update the paragraph's text content to indicate the document is loaded\n      message.textContent = 'The document is fully loaded and parsed!';\n    });\n  <\/script>\n</body>\n</html>",Wr="window.addEventListener('load', () => { /* Code goes here */ });",Yr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Load Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"loadingMessage\">Page is loading, please wait...</p>\n  <p id=\"loadedMessage\" style=\"display: none;\">The entire page is fully loaded, including all resources!</p>\n\n  <script>\n    // Event listener for the load event on the window object\n    window.addEventListener('load', () => {\n      // Access the paragraphs by their IDs\n      let loadingMessage = document.getElementById('loadingMessage');\n      let loadedMessage = document.getElementById('loadedMessage');\n      \n      // Hide the loading message\n      loadingMessage.style.display = 'none';\n      // Show the loaded message\n      loadedMessage.style.display = 'block';\n    });\n  <\/script>\n</body>\n</html>",Vr="// Function to update the window size\nfunction updateWindowSize() { /* Code goes here */ };\nwindow.addEventListener('load', updateWindowSize);",$r="<!DOCTYPE html>\n<html>\n<head>\n  <title>Resize Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"windowSize\">Resize the window to see its size here.</p>\n\n  <script>\n    function onUpdateWindowSize() {\n      let width = window.innerWidth; // Get the current width of the window\n      let height = window.innerHeight; // Get the current height of the window\n      // Update the paragraph's text content with the current window size\n      document.getElementById('windowSize').textContent = 'Window size: ' + width + 'x' + height;\n    }\n\n    // Add event listener for the resize event on the window object\n    window.addEventListener('resize', onUpdateWindowSize);\n\n    // Initial update so the size is correct even before the first resize\n    updateWindowSize();\n  <\/script>\n</body>\n</html>",Gr="function updateScrollMessage() { /* Code goes here */ };\nwindow.addEventListener('scroll', updateScrollMessage)",Xr="<!DOCTYPE html>\n<html>\n<head>\n  <title>Scroll Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    body {\n      height: 2000px;\n    }\n    #scrollMessage {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: lightblue;\n      padding: 10px;\n      border-radius: 5px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"scrollMessage\">Scroll down to see the magic!</div>\n\n  <script>\n    function onUpdateScrollMessage() {\n      let scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n      // Update the text content of the div element with the current scroll position\n      document.getElementById('scrollMessage').textContent = 'You have scrolled ' + scrollPosition + ' pixels.';\n    }\n\n    // Add event listener for the scroll event on the window object\n    window.addEventListener('scroll', onUpdateScrollMessage);\n  <\/script>\n</body>\n</html>",Kr="window.addEventListener('beforeunload', event => { /* Code goes here */ });",Qr="<!DOCTYPE html>\n<html>\n<head>\n  <title>BeforeUnload Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p>Refresh the page to trigger the event.</p>\n\n  <script>\n    // Add event listener for the beforeunload event on the window object\n    window.addEventListener('beforeunload', event => {\n      event.preventDefault();\n      // Set the returnValue property of the event to a custom message or true\n      // Note: Most modern browsers ignore custom messages and display a standard dialog text\n      event.returnValue = 'Are you sure you want to leave? Changes you made may not be saved.';\n    });\n  <\/script>\n</body>\n</html>",Zr="window.addEventListener('unload', event => { /* Code goes here */ });",ec="<!DOCTYPE html>\n<html>\n<head>\n  <title>Unload Event Example</title>\n</head>\n<body>\n  <script>\n    // Add event listener for the unload event on the window object\n    window.addEventListener('unload', function(event) {\n      // Perform cleanup or save state operations\n    });\n  <\/script>\n</body>\n</html>",tc='<button onclick="eventHandler()">Click Me!</button>',oc='<!DOCTYPE html>\n<html>\n<head>\n  <title>HTML Event Attribute Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <button onclick="onDisplayMessage()">Click Me!</button>\n  <p id="message">Button not clicked yet.</p>\n\n  <script>\n    function onDisplayMessage() {\n      // Change the text of the paragraph with id="message"\n      document.getElementById(\'message\').textContent = "Button was clicked!";\n    }\n  <\/script>\n</body>\n</html>',nc='<button onclick="eventHandler(this, event)">Click Me!</button>',lc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Handler Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <button onclick=\"onChangeText(this, event)\">Click Me!</button>\n\n  <script>\n    function onChangeText(element, event) {\n      // element refer to the button, pointing to this passed in\n      element.textContent = 'Button clicked';\n\n      // event is the native DOM event object\n      console.log('Event type:', event.type);\n\n      // Additional actions can be performed using event, such as preventing default actions\n      event.preventDefault();\n    }\n  <\/script>\n</body>\n</html>",ac="element.onclick = function(event) { /* Code goes here */ };",sc='<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM Property Event Handling Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <button id="myButton">Click Me!</button>\n  <p id="message">Button not clicked yet.</p>\n\n  <script>\n    // Get the button element by its ID\n    var myButton = document.getElementById(\'myButton\');\n\n    // Set up the click event handler using the DOM property\n    myButton.onclick = function(event) {\n      // Access the event object, e.g., to prevent the default action\n      event.preventDefault();\n      \n      // Change the text of the <p> element with id="message"\n      document.getElementById(\'message\').textContent = "Button was clicked!";\n      \n      // Log the event type\n      console.log(\'Event type:\', event.type);\n    };\n  <\/script>\n</body>\n</html>',ic="// Create event listener\nfunction eventHandler() { /* Code goes here */ };\n// Add event listener\nelement.addEventListener('click', eventHandler);\n// Remove event listener\nbutton.removeEventListener('click', eventHandler);",rc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Listener Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <button id=\"changeTextButton\">Change Text</button>\n  <p id=\"textToChange\">This text will change when the button is clicked.</p>\n  <input type=\"checkbox\" id=\"toggleEventListener\" checked>\n  <label for=\"toggleEventListener\">Enable Button Event Listener</label>\n\n  <script>\n    function onChangeText() {\n      // Change the paragraph's text\n      document.getElementById('textToChange').textContent = \"Text changed!\";\n    }\n    \n    function onToggleEventListener(event) {\n      const button = document.getElementById('changeTextButton');\n      \n      // Add or remove the event listener\n      if (event.target.checked) {\n        button.addEventListener('click', onChangeText);\n      } else {\n        button.removeEventListener('click', onChangeText);\n      }\n    }\n    \n    // Initially add the event listener to the button\n    document.getElementById('changeTextButton').addEventListener('click', onChangeText);\n    \n    // Set up the event listener for the checkbox\n    document.getElementById('toggleEventListener').addEventListener('change', onToggleEventListener);\n  <\/script>\n</body>\n</html>",cc="let property = event.property;",uc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Object Detailed Property Examples</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <button id=\"infoButton\">Click Me</button>\n  <p id=\"eventType\">Event Type: </p>\n  <p id=\"eventTarget\">Event Target: </p>\n  <p id=\"eventCurrentTarget\">Event CurrentTarget: </p>\n  <p id=\"eventEventPhase\">Event Phase: </p>\n  <p id=\"eventCancelable\">Event Cancelable: </p>\n  <p id=\"eventDefaultPrevented\">Event Default Prevented: </p>\n  <p id=\"eventTimeStamp\">Event TimeStamp: </p>\n\n  <script>\n    document.getElementById('infoButton').addEventListener('click', function(event) {\n      // Display the event type\n      document.getElementById('eventType').textContent = 'Event Type: ' + event.type;\n      \n      // Display the target element tag name\n      document.getElementById('eventTarget').textContent = 'Event Target: ' + event.target.tagName;\n      \n      // Display the current target element tag name\n      document.getElementById('eventCurrentTarget').textContent = 'Event CurrentTarget: ' + event.currentTarget.tagName;\n      \n      // Display the event phase (1 = Capturing, 2 = Target, 3 = Bubbling)\n      document.getElementById('eventEventPhase').textContent = 'Event Phase: ' + event.eventPhase;\n      \n      // Display if the event is cancelable\n      document.getElementById('eventCancelable').textContent = 'Event Cancelable: ' + event.cancelable;\n      \n      // Display if the default action has been prevented\n      document.getElementById('eventDefaultPrevented').textContent = 'Event Default Prevented: ' + event.defaultPrevented;\n      \n      // Display the event timestamp\n      document.getElementById('eventTimeStamp').textContent = 'Event TimeStamp: ' + event.timeStamp;\n    });\n  <\/script>\n</body>\n</html>",dc="event.preventDefault();\nevent.stopPropagation();\nevent.stopImmediatePropagation();",pc='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>Event Object Method Examples</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n    .outer {\n      padding: 20px;\n      background-color: lightblue;\n    }\n    .inner {\n      padding: 20px;\n      background-color: lightcoral;\n    }\n  </style>\n</head>\n<body>\n  <div class="outer" id="outerDiv">Outer Div\n    <div class="inner" id="innerDiv">Inner Div\n      <button id="myButton">Click Me</button>\n    </div>\n  </div>\n\n  <script>\n    // Add listener for the button\n    document.getElementById(\'myButton\').addEventListener(\'click\', function(event) {\n      // Prevent the default action (useful if the button was a submit button in a form, for example)\n      event.preventDefault();\n      \n      // Stop the event from propagating to parent elements\n      event.stopPropagation();\n      \n      alert("Button clicked. Event propagation stopped.");\n      \n      // For demonstration, this would stop all other listeners on the button from being called, if there were any.\n      event.stopImmediatePropagation();\n    });\n\n    // Handler for the inner div element\n    document.getElementById(\'innerDiv\').addEventListener(\'click\', function() {\n      // This alert won\'t show because stopPropagation() in the button\'s handler prevents the event from reaching here\n      alert("Inner div clicked.");\n    });\n\n    // Handler for the outer div element\n    document.getElementById(\'outerDiv\').addEventListener(\'click\', function() {\n      // This alert won\'t show either due to stopPropagation()\n      alert("Outer div clicked.");\n    });\n  <\/script>\n</body>\n</html>',mc="// Event bubbling\nelement1.addEventListener('click', eventHandler);\n\n// Event capturing\nelement2.addEventListener('click', eventHandler, true);",hc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling and Capturing Examples</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n    div {\n      padding: 20px;\n      border: 1px solid black;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"outerDiv1\">\n    <h2>Bubbling:</h2>\n    <div id=\"innerDiv1\">Click Me!</div>\n  </div>\n\n  <div id=\"outerDiv2\">\n    <h2>Capturing:</h2>\n    <div id=\"innerDiv2\">Click Me!</div>\n  </div>\n\n  <script>\n    // Define an event handler function that alerts the ID of the current target element\n    function eventHandler(event) {\n      alert('Event handler triggered on: ' + event.currentTarget.id);\n      // Uncomment the line below to stop the event from propagating further\n      // event.stopPropagation();\n    }\n    \n    // Get references to the first pair of <div> elements for demonstrating event bubbling\n    let innerDiv1 = document.getElementById('innerDiv1');\n    let outerDiv1 = document.getElementById('outerDiv1');\n    \n    // Get references to the second pair of <div> elements for demonstrating event capturing\n    let innerDiv2 = document.getElementById('innerDiv2');\n    let outerDiv2 = document.getElementById('outerDiv2');\n    \n    // Attach event listeners to the first pair of <div> elements to demonstrate event bubbling\n    // Here, false indicates that events will bubble from the inner <div> to the outer <div>\n    innerDiv1.addEventListener('click', eventHandler, false);\n    outerDiv1.addEventListener('click', eventHandler, false);\n    \n    // Attach event listeners to the second pair of <div> elements to demonstrate event capturing\n    // Here, true indicates that events will be captured from the outer <div> to the inner <div>\n    innerDiv2.addEventListener('click', eventHandler, true);\n    outerDiv2.addEventListener('click', eventHandler, true);\n  <\/script>\n</body>\n</html>",gc="parentElement.addEventListener('click' /* Or other events */, event => {\n  // Check if the clicked element is a child element\n  if (event.target.tagName === childElementTagName) {\n    // Code goes here\n  }\n});",_c="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Delegation Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <ul id=\"myList\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    \x3c!-- More items can be dynamically added here --\x3e\n  </ul>\n\n  <script>\n    // Attach an event listener to the parent <ul> element\n    document.getElementById('myList').addEventListener('click', function(event) {\n      // Check if the clicked element is a <li> element\n      if (event.target.tagName === 'LI') {\n        alert('You clicked on item: ' + event.target.textContent);\n      }\n    });\n  <\/script>\n</body>\n</html>",xc="// Fetch data from the server\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => {\n    // Access container element\n    const container = document.getElementById('data-container');\n \n    // Create a new list element for each data item\n    data.forEach(item => {\n      const listItem = document.createElement('li');\n      listItem.textContent = item.name;\n      container.appendChild(listItem);\n    });\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",fc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Dynamic HTML Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <ul id=\"data-container\"></ul>\n \n  <script>\n    // Use the Fetch API to retrieve data from a JSON file\n    fetch('assets/data/json/list.json')\n      .then(response => response.json()) // Convert the response to JSON\n      .then(data => {\n        // Get the container element where the data will be displayed\n        const container = document.getElementById('data-container');\n \n        // Loop through each item in the fetched data\n        data.forEach(item => {\n          // Create a new list item <li> element for each data item\n          const listItem = document.createElement('li');\n          // Set the text content of the list item to the name property of the data item\n          listItem.textContent = item.name;\n          // Append the newly created list item to the container\n          container.appendChild(listItem);\n        });\n      })\n      .catch(error => {\n        // Log any errors that occur during the fetch operation\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",Ho="// Define a function called greet with parameters name and callback\nfunction greet(name, callback) {\n  const message = 'Hello, ' + name + '!';\n\n  // Call the callback function and pass the message as an argument\n  callback(message);\n}\n\n// Callback function to handle the passed data\nfunction displayMessage(message) {\n  console.log(message);\n}\n\n// Call the greet function with arguments 'John' as the name and displayMessage as the callback\ngreet('John', displayMessage);",yc=e(Ho),Uo="// Asynchronous function that simulates making an API request\nfunction fetchDataFromAPI(callback) {\n  // Simulate API request delay with setTimeout\n  setTimeout(() => {\n    const data = ['John', 'Jane', 'Alice'];\n    callback(data);\n  }, 2000); // Simulate 2 seconds delay\n}\n\n// Callback function to handle the fetched data\nfunction handleData(data) {\n  console.log(data);\n}\n\n// Execute the asynchronous function, providing handleData as the callback to process the fetched data.\nfetchDataFromAPI(handleData);",bc=e(Uo),vc="// Create a new Promise object\nconst myPromise = new Promise((resolve, reject) => {\n  // Placeholder for asynchronous operation (e.g., API call, file read)\n  const operationWasSuccessful = true; // Simulate the outcome of an async operation\n\n  if (operationWasSuccessful) {\n    // If operation succeeds, resolve the promise with a success message\n    resolve('Operation succeeded');\n  } else {\n    // If operation fails, reject the promise with a failure message\n    reject('Operation failed');\n  }\n});",jc="myPromise.then(result => { /* Code goes here */ });",wc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Consuming Promise Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function that returns a promise based on the success of an operation\n    function promiseWrapper(successful) {\n      // Create a new Promise object\n      return new Promise((resolve, reject) => {\n        // Use the successful parameter to simulate the outcome of an async operation\n        let operationWasSuccessful = successful;\n      \n        if (operationWasSuccessful) {\n          // If operation is successful, resolve the promise with a success message\n          resolve('Operation succeeded');\n        } else {\n          // If operation fails, reject the promise with a failure message\n          reject('Operation failed');\n        }\n      });\n    }\n    \n    // Execute promiseWrapper with true to simulate a successful operation\n    promiseWrapper(true)\n      .then(\n        result => {\n          // Log the success message if the promise is resolved\n          console.log(result); // Expected output: Operation succeeded\n        }\n      );\n  <\/script>\n</body>\n</html>",Sc="myPromise.catch(error => { /* Code goes here */ });",Lc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Consuming Promise Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function that returns a promise, simulating an asynchronous operation\n    function promiseWrapper(successful) {\n      // Return a new Promise object\n      return new Promise((resolve, reject) => {\n        // Determine the outcome of the simulated operation based on the successful parameter\n        let operationWasSuccessful = successful;\n      \n        if (operationWasSuccessful) {\n          // Resolve the promise with a success message if the operation is successful\n          resolve('Operation succeeded');\n        } else {\n          // Reject the promise with a failure message if the operation fails\n          reject('Operation failed');\n        }\n      });\n    }\n    \n    // Call promiseWrapper with false to simulate a failure operation\n    promiseWrapper(false)\n      .then(result => {\n        // Log the result if the promise is resolved\n        console.log(result); // Expected output: Operation succeeded\n      })\n      .catch(error => {\n        // Log the error if the promise is rejected\n        console.error(error); // This line is for handling failures, not expected to run in this case\n      });\n  <\/script>\n</body>\n</html>",Tc="myPromise.finally(() => { /* Code goes here */ });",Oc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Consuming Promise Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function that returns a promise simulating an asynchronous operation\n    function promiseWrapper(successful) {\n      // Return a new Promise object\n      return new Promise((resolve, reject) => {\n        // Use the successful parameter to determine the outcome of the simulated operation\n        let operationWasSuccessful = successful;\n      \n        if (operationWasSuccessful) {\n          // Resolve the promise with a success message if the operation is successful\n          resolve('Operation succeeded');\n        } else {\n          // Reject the promise with a failure message if the operation fails\n          reject('Operation failed');\n        }\n      });\n    }\n    \n    // Execute promiseWrapper with a true argument to simulate a successful operation\n    promiseWrapper(true)\n      .then(result => {\n        // Log the result if the promise is resolved\n        console.log(result); // Expected output: Operation succeeded\n      })\n      .catch(error => {\n        // Log the error if the promise is rejected\n        console.error(error); // This line is for handling failures, not expected to run in this case\n      })\n      .finally(() => {\n        // Execute after the promise is either resolved or rejected\n        console.log('Promise settled'); // Expected to run after the promise settles, indicating the promise chain is complete\n      });\n  <\/script>\n</body>\n</html>",Cc="myPromise.then(result => newValue).then(result => { /* Code goes here */ });",Ec="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Chaining Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Initialize a promise chain with a new Promise object\n    const promiseChain = new Promise((resolve, reject) => {\n      // Immediately resolve the promise with a value of 1\n      resolve(1);\n    })\n    .then(result => result * 2) // First '.then()' receives the resolved value 1 and multiplies it by 2\n    .then(result => result * 3) // Second '.then()' receives the previous result 2 and multiplies it by 3\n    .then(result => {\n      console.log(result); // Output: 6\n      return result;\n    }); // Third '.then()' receives the previous result 6, log it, and return it\n  <\/script>\n</body>\n</html>",kc="Promise.resolve(value);\nPromise.reject(message);",Jc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Resolve and Reject Examples</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Function to simulate fetching user data based on a userId\n    function getUser(userId) {\n      // Check if the provided userId is valid (positive)\n      if (userId <= 0) {\n        // If userId is invalid, return a rejected Promise with an error message\n        return Promise.reject('Invalid user ID');\n      }\n\n      // If userId is valid, return a resolved Promise with a user object\n      return Promise.resolve({ id: userId, name: 'John Doe' });\n    }\n\n    // Fetch user with a valid ID and log the user data\n    getUser(10).then(user => {\n      // This block is executed for a resolved Promise\n      console.log(user); // Expected output: { id: 10, name: 'John Doe' }\n    });\n\n    // Attempt to fetch user with an invalid ID 0 and log the error\n    getUser(0).catch(error => {\n      // This block is executed for a rejected Promise\n      console.error(error); // Expected output: Invalid user ID\n    });\n  <\/script>\n</body>\n</html>",Ic="Promise.all([Promise.resolve('A'), Promise.resolve('B')]).then(results => { /* Code goes here */ });",Dc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise All Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Use 'Promise.all' with all promises resolving\n    Promise.all([\n      Promise.resolve('A'), // First promise resolves with the value 'A'\n      Promise.resolve('B') // Second promise resolves with the value 'B'\n    ])\n    .then(results => {\n      // Both promises resolved successfully, so this callback is executed\n      console.log(results); // Expected output: ['A', 'B']\n    })\n    .catch(error => {\n      // This block is not executed because there are no rejected promises\n      console.error(error);\n    });\n\n    // Use 'Promise.all' with one of the promises being rejected\n    Promise.all([\n      Promise.resolve('A'), // First promise resolves with the value 'A'\n      Promise.reject('B Rejected') // Second promise is rejected with the reason 'B Rejected'\n    ])\n    .then(results => {\n      // This block is not executed because one of the promises was rejected\n      console.log(results);\n    })\n    .catch(error => {\n      // This block is executed because at least one promise was rejected\n      console.error(error); // Expected output: 'B Rejected'\n    });\n  <\/script>\n</body>\n</html>",Ac="Promise.race([Promise.resolve('A'), Promise.resolve('B')]).then(results => { /* Code goes here */ });",Pc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Race Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Use 'Promise.race' with two promises that both resolve\n    Promise.race([\n      Promise.resolve('A'), // This promise resolves immediately with the value 'A'\n      Promise.resolve('B')  // This promise also resolves immediately with the value 'B'\n    ])\n    .then(result => {\n      // This block is executed with the result of the first promise to resolve\n      console.log(result); // Expected output: A\n    })\n    .catch(error => {\n      // This block would be executed if any of the promises rejected first,\n      // but in this case, it will not execute because both promises resolve.\n      console.error(error);\n    });\n\n    // Use 'Promise.race' to handle the first settled promise from the provided list\n    Promise.race([\n      Promise.resolve('A'), // This promise resolves immediately with the value 'A'\n      Promise.reject('B Rejected') // This promise rejects immediately with the reason 'B Rejected'\n    ])\n    .then(result => {\n      // This block is executed because the resolved promise 'A' settles first\n      console.log(result); // Expected output: A\n    })\n    .catch(error => {\n      // This block would be executed if the first promise to settle was a rejection\n      console.error(error);\n    });\n\n    // Use 'Promise.race' with two promises that both reject\n    Promise.race([\n      Promise.reject('A Rejected'), // This promise rejects immediately with the reason 'A Rejected'\n      Promise.reject('B Rejected')  // This promise also rejects immediately with the reason 'B Rejected'\n    ])\n    .then(result => {\n      // This block would be executed if any of the promises resolved first,\n      // but in this case, it will not execute because both promises reject.\n      console.log(result);\n    })\n    .catch(error => {\n      // This block is executed because the first promise to settle is a rejection\n      console.error(error); // Expected output: A rejected\n    });\n  <\/script>\n</body>\n</html>",Rc="Promise.allSettled([Promise.resolve('A'), Promise.reject('B')]).then(results => { /* Code goes here */ });",Nc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise All Settled Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Use 'Promise.allSettled' with promises that all resolve\n    Promise.allSettled([\n      Promise.resolve('A'), // This promise resolves with the value 'A'\n      Promise.resolve('B')  // This promise resolves with the value 'B'\n    ])\n    .then(results => {\n      // Log the array of outcome objects for each promise\n      console.log(results); // Expected output: [{ status: 'fulfilled', value: 'A' }, { status: 'fulfilled', value: 'B' }]\n    });\n\n    // Use 'Promise.allSettled' with a mix of resolved and rejected promises\n    Promise.allSettled([\n      Promise.resolve('A'), // This promise resolves with the value 'A'\n      Promise.reject('B Rejected')   // This promise rejects with the reason 'B Rejected'\n    ])\n    .then(results => {\n      // Log the array of result objects, each describing the outcome of each promise\n      console.log(results); // Expected output: [{ status: 'fulfilled', value: 'A' }, { status: 'rejected', reason: 'B Rejected' }]\n    });\n  <\/script>\n</body>\n</html>",Mc="Promise.any([Promise.reject('A'), Promise.reject('B')]).then(result => { /* Code goes here */ })",Bc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Any Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Use 'Promise.any' with promises that all resolve\n    Promise.any([\n      Promise.resolve('A'), // This promise resolves immediately with the value 'A'\n      Promise.resolve('B')  // This promise also resolves immediately with the value 'B'\n    ])\n    .then(result => {\n      // This block is executed because at least one promise (the first one that resolves) fulfills\n      console.log(result); // Expected output: A\n    })\n    .catch(error => {\n      // This block is executed if all promises are rejected,\n      // which does not happen in this case since both promises resolve.\n      console.error(error);\n    });\n    \n    // Use 'Promise.any' with a mix of rejected and resolved promises\n    Promise.any([\n      Promise.reject('A Rejected'), // This promise rejects with the reason 'A Rejected'\n      Promise.resolve('B')  // This promise resolves with the value 'B'\n    ])\n    .then(result => {\n      // This block is executed because at least one promise (the second) resolves\n      console.log(result); // Expected output: B\n    })\n    .catch(error => {\n      // This block is executed if all promises are rejected\n      // It's not executed in this case because the second promise resolves\n      console.error(error);\n    });\n\n    // Use 'Promise.any' with promises that all reject\n    Promise.any([\n      Promise.reject('A Rejected'), // This promise rejects with the reason 'A Rejected'\n      Promise.reject('B Rejected')  // This promise also rejects with the reason 'B Rejected'\n    ])\n    .then(result => {\n      // This block is not executed because all promises reject\n      console.log(result);\n    })\n    .catch(error => {\n      // This block is executed due to all promises being rejected\n      // The error is an AggregateError containing all rejection reasons\n      console.error(error.message); // Expected to log a message 'All promises were rejected'\n      console.error(error.errors); // Expected to log an AggregateError with reasons ['A Rejected', 'B Rejected']\n    });\n  <\/script>\n</body>\n</html>",zo="// Define an async function named helloAsync\nasync function helloAsync() {\n  // The async function implicitly returns a promise resolved with the string 'Hello, async!'\n  return 'Hello, async!';\n}\n\n// Call the async function, which returns a promise\nhelloAsync().then((value) => {\n  // Use then() to handle the resolved value of the promise\n  console.log(value); // Output: Hello, async!\n});",Hc=e(zo),qo="// Define an async function to fetch user data \nasync function fetchUserData(userId) { \n  try { \n    // Use the fetch function with await to pause execution until the request completes \n    const response = await fetch(`assets/data/json/user/${userId}.json`); // Simulate an endpoint \n    \n    // Check if the request was successful \n    if (!response.ok) { \n      // If the response status is not OK, throw an error \n      throw new Error(`Failed to fetch data for user ${userId}: ${response.statusText}`); \n    } \n    \n    // Use await again to pause execution until the JSON data is parsed \n    const userData = await response.json(); \n    \n    // Log or process the user data \n    console.log(userData); \n  } catch (error) { \n    // If there's an error in any of the await statements, catch it here \n    console.error('Error fetching user data:', error); \n  } \n} \n\n// Call the async function with a user ID \nfetchUserData(1); // Assume 1 is a valid user ID for demonstration purposes",Uc=e(qo),zc="// Add an event listener to a DOM element for click event\ndocument.getElementById('myButton').addEventListener('click', function() {\n  alert('Button Clicked!');\n});",qc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event-Driven Programming</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <button id=\"myButton\">Click Me!</button>\n\n  <script>\n    // Add an event listener to the button element for click event\n    document.getElementById('myButton').addEventListener('click', function() {\n      alert('Button Clicked!');\n    });\n  <\/script>\n</body>\n</html>",Fc="// Get the title of the document\nlet title = window.document.title;",Wc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Document Title Example</title>\n  <style>\n    :root { font-size: 16px; }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Get the title of the document\n    let title = window.document.title;\n\n    // Log the title of the current web page\n    console.log(title); // Output: Document Title Example (Note: 'Document Title Example' was specified in title tag)\n  <\/script>\n</body>\n</html>",Fo="// Get the width of the viewport in pixels\nlet width = window.innerWidth;\n// Get the height of the viewport in pixels\nlet height = window.innerHeight;\n\n// Log the width and height\nconsole.log(width, height)",Yc=e(Fo),Vc="// Access all the iframes in the document\nlet frames = window.frames;",$c='<!DOCTYPE html>\n<html>\n<head>\n  <title>Window Frames Example</title>\n  <style>\n    :root { font-size: 16px; }\n    iframe { height: 10px; }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <iframe></iframe>\n  <iframe></iframe>\n\n  <script>\n    // Access all the iframes in the document\n    let frames = window.frames;\n\n    // Log the number of iframes\n    console.log(frames.length); // Output: 2\n  <\/script>\n</body>\n</html>',Gc="// Open a new window\nlet newWindow = window.open('https://www.example.com');\n\n// Close the opened window\nwindow.close();",Xc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Window Open and Close Examples</title>\n  <style>\n    :root { font-size: 16px; }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Declare a variable to store the reference to the new window\n    let newWindow;\n\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Open Window'\n    function onOpenWindow() {\n      // Open a new window pointing to 'large-webpage.html' with specified content, name, and features\n      newWindow = window.open('assets/webpages/large-webpage.html', 'newWindow', 'width=200, height=150, left=100, top=150');\n    }\n\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Close Window'\n    function onCloseWindow() {\n      if (newWindow && !newWindow.closed) { // Check if the newWindow exists and is not already closed\n        newWindow.close(); // Close the new window.\n        newWindow = null; // Reset the newWindow variable to null, ensuring it doesn't hold a reference to a closed window\n      }\n    }\n  <\/script>\n\n  <button onclick=\"onOpenWindow()\">Open Window</button>\n  <br />\n  <button onclick=\"onCloseWindow()\">Close Window</button>\n</body>\n</html>",Kc="// Scroll the window to coordinates (0, 300)\nwindow.scrollTo(0, 300);\n\n// Scroll the window 200 pixels down from the current position\nwindow.scrollBy(0, 200);",Qc='<!DOCTYPE html>\n<html>\n<head>\n  <title>Window ScrollTo and ScrollBy Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    div { width: 300px; }\n    iframe {\n      border-width: 0;\n      height: 800px;\n      width: 300px;\n      overflow-y: hidden;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function as an event handler to be triggered by clicking the button labeled \'SrcollTo\'\n    function onScrollTo() {\n      // Scroll to 300 pixels down from the top of the page\n      window.scrollTo(0, 300);\n    }\n\n    // Define a function as an event handler to be triggered by clicking the button labeld \'ScrollBy\'\n    function onScrollBy() {\n      // Scroll down an additional 200 pixels from the current scroll position\n      window.scrollBy(0, 200);\n    }\n  <\/script>\n\n  <div>\n    <button onclick="onScrollTo()">SrcollTo</strong></button>\n    <br />\n    <button onclick="onScrollBy()">SrcollBy</strong></button>\n    <iframe src="assets/webpages/large-webpage.html"></iframe>\n  <div>\n</body>\n</html>',Zc="// Create an alert dialog\nalert('This is an alert dialog box!');\n\n// Create a confirm dialog\nlet userResponse = confirm('Do you really want to proceed?');\n\n// Create a propmt dialog\nlet userName = prompt('Please enter your name:', 'John Doe');",eu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Alert, Prompt, and Confirm Examples</title>\n  <style>\n    :root { font-size: 16px; }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Alert'\n    function onAlert() {\n      // Display a alert dialog with a message 'This is an alert dialog box!'\n      window.alert('This is an alert dialog box!');\n    }\n    \n    // Define a function as an event handler to be triggered by clicking the button labeled 'Prompt'\n    function onPrompt() {\n      // Display a prompt dialog with a default name 'John Doe' and store the input in userName\n      let userName = window.prompt('Please enter your name:', 'John Doe');\n      // Check if the user entered a name (clicked OK)\n      if (userName != null) {\n        // Log a greeting message with the entered name\n        console.log('Hello, ' + userName + '!');\n      }\n    }\n    \n    // Define a function as an event handler to be triggered by clicking the button labeled 'Confirm'\n    function onConfirm() {\n      // Display a confirm dialog and store the user's response (OK or Cancel) in userResponse\n      let userResponse = window.confirm('Do you really want to proceed?');\n      // Check if the user clicked OK\n      if (userResponse) {\n        // Log a message indicating the user clicked OK\n        console.log('User clicked OK!');\n      } else {\n        // Log a message indicating the user clicked Cancel\n        console.log('User clicked Cancel!');\n      }\n    }\n  <\/script>\n\n  <div>\n    <button onclick=\"onAlert()\">Alert<strong>window.alert()</strong></button>\n    <br />\n    <button onclick=\"onPrompt()\">Prompt<strong>window.prompt()</strong></button>\n    <br />\n    <button onclick=\"onConfirm()\">Confirm<strong>window.confirm()</strong></button>\n  <div>\n</body>\n</html>",tu="// Create setTimeout\nlet timeoutID = setTimeout(() => {\n  console.log('This message is shown after 3 seconds');\n}, 3000);\n\n// Clear setTimeout\nclearTimeout(timeoutID);\n\n// Create setInterval\nlet intervalID = setInterval(() => {\n  console.log('This message is shown every 2 seconds');\n}, 2000);\n\n// Clear setInterval\nclearInterval(intervalID);",ou="<!DOCTYPE html>\n<html>\n<head>\n  <title>SetTimeout and SetInterval Examples</title>\n  <style>\n    :root { font-size: 16px; }\n    button { cursor: pointer; }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Declare a variable to store the ID of the timeout\n    let timeoutID;\n    \n    // Define a function as an event handler to be triggered by clicking the button labeled 'Creating Timeout'\n    function onSetTimeout() {\n      timeoutID = window.setTimeout(() => {\n        console.log('This message is shown after 3 seconds');\n      }, 3000); // Set the delay to 3000 milliseconds (3 seconds)\n    }\n    \n    // Define a function as an event handler to be triggered by clicking the button labeled 'Clearing Timeout'\n    function onClearTimeout() {\n      if (timeoutID) { // Check if the timeoutID is not null/undefined\n        window.clearTimeout(timeoutID); // Clear the timeout using its ID\n        timeoutID = null; // Reset the timeoutID to null\n        console.log('The setTimeout is cleared'); // Log message indicating the timeout is cleared\n      }\n    }\n    \n    // Declare a variable to store the ID of the interval\n    let intervalID;\n    \n    // Define a function as an event handler to be triggered by clicking the button labeled 'Creating Interval'\n    function onSetInterval() {\n      intervalID = window.setInterval(() => {\n        console.log('This message is shown every 2 seconds');\n      }, 2000); // Set the delay to 2000 milliseconds (2 seconds)\n    }\n    \n    // Define a function as an event handler to be triggered by clicking the button labeled 'Clearing Interval'\n    function onClearInterval() {\n      if (intervalID) { // Check if the intervalID is not null/undefined\n        window.clearInterval(intervalID); // Clear the interval using its ID\n        intervalID = null; // Reset the intervalID to null\n        console.log('The interval is cleared'); // Log message indicating the interval is cleared\n      }\n    }  \n  <\/script>\n\n  <div>\n    <button onclick=\"onSetTimeout()\">Creating Timeout</strong></button>\n    <br />\n    <button onclick=\"onClearTimeout()\">Clearing Timeout</strong></button>\n    <br />\n    <button onclick=\"onSetInterval()\">Creating Interval</strong></button>\n    <br />\n    <button onclick=\"onClearInterval()\">Clearing Interval</strong></button>\n  <div>\n</body>\n</html>",Wo="// Declare a global variable\nvar globalVar = \"I'm a global variable\";\n\n// Access and log the global variable through the window object\nconsole.log(window.globalVar); // Output: I'm a global variable",nu=e(Wo),Yo="// Add an event listener for the resize event on the window object\nwindow.addEventListener('resize', () => {\n  // Log a message whenever the window is resized\n  console.log('Window size changed');\n});",lu=e(Yo),Vo="// Retrieve the width of the screen\nlet screenWidth = screen.width;\n// Retrieve the height of the screen\nlet screenHeight = screen.height;\n\n// Log the screen width and height\n// The output will vary depending on the device's screen size\nconsole.log(screenWidth, screenHeight);",au=e(Vo),$o="// Retrieve the available width of the screen\nlet availableScreenWidth = screen.availWidth;\n// Retrieve the available height of the screen\nlet availableScreenHeight = screen.availHeight;\n\n// Log the available screen width and height\n// The output will vary depending on the device and any screen space occupied by system UI elements\nconsole.log(availableScreenWidth, availableScreenHeight);",su=e($o),Go="// Retrieve the color depth of the screen\nlet colorDepth = screen.colorDepth;\n\n// Log the color depth\n// The output will vary depending on the device's display capabilities\nconsole.log(colorDepth);",iu=e(Go),Xo="// Retrieve the pixel depth of the screen\nlet pixelDepth = screen.pixelDepth;\n\n// Log the pixel depth\n// The output will vary depending on the device's display characteristics\nconsole.log(pixelDepth);",ru=e(Xo),Ko="// Check if the screen width is 480 pixels or less\nif (screen.width <= 480) {\n  // If true, it's considered a mobile device screen size\n  console.log('Load mobile-specific content or layout');\n} else {\n  // If false, it's considered a desktop or larger device screen size\n  console.log('Load desktop-specific content or layout');\n}",cu=e(Ko),Qo="// Check if the screen's color depth is greater than 24 bits\nif (screen.colorDepth > 24) {\n  // If true, the device likely allows for high-quality images\n  console.log('Use high-quality images');\n} else {\n  // If false, stick to standard-quality images for compatibility\n  console.log('Use standard-quality images');\n}",uu=e(Qo),Zo="window.open( \n  'assets/webpages/hello.html', // URL of the page to open \n  'newWindow', // Name of the new window \n  `width=200, height=150, left=${(screen.availWidth - 400) / 2}, top=${(screen.availHeight - 300) / 2}` // Window features including size and position \n);",du=e(Zo),pu="// Assign the current URL to the variable href\nlet href = location.href;\n\n// Log the current URL\nconsole.log(href);",mu=e('location.href = "assets/webpages/location-href-example.html";'),hu="// Retrieve the protocol of the current page's URL\nlet protocol = location.protocol;\n\n// Log the protocol\nconsole.log(protocol); // Output 'http:' or 'https:' depending on the webpage's protocol",gu=e('location.href = "assets/webpages/location-protocol-example.html";'),_u="// Retrieve the hostname and port number of the current page's URL\nlet host = location.host;\n\n// Log the host (hostname and port)\nconsole.log(host); // Output the host, such as 'example.com:80'",xu=e('location.href = "assets/webpages/location-host-example.html";'),fu="// Retrieve the hostname of the current page's URL\nlet hostname = location.hostname;\n\n// Log the hostname\nconsole.log(hostname); // Output the hostname, such as 'example.com'",yu=e('location.href = "assets/webpages/location-hostname-example.html";'),bu="// Retrieve the port number of the current page's URL\nlet port = location.port;\n\n// Log the port number\nconsole.log(port); // Output the port number, such as '80'",vu=e('location.href = "assets/webpages/location-port-example.html";'),ju="// Retrieve the pathname of the current page's URL\nlet pathname = location.pathname;\n\n// Log the pathname\nconsole.log(pathname); // Output the pathname, such as '/path/'",wu=e('location.href = "assets/webpages/location-pathname-example.html";'),Su="// Retrieve the query string of the current page's URL\nlet search = location.search;\n\n// Log the query string\nconsole.log(search); // Output the query string, such as '?query=string'",Lu=e('location.href = "assets/webpages/location-search-example.html?id=123";'),Tu="// Retrieve the hash (fragment identifier) of the current page's URL\nlet hash = location.hash;\n\n// Log the hash\nconsole.log(hash); // Output the hash, such as '#section1'",Ou=e('location.href = "assets/webpages/location-hash-example.html#section/12";'),Cu='// Please refer to the reload example in "Use Cases"\n\n// Reload the current page\nlocation.reload();',Eu="// Please refer to the redirect example in \"Use Cases\"\n\n// Redirect to 'https://www.newsite.com' without adding a history entry\nlocation.replace('https://www.newsite.com');",ku="// Redirect to 'https://www.newsite.com' and add a history entry\nlocation.assign('https://www.newsite.com');",Ju="// Redirect the browser to 'https://www.newsite.com' and add a history entry\nlocation.href = 'https://www.newsite.com';\n\n// Also redirect to 'https://www.newsite.com' and adds a history entry\nlocation.assign('https://www.newsite.com');",Iu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Location Href and Assign Examples</title>\n  <style>\n    :root { font-size: 16px; }\n  </style>\n</head>\n<body>\n  <script>\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Redirect Using Href Property'\n    function onRedirectWithHref() {\n      location.href = 'assets/webpages/location-redirect-example.html';\n    }\n\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Redirect Using Assign Method'\n    function onRedirectWithAssign() {\n      location.assign('assets/webpages/location-redirect-example.html');\n    }\n  <\/script>\n  <button onclick=\"onRedirectWithHref()\">Redirect Using Href Property<strong>location.href</strong> Property</button>\n  <button onclick=\"onRedirectWithAssign()\">Redirect Using Assign Method<strong>location.assign</strong> Method</button>\n</body>\n</html>",Du="// Reload the current page\nlocation.reload();",Au="<!DOCTYPE html>\n<html>\n<head>\n  <title>Location Reload Example</title>\n  <style>\n    :root { font-size: 16px; }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Reload'\n    function onReload() {\n      // Simulate loading a big webpage by delaying a second to reload\n      console.log('Loading ...');\n      setTimeout(() => {\n        location.reload();\n      }, 1000);\n    }\n  <\/script>\n  <button onclick=\"onReload()\">Reload</strong> Method</button>\n</body>\n</html>",Pu="let protocol = location.protocol; // 'http:' or 'https:'\nlet host = location.host; // 'example.com:8080'\nlet hostname = location.hostname; // 'example.com'\nlet port = location.port; // '8080'\nlet pathname = location.pathname; // '/path/page'\nlet search = location.search; // '?query=string'\nlet hash = location.hash; // '#section'",Ru="// Create a URLSearchParams object from the query string of the current URL\nlet params = new URLSearchParams(location.search);\n\n// Use the get method to retrieve the value of the id parameter\nlet id = params.get('id'); // The URL includes '?id=123'\n\n// Log the value of the id parameter\nconsole.log(id); // Output: 123",Nu=e('location.href = "assets/webpages/location-query-string-example.html?id=123";'),Mu="// Add an event listener for the hashchange event \nwindow.addEventListener('hashchange', () => { \n  // Log the current hash value whenever the hash changes \n  console.log('Current hash:', window.location.hash); \n});",Bu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Location Hash Property and Hash Change Event Examples</title>\n  <style>\n    :root { font-size: 16px; }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function as an event handler to be triggered by clicking the button labeled 'Change URL Hash'\n    function onChangeHash() {\n      // Set the hash fragment to 'section/1'\n      location.hash = 'section/1';\n    }\n\n    // Add an event listener for the hashchange event\n    window.addEventListener('hashchange', () => {\n      // Log the current hash value whenever the hash changes\n      console.log('Current hash:', window.location.hash);\n    });\n  <\/script>\n  <button onclick=\"onChangeHash()\">Change URL Hash</button>\n</body>\n</html>",en="// Retrieve the number of pages in the session history of the current window\nlet length = window.history.length;\n\n// Log the length of the history stack\nconsole.log(length);",Hu=e(en),Uu="// Navigate to the previous page in the browser's history\nhistory.back();",zu="// Navigate to the next page in the browser's history\nhistory.forward();",qu="// Navigate to the previous page in the browser's history, equivalent to clicking the back button\nhistory.go(-1);\n\n// Navigate to the next page in the browser's history, equivalent to clicking the forward button\nhistory.go(1);\n\n// Reload the current page, similar to calling 'location.reload()'\nhistory.go(0);",Fu="// Add a new entry to the history stack\nhistory.pushState({ page: 'newpage' }, 'New Page', 'newpage.html');",Wu="// Modify the current entry in the history stack\nhistory.replaceState({ page: 'anotherpage' }, 'Another Page', 'anotherpage.html');",Yu="// Adds a new entry to the browser's history stack when new content is loaded\nhistory.pushState({contentID: 'content123'}, 'Content Title', '/content/123');",Vu="// Event handler for popstate event, which occurs when the active history entry changes\nwindow.onpopstate = function(event) {\n  // Check if the event's state object exists\n  if(event.state) {\n    // Call the loadContent function, passing the contentID from the event's state object\n    loadContent(event.state.contentID);\n  }\n};\n\n// Define the function to load content based on a contentID\nfunction loadContent(contentID) {\n  console.log('Loading content for ID:', contentID);\n  // Implementation to load and display the content for the given contentID\n}",$u="// Modify the current history entry's URL to '/newpage' without changing the page content\nhistory.replaceState(null, null, '/newpage');",tn="// Modify the current history entry's URL to '/newpage' without changing the page content\nhistory.replaceState(null, null, '/newpage');",Gu=e(tn),on="// Retrieve the version information of the browser\nlet appVersion = navigator.appVersion;\n\n// Log the browser version information\nconsole.log(appVersion); // Example output: 5.0 (Windows)",Xu=e(on),nn="// Retrieve the user agent string of the browser\nlet userAgent = navigator.userAgent;\n\n// Log the browser's user agent string\nconsole.log(userAgent); // Example output: Mozilla/5.0 (Windows NT 10.0; Win64; x64)...",Ku=e(nn),ln="// Retrieve the platform on which the browser is running\nlet platform = navigator.platform;\n\n// Log the browser's platform\nconsole.log(platform); // Example output: Win32",Qu=e(ln),an="// Retrieve the preferred language of the browser\nlet language = navigator.language;\n\n// Log the browser's preferred language\nconsole.log(language); // Example output: en-US",Zu=e(an),sn="// Retrieve an array of the preferred languages of the browser, ordered by preference\nlet languages = navigator.languages;\n\n// Log the array of preferred languages\nconsole.log(languages); // Example output: ['en-US', 'en', 'fr']",ed=e(sn),rn="// Check if the browser is online or offline\nlet onLine = navigator.onLine;\n\n// Log the online status\nconsole.log(onLine); // Output true if online, false if offline",td=e(rn),cn="// Check if cookies are enabled in the browser\nlet cookieEnabled = navigator.cookieEnabled;\n\n// Log the status of cookies (enabled or disabled)\nconsole.log(cookieEnabled); // Output true if cookies are enabled, false if disabled",od=e(cn),un="// Request the current geographic position of the device\nnavigator.geolocation.getCurrentPosition(position => {\n  // Log the latitude and longitude\n  console.log(position.coords.latitude, position.coords.longitude);\n});",nd=e(un),dn="// Check if the browser is currently online\nif (navigator.onLine) {\n  // If the browser is online, log a message indicating online status\n  console.log('Browser is online');\n} else {\n  // If the browser is offline, log a message indicating offline status\n  console.log('Browser is offline');\n}",ld=e(dn),pn="// Determine the user's preferred language\nlet preferredLanguage = navigator.languages ? navigator.languages[0] : navigator.language;\n\n// Log the preferred language\nconsole.log(preferredLanguage); // Example output: en-US",ad=e(pn),mn="// Check the user agent string for indicators of a mobile environment\nif (/Mobi|Android/i.test(navigator.userAgent)) {\n  // If the pattern matches, log that a mobile environment has been detected\n  console.log('Mobile environment detected');\n} else {\n  // If the pattern does not match, log that a mobile environment is not detected\n  console.log('Mobile environment is not detected');\n}",sd=e(mn),hn="// Check if the Geolocation API is available in the browser \nif ('geolocation' in navigator) { \n  // Use the Geolocation API to get the current position \n  navigator.geolocation.getCurrentPosition(position => { \n    // Log the latitude and longitude \n    console.log(`Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`); \n  }); \n}",id=e(hn),gn="// Check if the Geolocation API is supported by the browser\nif (navigator.geolocation) {\n  // Request the current position\n  navigator.geolocation.getCurrentPosition(\n    // Success callback function\n    position => {\n      // Extract latitude and longitude from the position object\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      // Log the latitude and longitude\n      console.log(latitude, longitude);\n    },\n    // Error callback function\n    error => {\n      // Log any errors encountered during the request\n      console.error('Error:', error.message);\n    }\n  );\n} else {\n  // Log an error message if Geolocation API is not supported\n  console.error('Geolocation is not supported by this browser.');\n}",rd=e(gn),_n="// Store data\nlocalStorage.setItem('key', 'Hello World!');\n\n// Retrieve data\nconst data = localStorage.getItem('key');\nconsole.log(data);\n\n// Remove data\nlocalStorage.removeItem('key');",cd=e(_n),ud="// Retrieve the button element by its ID\nconst copyButton = document.getElementById('copyButton');\n// Define the text that will be copied to the clipboard\nconst textToCopy = 'Hello, world!';\n\n// Add a click event listener to the copy button\ncopyButton.addEventListener('click', async () => {\n  try {\n    // Use the Clipboard API to write text to the user's clipboard\n    await navigator.clipboard.writeText(textToCopy);\n    // Log a success message if the text is copied successfully\n    console.log('Text copied to clipboard successfully!');\n  } catch (err) {\n    // Log an error message if the text fails to copy\n    console.error('Failed to copy text:', err);\n  }\n});",dd="// Retrieve the paste button element by its ID\nconst pasteButton = document.getElementById('pasteButton');\n// Retrieve the output element where the pasted text will be displayed\nconst outputElement = document.getElementById('output');\n\n// Add a click event listener to the paste button\npasteButton.addEventListener('click', async () => {\n  try {\n    // Use the Clipboard API to read text from the user's clipboard\n    const textFromClipboard = await navigator.clipboard.readText();\n    // Display the retrieved text in the output element, prefixed with a label\n    outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n  } catch (err) {\n    // Log an error message if reading from the clipboard fails\n    console.error('Failed to read text from clipboard:', err);\n  }\n});",pd="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Clipboard API Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputText\" placeholder=\"Enter text to copy\">\n  <button id=\"copyButton\">Copy to Clipboard</button>\n  <button id=\"pasteButton\">Paste from Clipboard</button>\n  <div id=\"output\"></div>\n\n  <script>\n    // Retrieve the input text element by its ID\n    const inputText = document.getElementById('inputText');\n    // Retrieve the copy button element by its ID\n    const copyButton = document.getElementById('copyButton');\n    // Retrieve the paste button element by its ID\n    const pasteButton = document.getElementById('pasteButton');\n    // Retrieve the output element where the pasted text will be displayed\n    const outputElement = document.getElementById('output');\n    \n    // Add a click event listener to the copy button\n    copyButton.addEventListener('click', async () => {\n      // Get the current value (text) from the input field\n      const textToCopy = inputText.value;\n      try {\n        // Use the Clipboard API to write the text from the input field to the user's clipboard\n        await navigator.clipboard.writeText(textToCopy);\n        // Log a success message\n        console.log('Text copied to clipboard successfully!');\n      } catch (err) {\n        // Log an error message if the copy operation fails\n        console.error('Failed to copy text:', err);\n      }\n    });\n    \n    // Add a click event listener to the paste button\n    pasteButton.addEventListener('click', async () => {\n      try {\n        // Use the Clipboard API to read text from the user's clipboard\n        const textFromClipboard = await navigator.clipboard.readText();\n        // Display the retrieved text in the output element, prefixed with a label\n        outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n      } catch (err) {\n        // Log an error message if reading from the clipboard fails\n        console.error('Failed to read text from clipboard:', err);\n      }\n    });\n  <\/script>\n</body>\n</html>",md="const xhr = new XMLHttpRequest();",hd="xhr.open('GET', 'https://api.example.com/data', true);",gd="xhr.setRequestHeader('Content-Type', 'application/json');",_d="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n      const responseData = xhr.responseText;\n      // ...\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",xd="xhr.send();",fd="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr = new XMLHttpRequest();\n\n    // Set up the AJAX request\n    xhr.open('GET', 'assets/data/json/hello.json', true); // true for asynchronous, false for synchronous\n    \n    // Set up request headers\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Handle the Response\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          // Request was successful, handle the response\n          const responseData = xhr.responseText;\n          console.log(xhr.responseText); // Output the response data\n        } else {\n          // Handle HTTP error\n          console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n        }\n      }\n    };\n\n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",yd="let xhr;\ntry {\n  xhr = new XMLHttpRequest();\n} catch (error) {\n  // Handle initialization error\n  console.error('XMLHttpRequest creation failed:', error);\n}",bd="xhr.onerror = function() {\n  // Handle network error\n  console.error('Network error occurred:', xhr.status, xhr.statusText);\n};",vd="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",jd="xhr.timeout = 5000; // Set the timeout to 5 seconds\n\nxhr.ontimeout = function() {\n  // Handle timeout error\n  console.error('Request timed out');\n};",xn="// Create an XMLHttpRequest object\nlet xhr;\ntry {\n  xhr = new XMLHttpRequest();\n} catch (error) {\n  // Handle initialization error\n  console.error('XMLHttpRequest creation failed:', error);\n}\n\n// Set up the AJAX request\nxhr.open('GET', 'https://api.example.com/data', true); // true for asynchronous, false for synchronous\n\n// Set up request headers\nxhr.setRequestHeader('Content-Type', 'application/json');\n\n// Handle the Response\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n      const responseData = xhr.responseText;\n      console.log(xhr.responseText); // Output the response data\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};\n\n// Handle network error\nxhr.onerror = function() {\n  console.error('Network error occurred:', xhr.status, xhr.statusText);\n};\n\nxhr.timeout = 5000; // Set the timeout to 5 seconds\n\n// Handle timeout error\nxhr.ontimeout = function() {\n  console.error('Request timed out');\n};\n\n// Send the Request\nxhr.send();",wd=e(xn),Sd="<div>\n  \x3c!-- The content will be updated here --\x3e\n  <h2 id=\"header\">Original header</h2>\n  <p id=\"paragraph\">Original paragraph</p>\n</div>\n\n<script>\n  // Create a new XMLHttpRequest object\n  const xhr = new XMLHttpRequest();\n\n  // Configure the AJAX request\n  xhr.open('GET', 'assets/data/json/content.json', true);\n\n  // Set up the response handling\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status === 200) {\n        // Request was successful, handle the response\n        const data = JSON.parse(xhr.responseText);\n\n        // Update the content of <h2> and <p> elements with the data from the JSON file\n        document.getElementById('header').innerText = data.title;\n        document.getElementById('paragraph').innerText = data.content;\n      }\n    }\n  };\n\n  // Send the AJAX request\n  xhr.send();\n<\/script>",Ld="<!DOCTYPE html>\n<html>\n<head>\n  <title>AJAX Updating Web Page Content Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div>\n    <h2 id=\"header\">Original header</h2>\n    <p id=\"paragraph\">Original paragraph</p>\n  </div>\n  <button id=\"updateButton\">Update Content</button>\n\n  <script>\n    // Event listener to handle the button click\n    document.getElementById('updateButton').addEventListener('click', function() {\n      // Create a new XMLHttpRequest object\n      const xhr = new XMLHttpRequest();\n\n      // Configure the AJAX request\n      xhr.open('GET', 'assets/data/json/content.json', true);\n\n      // Set up the response handling\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            // Request was successful, handle the response\n            const data = JSON.parse(xhr.responseText);\n\n            // Update the content of <h2> and <p> elements with the data from the JSON file\n            document.getElementById('header').innerText = data.title;\n            document.getElementById('paragraph').innerText = data.content;\n          } else {\n            // Handle HTTP error\n            console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n          }\n        }\n      };\n\n      // Handle network errors\n      xhr.onerror = function() {\n        console.error('Network error occurred');\n      };\n\n      // Send the AJAX request\n      xhr.send();\n    });\n  <\/script>\n</body>\n</html>",fn="// Initiate a fetch request to get the JSON file from the specified path\nfetch('assets/data/json/hello.json')\n  .then(response => {\n    // Check if the fetch request was successful (status 200-299)\n    if (response.ok) {\n      // Parse the JSON from the response body\n      return response.json();\n    }\n  })\n  .then(data => {\n    // Log the hello property from the parsed JSON data\n    console.log(data.hello);\n  });",Td=e(fn),yn="// API endpoint that returns the posted data\nconst apiUrl = 'https://httpbin.org/post'; // This is a third-party endpoint used temporarilly\n\n// Data to be sent in the request body\nconst postData = {\n  title: 'Understanding Fetch',\n  body: 'This is a post about the fetch API.',\n  userId: 1\n};\n\n// Fetch options\nconst fetchOptions = {\n  method: 'POST', // Request method\n  headers: {\n    'Content-Type': 'application/json', // Content type header\n  },\n  body: JSON.stringify(postData), // Stringify the data object to JSON\n};\n\n// Perform the fetch request\nfetch(apiUrl, fetchOptions)\n  .then(response => {\n    if (!response.ok) {\n      // If the response status code is not in the 200-299 range,\n      // throw an error with the status text\n      throw new Error('Request failed: ' + response.statusText);\n    }\n    // Parse the JSON response body\n    return response.json();\n  })\n  .then(json => {\n    // Handle the parsed data\n    console.log('Success:', json.data);\n  })\n  .catch(error => {\n    // Handle any errors that occurred during the fetch or in processing the response\n    console.error(error);\n  });",Od=e(yn),bn="// Attempt to fetch a JSON file from the specified path\nfetch('assets/data/json/data.json') // File 'data.json' doesn't exist in the path\n  .then(response => {\n    // Check if the HTTP response status indicates success\n    if (response.ok) {\n      // If successful, parse the response body as JSON\n      return response.json();\n    } else {\n      // If the request was not successful, throw an error\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Log the hello property of the parsed JSON\n    console.log(data.hello);\n  })\n  .catch(error => {\n    // Catch and log any errors that occurred during the fetch or data processing\n    console.error(error);\n  });",Cd=e(bn),vn="// Define a function to demonstrate error handling in JavaScript\nfunction handleError() {\n  try {\n    // Simulate code that might throw an error by explicitly throwing one\n    throw new Error('Custom error message');\n  } catch (error) {\n    // Catch and handle the error, and log it\n    console.error('Error: ' + error.message);\n  } finally {\n    // Code inside the finally block is executed regardless of the 'try/catch' outcome\n    console.log('The finally code block is executed.');\n  }\n}\n\n// Execute the handleError function to demonstrate its functionality\nhandleError();",Ed=e(vn);var kd=n(7359);let u=(()=>{class t{constructor(){this.bookData=d}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=l.Xpm({type:t,selectors:[["app-js-chapter"]],decls:1,vars:1,consts:[[3,"bookData"]],template:function(o,jn){1&o&&l._UZ(0,"app-chapter",0),2&o&&l.Q6J("bookData",jn.bookData)},dependencies:[kd.l]}),t})();const Jd=[{path:"",component:Tn,children:[{path:"chapter",component:u},{path:"chapter/:chid",component:u},{path:"chapter/:chid/section/:secid",component:u},{path:"**",component:u},{path:"",component:u}]}];let Id=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=l.oAB({type:t}),t.\u0275inj=l.cJS({imports:[p.Bz.forChild(Jd),p.Bz]}),t})();var Dd=n(6086);let Ad=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=l.oAB({type:t}),t.\u0275inj=l.cJS({imports:[wn.ez,Id,Dd.I]}),t})()}}]);